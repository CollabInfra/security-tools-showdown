{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "2.3.240", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_41", "name": "Ensure no hard coded AWS access key and secret key exists in provider", "shortDescription": {"text": "Ensure no hard coded AWS access key and secret key exists in provider"}, "fullDescription": {"text": "Ensure no hard coded AWS access key and secret key exists in provider"}, "help": {"text": "Ensure no hard coded AWS access key and secret key exists in provider\nResource: aws.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_secrets_5"}, {"id": "CKV_OCI_1", "name": "Ensure no hard coded OCI private key in provider", "shortDescription": {"text": "Ensure no hard coded OCI private key in provider"}, "fullDescription": {"text": "Ensure no hard coded OCI private key in provider"}, "help": {"text": "Ensure no hard coded OCI private key in provider\nResource: oci.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_oci_secrets_1"}, {"id": "CKV_AWS_186", "name": "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)", "shortDescription": {"text": "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)"}, "fullDescription": {"text": "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)"}, "help": {"text": "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)\nResource: aws_s3_bucket_object.data_object"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_general_106"}, {"id": "CKV_ALI_10", "name": "Ensure OSS bucket has versioning enabled", "shortDescription": {"text": "Ensure OSS bucket has versioning enabled"}, "fullDescription": {"text": "Ensure OSS bucket has versioning enabled"}, "help": {"text": "Ensure OSS bucket has versioning enabled\nResource: alicloud_oss_bucket.bad_bucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-oss-bucket-has-versioning-enabled"}, {"id": "CKV_ALI_6", "name": "Ensure OSS bucket is encrypted with Customer Master Key", "shortDescription": {"text": "Ensure OSS bucket is encrypted with Customer Master Key"}, "fullDescription": {"text": "Ensure OSS bucket is encrypted with Customer Master Key"}, "help": {"text": "Ensure OSS bucket is encrypted with Customer Master Key\nResource: alicloud_oss_bucket.bad_bucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-oss-bucket-is-encrypted-with-customer-master-key"}, {"id": "CKV_ALI_12", "name": "Ensure the OSS bucket has access logging enabled", "shortDescription": {"text": "Ensure the OSS bucket has access logging enabled"}, "fullDescription": {"text": "Ensure the OSS bucket has access logging enabled"}, "help": {"text": "Ensure the OSS bucket has access logging enabled\nResource: alicloud_oss_bucket.bad_bucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-oss-bucket-has-access-logging-enabled"}, {"id": "CKV_ALI_1", "name": "Alibaba Cloud OSS bucket accessible to public", "shortDescription": {"text": "Alibaba Cloud OSS bucket accessible to public"}, "fullDescription": {"text": "Alibaba Cloud OSS bucket accessible to public"}, "help": {"text": "Alibaba Cloud OSS bucket accessible to public\nResource: alicloud_oss_bucket.bad_bucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-oss-bucket-is-not-accessible-to-public"}, {"id": "CKV_ALI_11", "name": "Ensure OSS bucket has transfer Acceleration enabled", "shortDescription": {"text": "Ensure OSS bucket has transfer Acceleration enabled"}, "fullDescription": {"text": "Ensure OSS bucket has transfer Acceleration enabled"}, "help": {"text": "Ensure OSS bucket has transfer Acceleration enabled\nResource: alicloud_oss_bucket.bad_bucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-oss-bucket-has-transfer-acceleration-disabled"}, {"id": "CKV_ALI_20", "name": "Ensure RDS instance uses SSL", "shortDescription": {"text": "Ensure RDS instance uses SSL"}, "fullDescription": {"text": "Ensure RDS instance uses SSL"}, "help": {"text": "Ensure RDS instance uses SSL\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-rds-instance-uses-ssl"}, {"id": "CKV_ALI_30", "name": "Ensure RDS instance auto upgrades for minor versions", "shortDescription": {"text": "Ensure RDS instance auto upgrades for minor versions"}, "fullDescription": {"text": "Ensure RDS instance auto upgrades for minor versions"}, "help": {"text": "Ensure RDS instance auto upgrades for minor versions\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-rds-instance-is-set-to-perform-auto-upgrades-for-minor-versions"}, {"id": "CKV_ALI_37", "name": "Ensure RDS instance has log_connections enabled", "shortDescription": {"text": "Ensure RDS instance has log_connections enabled"}, "fullDescription": {"text": "Ensure RDS instance has log_connections enabled"}, "help": {"text": "Ensure RDS instance has log_connections enabled\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-rds-instance-has-log_connections-enabled"}, {"id": "CKV_ALI_36", "name": "Ensure RDS instance has log_disconnections enabled", "shortDescription": {"text": "Ensure RDS instance has log_disconnections enabled"}, "fullDescription": {"text": "Ensure RDS instance has log_disconnections enabled"}, "help": {"text": "Ensure RDS instance has log_disconnections enabled\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-rds-instance-has-log_disconnections-enabled-1"}, {"id": "CKV_ALI_9", "name": "Ensure database instance is not public", "shortDescription": {"text": "Ensure database instance is not public"}, "fullDescription": {"text": "Ensure database instance is not public"}, "help": {"text": "Ensure database instance is not public\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-database-instance-is-not-public"}, {"id": "CKV_ALI_25", "name": "Ensure RDS Instance SQL Collector Retention Period should be greater than 180", "shortDescription": {"text": "Ensure RDS Instance SQL Collector Retention Period should be greater than 180"}, "fullDescription": {"text": "Ensure RDS Instance SQL Collector Retention Period should be greater than 180"}, "help": {"text": "Ensure RDS Instance SQL Collector Retention Period should be greater than 180\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-rds-instance-sql-collector-retention-period-should-be-greater-than-180"}, {"id": "CKV_ALI_35", "name": "Ensure RDS instance has log_duration enabled", "shortDescription": {"text": "Ensure RDS instance has log_duration enabled"}, "fullDescription": {"text": "Ensure RDS instance has log_duration enabled"}, "help": {"text": "Ensure RDS instance has log_duration enabled\nResource: alicloud_db_instance.seeme"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-rds-instance-has-log_connections-enabled"}, {"id": "CKV_ALI_4", "name": "Ensure Action Trail Logging for all regions", "shortDescription": {"text": "Ensure Action Trail Logging for all regions"}, "fullDescription": {"text": "Ensure Action Trail Logging for all regions"}, "help": {"text": "Ensure Action Trail Logging for all regions\nResource: alicloud_actiontrail_trail.fail"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-action-trail-logging-for-all-regions"}, {"id": "CKV_ALI_5", "name": "Ensure Action Trail Logging for all events", "shortDescription": {"text": "Ensure Action Trail Logging for all events"}, "fullDescription": {"text": "Ensure Action Trail Logging for all events"}, "help": {"text": "Ensure Action Trail Logging for all events\nResource: alicloud_actiontrail_trail.fail"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-alibaba-cloud-action-trail-logging-for-all-events"}, {"id": "CKV_AWS_161", "name": "Ensure RDS database has IAM authentication enabled", "shortDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "fullDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "help": {"text": "Ensure RDS database has IAM authentication enabled\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-rds-database-has-iam-authentication-enabled"}, {"id": "CKV_AWS_293", "name": "Ensure that AWS database instances have deletion protection enabled", "shortDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "fullDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "help": {"text": "Ensure that AWS database instances have deletion protection enabled\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_157", "name": "Ensure that RDS instances have Multi-AZ enabled", "shortDescription": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "fullDescription": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "help": {"text": "Ensure that RDS instances have Multi-AZ enabled\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/general_73"}, {"id": "CKV_AWS_129", "name": "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled", "shortDescription": {"text": "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"}, "fullDescription": {"text": "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"}, "help": {"text": "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-respective-logs-of-amazon-relational-database-service-amazon-rds-are-enabled"}, {"id": "CKV_AWS_133", "name": "Ensure that RDS instances has backup policy", "shortDescription": {"text": "Ensure that RDS instances has backup policy"}, "fullDescription": {"text": "Ensure that RDS instances has backup policy"}, "help": {"text": "Ensure that RDS instances has backup policy\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-rds-instances-have-backup-policy"}, {"id": "CKV_AWS_226", "name": "Ensure DB instance gets all minor upgrades automatically", "shortDescription": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "fullDescription": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "help": {"text": "Ensure DB instance gets all minor upgrades automatically\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-aws-db-instance-gets-all-minor-upgrades-automatically"}, {"id": "CKV_AWS_17", "name": "Ensure all data stored in RDS is not publicly accessible", "shortDescription": {"text": "Ensure all data stored in RDS is not publicly accessible"}, "fullDescription": {"text": "Ensure all data stored in RDS is not publicly accessible"}, "help": {"text": "Ensure all data stored in RDS is not publicly accessible\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/public_2"}, {"id": "CKV_AWS_118", "name": "Ensure that enhanced monitoring is enabled for Amazon RDS instances", "shortDescription": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "fullDescription": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "help": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-enhanced-monitoring-is-enabled-for-amazon-rds-instances"}, {"id": "CKV_AWS_16", "name": "Ensure all data stored in the RDS is securely encrypted at rest", "shortDescription": {"text": "Ensure all data stored in the RDS is securely encrypted at rest"}, "fullDescription": {"text": "Ensure all data stored in the RDS is securely encrypted at rest"}, "help": {"text": "Ensure all data stored in the RDS is securely encrypted at rest\nResource: aws_db_instance.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/general_4"}, {"id": "CKV_AWS_23", "name": "Ensure every security groups rule has a description", "shortDescription": {"text": "Ensure every security groups rule has a description"}, "fullDescription": {"text": "Ensure every security groups rule has a description"}, "help": {"text": "Ensure every security groups rule has a description\nResource: aws_security_group.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/networking_31"}, {"id": "CKV_AWS_79", "name": "Ensure Instance Metadata Service Version 1 is not enabled", "shortDescription": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "fullDescription": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "help": {"text": "Ensure Instance Metadata Service Version 1 is not enabled\nResource: aws_instance.db_app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_general_31"}, {"id": "CKV_AWS_126", "name": "Ensure that detailed monitoring is enabled for EC2 instances", "shortDescription": {"text": "Ensure that detailed monitoring is enabled for EC2 instances"}, "fullDescription": {"text": "Ensure that detailed monitoring is enabled for EC2 instances"}, "help": {"text": "Ensure that detailed monitoring is enabled for EC2 instances\nResource: aws_instance.db_app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-detailed-monitoring-is-enabled-for-ec2-instances"}, {"id": "CKV_AWS_135", "name": "Ensure that EC2 is EBS optimized", "shortDescription": {"text": "Ensure that EC2 is EBS optimized"}, "fullDescription": {"text": "Ensure that EC2 is EBS optimized"}, "help": {"text": "Ensure that EC2 is EBS optimized\nResource: aws_instance.db_app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-ec2-is-ebs-optimized"}, {"id": "CKV_AWS_8", "name": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted", "shortDescription": {"text": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted"}, "fullDescription": {"text": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted"}, "help": {"text": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted\nResource: aws_instance.db_app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/general_13"}, {"id": "CKV_AWS_46", "name": "Ensure no hard-coded secrets exist in EC2 user data", "shortDescription": {"text": "Ensure no hard-coded secrets exist in EC2 user data"}, "fullDescription": {"text": "Ensure no hard-coded secrets exist in EC2 user data"}, "help": {"text": "Ensure no hard-coded secrets exist in EC2 user data\nResource: aws_instance.web_host"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_secrets_1"}, {"id": "CKV_AWS_189", "name": "Ensure EBS Volume is encrypted by KMS using a customer managed Key (CMK)", "shortDescription": {"text": "Ensure EBS Volume is encrypted by KMS using a customer managed Key (CMK)"}, "fullDescription": {"text": "Ensure EBS Volume is encrypted by KMS using a customer managed Key (CMK)"}, "help": {"text": "Ensure EBS Volume is encrypted by KMS using a customer managed Key (CMK)\nResource: aws_ebs_volume.web_host_storage"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_general_109"}, {"id": "CKV_AWS_3", "name": "Ensure all data stored in the EBS is securely encrypted", "shortDescription": {"text": "Ensure all data stored in the EBS is securely encrypted"}, "fullDescription": {"text": "Ensure all data stored in the EBS is securely encrypted"}, "help": {"text": "Ensure all data stored in the EBS is securely encrypted\nResource: aws_ebs_volume.web_host_storage"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/general_3-encrypt-ebs-volume"}, {"id": "CKV_AWS_260", "name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80", "shortDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "fullDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "help": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80\nResource: aws_security_group.web-node"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-aws-security-groups-do-not-allow-ingress-from-00000-to-port-80"}, {"id": "CKV_AWS_24", "name": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22", "shortDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "fullDescription": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "help": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22\nResource: aws_security_group.web-node"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/networking_1-port-security"}, {"id": "CKV_AWS_130", "name": "Ensure VPC subnets do not assign public IP by default", "shortDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "fullDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "help": {"text": "Ensure VPC subnets do not assign public IP by default\nResource: aws_subnet.web_subnet"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-vpc-subnets-do-not-assign-public-ip-by-default"}, {"id": "CKV_AWS_163", "name": "Ensure ECR image scanning on push is enabled", "shortDescription": {"text": "Ensure ECR image scanning on push is enabled"}, "fullDescription": {"text": "Ensure ECR image scanning on push is enabled"}, "help": {"text": "Ensure ECR image scanning on push is enabled\nResource: aws_ecr_repository.repository"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/general_8"}, {"id": "CKV_AWS_136", "name": "Ensure that ECR repositories are encrypted using KMS", "shortDescription": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "fullDescription": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "help": {"text": "Ensure that ECR repositories are encrypted using KMS\nResource: aws_ecr_repository.repository"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-ecr-repositories-are-encrypted"}, {"id": "CKV_AWS_51", "name": "Ensure ECR Image Tags are immutable", "shortDescription": {"text": "Ensure ECR Image Tags are immutable"}, "fullDescription": {"text": "Ensure ECR Image Tags are immutable"}, "help": {"text": "Ensure ECR Image Tags are immutable\nResource: aws_ecr_repository.repository"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_general_24"}, {"id": "CKV_AWS_39", "name": "Ensure Amazon EKS public endpoint disabled", "shortDescription": {"text": "Ensure Amazon EKS public endpoint disabled"}, "fullDescription": {"text": "Ensure Amazon EKS public endpoint disabled"}, "help": {"text": "Ensure Amazon EKS public endpoint disabled\nResource: aws_eks_cluster.eks_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_kubernetes_2"}, {"id": "CKV_AWS_58", "name": "Ensure EKS Cluster has Secrets Encryption Enabled", "shortDescription": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "fullDescription": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "help": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled\nResource: aws_eks_cluster.eks_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_kubernetes_3"}, {"id": "CKV_AWS_38", "name": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0", "shortDescription": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"}, "fullDescription": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"}, "help": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0\nResource: aws_eks_cluster.eks_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_kubernetes_1"}, {"id": "CKV_AWS_37", "name": "Ensure Amazon EKS control plane logging enabled for all log types", "shortDescription": {"text": "Ensure Amazon EKS control plane logging enabled for all log types"}, "fullDescription": {"text": "Ensure Amazon EKS control plane logging enabled for all log types"}, "help": {"text": "Ensure Amazon EKS control plane logging enabled for all log types\nResource: aws_eks_cluster.eks_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_kubernetes_4"}, {"id": "CKV_AWS_127", "name": "Ensure that Elastic Load Balancer(s) uses SSL certificates provided by AWS Certificate Manager", "shortDescription": {"text": "Ensure that Elastic Load Balancer(s) uses SSL certificates provided by AWS Certificate Manager"}, "fullDescription": {"text": "Ensure that Elastic Load Balancer(s) uses SSL certificates provided by AWS Certificate Manager"}, "help": {"text": "Ensure that Elastic Load Balancer(s) uses SSL certificates provided by AWS Certificate Manager\nResource: aws_elb.weblb"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-elastic-load-balancers-uses-ssl-certificates-provided-by-aws-certificate-manager"}, {"id": "CKV_AWS_92", "name": "Ensure the ELB has access logging enabled", "shortDescription": {"text": "Ensure the ELB has access logging enabled"}, "fullDescription": {"text": "Ensure the ELB has access logging enabled"}, "help": {"text": "Ensure the ELB has access logging enabled\nResource: aws_elb.weblb"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_logging_23"}, {"id": "CKV_AWS_137", "name": "Ensure that Elasticsearch is configured inside a VPC", "shortDescription": {"text": "Ensure that Elasticsearch is configured inside a VPC"}, "fullDescription": {"text": "Ensure that Elasticsearch is configured inside a VPC"}, "help": {"text": "Ensure that Elasticsearch is configured inside a VPC\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-elasticsearch-is-configured-inside-a-vpc"}, {"id": "CKV_AWS_317", "name": "Ensure Elasticsearch Domain Audit Logging is enabled", "shortDescription": {"text": "Ensure Elasticsearch Domain Audit Logging is enabled"}, "fullDescription": {"text": "Ensure Elasticsearch Domain Audit Logging is enabled"}, "help": {"text": "Ensure Elasticsearch Domain Audit Logging is enabled\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_228", "name": "Verify Elasticsearch domain is using an up to date TLS policy", "shortDescription": {"text": "Verify Elasticsearch domain is using an up to date TLS policy"}, "fullDescription": {"text": "Verify Elasticsearch domain is using an up to date TLS policy"}, "help": {"text": "Verify Elasticsearch domain is using an up to date TLS policy\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-aws-elasticsearch-domain-uses-an-updated-tls-policy"}, {"id": "CKV_AWS_5", "name": "Ensure all data stored in the Elasticsearch is securely encrypted at rest", "shortDescription": {"text": "Ensure all data stored in the Elasticsearch is securely encrypted at rest"}, "fullDescription": {"text": "Ensure all data stored in the Elasticsearch is securely encrypted at rest"}, "help": {"text": "Ensure all data stored in the Elasticsearch is securely encrypted at rest\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/elasticsearch_3-enable-encryptionatrest"}, {"id": "CKV_AWS_247", "name": "Ensure all data stored in the Elasticsearch is encrypted with a CMK", "shortDescription": {"text": "Ensure all data stored in the Elasticsearch is encrypted with a CMK"}, "fullDescription": {"text": "Ensure all data stored in the Elasticsearch is encrypted with a CMK"}, "help": {"text": "Ensure all data stored in the Elasticsearch is encrypted with a CMK\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-aws-all-data-stored-in-the-elasticsearch-domain-is-encrypted-using-a-customer-managed-key-cmk"}, {"id": "CKV_AWS_248", "name": "Ensure that Elasticsearch is not using the default Security Group", "shortDescription": {"text": "Ensure that Elasticsearch is not using the default Security Group"}, "fullDescription": {"text": "Ensure that Elasticsearch is not using the default Security Group"}, "help": {"text": "Ensure that Elasticsearch is not using the default Security Group\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-aws-elasticsearch-does-not-use-the-default-security-group"}, {"id": "CKV_AWS_84", "name": "Ensure Elasticsearch Domain Logging is enabled", "shortDescription": {"text": "Ensure Elasticsearch Domain Logging is enabled"}, "fullDescription": {"text": "Ensure Elasticsearch Domain Logging is enabled"}, "help": {"text": "Ensure Elasticsearch Domain Logging is enabled\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/elasticsearch_7"}, {"id": "CKV_AWS_318", "name": "Ensure Elasticsearch domains are configured with at least three dedicated master nodes for HA", "shortDescription": {"text": "Ensure Elasticsearch domains are configured with at least three dedicated master nodes for HA"}, "fullDescription": {"text": "Ensure Elasticsearch domains are configured with at least three dedicated master nodes for HA"}, "help": {"text": "Ensure Elasticsearch domains are configured with at least three dedicated master nodes for HA\nResource: aws_elasticsearch_domain.monitoring-framework"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_111", "name": "Ensure IAM policies does not allow write access without constraints", "shortDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "fullDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "help": {"text": "Ensure IAM policies does not allow write access without constraints\nResource: aws_iam_policy_document.policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-iam-policies-do-not-allow-write-access-without-constraint"}, {"id": "CKV_AWS_109", "name": "Ensure IAM policies does not allow permissions management / resource exposure without constraints", "shortDescription": {"text": "Ensure IAM policies does not allow permissions management / resource exposure without constraints"}, "fullDescription": {"text": "Ensure IAM policies does not allow permissions management / resource exposure without constraints"}, "help": {"text": "Ensure IAM policies does not allow permissions management / resource exposure without constraints\nResource: aws_iam_policy_document.policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-iam-policies-do-not-allow-permissions-management-resource-exposure-without-constraint"}, {"id": "CKV_AWS_283", "name": "Ensure no IAM policies documents allow ALL or any AWS principal permissions to the resource", "shortDescription": {"text": "Ensure no IAM policies documents allow ALL or any AWS principal permissions to the resource"}, "fullDescription": {"text": "Ensure no IAM policies documents allow ALL or any AWS principal permissions to the resource"}, "help": {"text": "Ensure no IAM policies documents allow ALL or any AWS principal permissions to the resource\nResource: aws_iam_policy_document.policy"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_273", "name": "Ensure access is controlled through SSO and not AWS IAM defined users", "shortDescription": {"text": "Ensure access is controlled through SSO and not AWS IAM defined users"}, "fullDescription": {"text": "Ensure access is controlled through SSO and not AWS IAM defined users"}, "help": {"text": "Ensure access is controlled through SSO and not AWS IAM defined users\nResource: aws_iam_user.user"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_7", "name": "Ensure rotation for customer created CMKs is enabled", "shortDescription": {"text": "Ensure rotation for customer created CMKs is enabled"}, "fullDescription": {"text": "Ensure rotation for customer created CMKs is enabled"}, "help": {"text": "Ensure rotation for customer created CMKs is enabled\nResource: aws_kms_key.logs_key"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/logging_8"}, {"id": "CKV_AWS_50", "name": "X-ray tracing is enabled for Lambda", "shortDescription": {"text": "X-ray tracing is enabled for Lambda"}, "fullDescription": {"text": "X-ray tracing is enabled for Lambda"}, "help": {"text": "X-ray tracing is enabled for Lambda\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_serverless_4"}, {"id": "CKV_AWS_117", "name": "Ensure that AWS Lambda function is configured inside a VPC", "shortDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "help": {"text": "Ensure that AWS Lambda function is configured inside a VPC\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1"}, {"id": "CKV_AWS_116", "name": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "help": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq"}, {"id": "CKV_AWS_173", "name": "Check encryption settings for Lambda environmental variable", "shortDescription": {"text": "Check encryption settings for Lambda environmental variable"}, "fullDescription": {"text": "Check encryption settings for Lambda environmental variable"}, "help": {"text": "Check encryption settings for Lambda environmental variable\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_serverless_5"}, {"id": "CKV_AWS_272", "name": "Ensure AWS Lambda function is configured to validate code-signing", "shortDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "fullDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "help": {"text": "Ensure AWS Lambda function is configured to validate code-signing\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_45", "name": "Ensure no hard-coded secrets exist in lambda environment", "shortDescription": {"text": "Ensure no hard-coded secrets exist in lambda environment"}, "fullDescription": {"text": "Ensure no hard-coded secrets exist in lambda environment"}, "help": {"text": "Ensure no hard-coded secrets exist in lambda environment\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_secrets_3"}, {"id": "CKV_AWS_115", "name": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "help": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit\nResource: aws_lambda_function.analysis_lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit"}, {"id": "CKV_AWS_101", "name": "Ensure Neptune logging is enabled", "shortDescription": {"text": "Ensure Neptune logging is enabled"}, "fullDescription": {"text": "Ensure Neptune logging is enabled"}, "help": {"text": "Ensure Neptune logging is enabled\nResource: aws_neptune_cluster.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_logging_24"}, {"id": "CKV_AWS_347", "name": "Ensure Neptune is encrypted by KMS using a customer managed Key (CMK)", "shortDescription": {"text": "Ensure Neptune is encrypted by KMS using a customer managed Key (CMK)"}, "fullDescription": {"text": "Ensure Neptune is encrypted by KMS using a customer managed Key (CMK)"}, "help": {"text": "Ensure Neptune is encrypted by KMS using a customer managed Key (CMK)\nResource: aws_neptune_cluster.default"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_44", "name": "Ensure Neptune storage is securely encrypted", "shortDescription": {"text": "Ensure Neptune storage is securely encrypted"}, "fullDescription": {"text": "Ensure Neptune storage is securely encrypted"}, "help": {"text": "Ensure Neptune storage is securely encrypted\nResource: aws_neptune_cluster.default"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/general_18"}, {"id": "CKV_AWS_279", "name": "Ensure Neptune snapshot is securely encrypted", "shortDescription": {"text": "Ensure Neptune snapshot is securely encrypted"}, "fullDescription": {"text": "Ensure Neptune snapshot is securely encrypted"}, "help": {"text": "Ensure Neptune snapshot is securely encrypted\nResource: aws_neptune_cluster_snapshot.default"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_280", "name": "Ensure Neptune snapshot is encrypted by KMS using a customer managed Key (CMK)", "shortDescription": {"text": "Ensure Neptune snapshot is encrypted by KMS using a customer managed Key (CMK)"}, "fullDescription": {"text": "Ensure Neptune snapshot is encrypted by KMS using a customer managed Key (CMK)"}, "help": {"text": "Ensure Neptune snapshot is encrypted by KMS using a customer managed Key (CMK)\nResource: aws_neptune_cluster_snapshot.default"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_313", "name": "Ensure RDS cluster configured to copy tags to snapshots", "shortDescription": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "fullDescription": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "help": {"text": "Ensure RDS cluster configured to copy tags to snapshots\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_96", "name": "Ensure all data stored in Aurora is securely encrypted at rest", "shortDescription": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "fullDescription": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "help": {"text": "Ensure all data stored in Aurora is securely encrypted at rest\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_general_38"}, {"id": "CKV_AWS_162", "name": "Ensure RDS cluster has IAM authentication enabled", "shortDescription": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "fullDescription": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "help": {"text": "Ensure RDS cluster has IAM authentication enabled\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-rds-cluster-has-iam-authentication-enabled"}, {"id": "CKV_AWS_326", "name": "Ensure that RDS Aurora Clusters have backtracking enabled", "shortDescription": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "fullDescription": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "help": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_327", "name": "Ensure RDS Clusters are encrypted using KMS CMKs", "shortDescription": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "fullDescription": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "help": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_325", "name": "Ensure that RDS Cluster audit logging is enabled for MySQL engine", "shortDescription": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "fullDescription": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "help": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_139", "name": "Ensure that RDS clusters have deletion protection enabled", "shortDescription": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "fullDescription": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "help": {"text": "Ensure that RDS clusters have deletion protection enabled\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-rds-clusters-and-instances-have-deletion-protection-enabled"}, {"id": "CKV_AWS_324", "name": "Ensure that RDS Cluster log capture is enabled", "shortDescription": {"text": "Ensure that RDS Cluster log capture is enabled"}, "fullDescription": {"text": "Ensure that RDS Cluster log capture is enabled"}, "help": {"text": "Ensure that RDS Cluster log capture is enabled\nResource: aws_rds_cluster.app1-rds-cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_170", "name": "Ensure that AKS use the Paid Sku for its SLA", "shortDescription": {"text": "Ensure that AKS use the Paid Sku for its SLA"}, "fullDescription": {"text": "Ensure that AKS use the Paid Sku for its SLA"}, "help": {"text": "Ensure that AKS use the Paid Sku for its SLA\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_172", "name": "Ensure autorotation of Secrets Store CSI Driver secrets for AKS clusters", "shortDescription": {"text": "Ensure autorotation of Secrets Store CSI Driver secrets for AKS clusters"}, "fullDescription": {"text": "Ensure autorotation of Secrets Store CSI Driver secrets for AKS clusters"}, "help": {"text": "Ensure autorotation of Secrets Store CSI Driver secrets for AKS clusters\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_8", "name": "Ensure Kubernetes Dashboard is disabled", "shortDescription": {"text": "Ensure Kubernetes Dashboard is disabled"}, "fullDescription": {"text": "Ensure Kubernetes Dashboard is disabled"}, "help": {"text": "Ensure Kubernetes Dashboard is disabled\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_kubernetes_5"}, {"id": "CKV_AZURE_141", "name": "Ensure AKS local admin account is disabled", "shortDescription": {"text": "Ensure AKS local admin account is disabled"}, "fullDescription": {"text": "Ensure AKS local admin account is disabled"}, "help": {"text": "Ensure AKS local admin account is disabled\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-azure-kubernetes-service-aks-local-admin-account-is-disabled"}, {"id": "CKV_AZURE_115", "name": "Ensure that AKS enables private clusters", "shortDescription": {"text": "Ensure that AKS enables private clusters"}, "fullDescription": {"text": "Ensure that AKS enables private clusters"}, "help": {"text": "Ensure that AKS enables private clusters\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-aks-enables-private-clusters"}, {"id": "CKV_AZURE_117", "name": "Ensure that AKS uses disk encryption set", "shortDescription": {"text": "Ensure that AKS uses disk encryption set"}, "fullDescription": {"text": "Ensure that AKS uses disk encryption set"}, "help": {"text": "Ensure that AKS uses disk encryption set\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-aks-uses-disk-encryption-set"}, {"id": "CKV_AZURE_7", "name": "Ensure AKS cluster has Network Policy configured", "shortDescription": {"text": "Ensure AKS cluster has Network Policy configured"}, "fullDescription": {"text": "Ensure AKS cluster has Network Policy configured"}, "help": {"text": "Ensure AKS cluster has Network Policy configured\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_kubernetes_4"}, {"id": "CKV_AZURE_116", "name": "Ensure that AKS uses Azure Policies Add-on", "shortDescription": {"text": "Ensure that AKS uses Azure Policies Add-on"}, "fullDescription": {"text": "Ensure that AKS uses Azure Policies Add-on"}, "help": {"text": "Ensure that AKS uses Azure Policies Add-on\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-aks-uses-azure-policies-add-on"}, {"id": "CKV_AZURE_6", "name": "Ensure AKS has an API Server Authorized IP Ranges enabled", "shortDescription": {"text": "Ensure AKS has an API Server Authorized IP Ranges enabled"}, "fullDescription": {"text": "Ensure AKS has an API Server Authorized IP Ranges enabled"}, "help": {"text": "Ensure AKS has an API Server Authorized IP Ranges enabled\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_kubernetes_3"}, {"id": "CKV_AZURE_171", "name": "Ensure AKS cluster upgrade channel is chosen", "shortDescription": {"text": "Ensure AKS cluster upgrade channel is chosen"}, "fullDescription": {"text": "Ensure AKS cluster upgrade channel is chosen"}, "help": {"text": "Ensure AKS cluster upgrade channel is chosen\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_168", "name": "Ensure Azure Kubernetes Cluster (AKS) nodes should use a minimum number of 50 pods.", "shortDescription": {"text": "Ensure Azure Kubernetes Cluster (AKS) nodes should use a minimum number of 50 pods."}, "fullDescription": {"text": "Ensure Azure Kubernetes Cluster (AKS) nodes should use a minimum number of 50 pods."}, "help": {"text": "Ensure Azure Kubernetes Cluster (AKS) nodes should use a minimum number of 50 pods.\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_4", "name": "Ensure AKS logging to Azure Monitoring is Configured", "shortDescription": {"text": "Ensure AKS logging to Azure Monitoring is Configured"}, "fullDescription": {"text": "Ensure AKS logging to Azure Monitoring is Configured"}, "help": {"text": "Ensure AKS logging to Azure Monitoring is Configured\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_kubernetes_1"}, {"id": "CKV_AZURE_5", "name": "Ensure RBAC is enabled on AKS clusters", "shortDescription": {"text": "Ensure RBAC is enabled on AKS clusters"}, "fullDescription": {"text": "Ensure RBAC is enabled on AKS clusters"}, "help": {"text": "Ensure RBAC is enabled on AKS clusters\nResource: azurerm_kubernetes_cluster.k8s_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_kubernetes_2"}, {"id": "CKV_AZURE_71", "name": "Ensure that Managed identity provider is enabled for app services", "shortDescription": {"text": "Ensure that Managed identity provider is enabled for app services"}, "fullDescription": {"text": "Ensure that Managed identity provider is enabled for app services"}, "help": {"text": "Ensure that Managed identity provider is enabled for app services\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-managed-identity-provider-is-enabled-for-app-services"}, {"id": "CKV_AZURE_63", "name": "Ensure that App service enables HTTP logging", "shortDescription": {"text": "Ensure that App service enables HTTP logging"}, "fullDescription": {"text": "Ensure that App service enables HTTP logging"}, "help": {"text": "Ensure that App service enables HTTP logging\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-app-service-enables-http-logging"}, {"id": "CKV_AZURE_213", "name": "Ensure that App Service configures health check", "shortDescription": {"text": "Ensure that App Service configures health check"}, "fullDescription": {"text": "Ensure that App Service configures health check"}, "help": {"text": "Ensure that App Service configures health check\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_65", "name": "Ensure that App service enables detailed error messages", "shortDescription": {"text": "Ensure that App service enables detailed error messages"}, "fullDescription": {"text": "Ensure that App service enables detailed error messages"}, "help": {"text": "Ensure that App service enables detailed error messages\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/tbdensure-that-app-service-enables-detailed-error-messages"}, {"id": "CKV_AZURE_15", "name": "Ensure web app is using the latest version of TLS encryption", "shortDescription": {"text": "Ensure web app is using the latest version of TLS encryption"}, "fullDescription": {"text": "Ensure web app is using the latest version of TLS encryption"}, "help": {"text": "Ensure web app is using the latest version of TLS encryption\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_6"}, {"id": "CKV_AZURE_17", "name": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set", "shortDescription": {"text": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"}, "fullDescription": {"text": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"}, "help": {"text": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_7"}, {"id": "CKV_AZURE_14", "name": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service", "shortDescription": {"text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"}, "fullDescription": {"text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"}, "help": {"text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_5"}, {"id": "CKV_AZURE_88", "name": "Ensure that app services use Azure Files", "shortDescription": {"text": "Ensure that app services use Azure Files"}, "fullDescription": {"text": "Ensure that app services use Azure Files"}, "help": {"text": "Ensure that app services use Azure Files\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-app-services-use-azure-files"}, {"id": "CKV_AZURE_16", "name": "Ensure that Register with Azure Active Directory is enabled on App Service", "shortDescription": {"text": "Ensure that Register with Azure Active Directory is enabled on App Service"}, "fullDescription": {"text": "Ensure that Register with Azure Active Directory is enabled on App Service"}, "help": {"text": "Ensure that Register with Azure Active Directory is enabled on App Service\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_iam_1"}, {"id": "CKV_AZURE_78", "name": "Ensure FTP deployments are disabled", "shortDescription": {"text": "Ensure FTP deployments are disabled"}, "fullDescription": {"text": "Ensure FTP deployments are disabled"}, "help": {"text": "Ensure FTP deployments are disabled\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-ftp-deployments-are-disabled"}, {"id": "CKV_AZURE_18", "name": "Ensure that 'HTTP Version' is the latest if used to run the web app", "shortDescription": {"text": "Ensure that 'HTTP Version' is the latest if used to run the web app"}, "fullDescription": {"text": "Ensure that 'HTTP Version' is the latest if used to run the web app"}, "help": {"text": "Ensure that 'HTTP Version' is the latest if used to run the web app\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_8"}, {"id": "CKV_AZURE_66", "name": "Ensure that App service enables failed request tracing", "shortDescription": {"text": "Ensure that App service enables failed request tracing"}, "fullDescription": {"text": "Ensure that App service enables failed request tracing"}, "help": {"text": "Ensure that App service enables failed request tracing\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-app-service-enables-failed-request-tracing"}, {"id": "CKV_AZURE_13", "name": "Ensure App Service Authentication is set on Azure App Service", "shortDescription": {"text": "Ensure App Service Authentication is set on Azure App Service"}, "fullDescription": {"text": "Ensure App Service Authentication is set on Azure App Service"}, "help": {"text": "Ensure App Service Authentication is set on Azure App Service\nResource: azurerm_app_service.app-service1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_2"}, {"id": "CKV_AZURE_178", "name": "Ensure linux VM enables SSH with keys for secure communication", "shortDescription": {"text": "Ensure linux VM enables SSH with keys for secure communication"}, "fullDescription": {"text": "Ensure linux VM enables SSH with keys for secure communication"}, "help": {"text": "Ensure linux VM enables SSH with keys for secure communication\nResource: azurerm_linux_virtual_machine.linux_machine"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_50", "name": "Ensure Virtual Machine Extensions are not Installed", "shortDescription": {"text": "Ensure Virtual Machine Extensions are not Installed"}, "fullDescription": {"text": "Ensure Virtual Machine Extensions are not Installed"}, "help": {"text": "Ensure Virtual Machine Extensions are not Installed\nResource: azurerm_linux_virtual_machine.linux_machine"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_14"}, {"id": "CKV_AZURE_149", "name": "Ensure that Virtual machine does not enable password authentication", "shortDescription": {"text": "Ensure that Virtual machine does not enable password authentication"}, "fullDescription": {"text": "Ensure that Virtual machine does not enable password authentication"}, "help": {"text": "Ensure that Virtual machine does not enable password authentication\nResource: azurerm_linux_virtual_machine.linux_machine"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-azure-virtual-machine-does-not-enable-password-authentication"}, {"id": "CKV_AZURE_1", "name": "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)", "shortDescription": {"text": "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"}, "fullDescription": {"text": "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"}, "help": {"text": "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)\nResource: azurerm_linux_virtual_machine.linux_machine"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_1"}, {"id": "CKV_AZURE_151", "name": "Ensure Windows VM enables encryption", "shortDescription": {"text": "Ensure Windows VM enables encryption"}, "fullDescription": {"text": "Ensure Windows VM enables encryption"}, "help": {"text": "Ensure Windows VM enables encryption\nResource: azurerm_windows_virtual_machine.windows_machine"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-azure-windows-vm-enables-encryption"}, {"id": "CKV_AZURE_42", "name": "Ensure the key vault is recoverable", "shortDescription": {"text": "Ensure the key vault is recoverable"}, "fullDescription": {"text": "Ensure the key vault is recoverable"}, "help": {"text": "Ensure the key vault is recoverable\nResource: azurerm_key_vault.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable"}, {"id": "CKV_AZURE_189", "name": "Ensure that Azure Key Vault disables public network access", "shortDescription": {"text": "Ensure that Azure Key Vault disables public network access"}, "fullDescription": {"text": "Ensure that Azure Key Vault disables public network access"}, "help": {"text": "Ensure that Azure Key Vault disables public network access\nResource: azurerm_key_vault.example"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_110", "name": "Ensure that key vault enables purge protection", "shortDescription": {"text": "Ensure that key vault enables purge protection"}, "fullDescription": {"text": "Ensure that key vault enables purge protection"}, "help": {"text": "Ensure that key vault enables purge protection\nResource: azurerm_key_vault.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-key-vault-enables-purge-protection"}, {"id": "CKV_AZURE_109", "name": "Ensure that key vault allows firewall rules settings", "shortDescription": {"text": "Ensure that key vault allows firewall rules settings"}, "fullDescription": {"text": "Ensure that key vault allows firewall rules settings"}, "help": {"text": "Ensure that key vault allows firewall rules settings\nResource: azurerm_key_vault.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-key-vault-allows-firewall-rules-settings"}, {"id": "CKV_AZURE_40", "name": "Ensure that the expiration date is set on all keys", "shortDescription": {"text": "Ensure that the expiration date is set on all keys"}, "fullDescription": {"text": "Ensure that the expiration date is set on all keys"}, "help": {"text": "Ensure that the expiration date is set on all keys\nResource: azurerm_key_vault_key.generated"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/set-an-expiration-date-on-all-keys"}, {"id": "CKV_AZURE_112", "name": "Ensure that key vault key is backed by HSM", "shortDescription": {"text": "Ensure that key vault key is backed by HSM"}, "fullDescription": {"text": "Ensure that key vault key is backed by HSM"}, "help": {"text": "Ensure that key vault key is backed by HSM\nResource: azurerm_key_vault_key.generated"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-key-vault-key-is-backed-by-hsm"}, {"id": "CKV_AZURE_41", "name": "Ensure that the expiration date is set on all secrets", "shortDescription": {"text": "Ensure that the expiration date is set on all secrets"}, "fullDescription": {"text": "Ensure that the expiration date is set on all secrets"}, "help": {"text": "Ensure that the expiration date is set on all secrets\nResource: azurerm_key_vault_secret.secret"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/set-an-expiration-date-on-all-secrets"}, {"id": "CKV_AZURE_114", "name": "Ensure that key vault secrets have \"content_type\" set", "shortDescription": {"text": "Ensure that key vault secrets have \"content_type\" set"}, "fullDescription": {"text": "Ensure that key vault secrets have \"content_type\" set"}, "help": {"text": "Ensure that key vault secrets have \"content_type\" set\nResource: azurerm_key_vault_secret.secret"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-key-vault-secrets-have-content_type-set"}, {"id": "CKV_AZURE_38", "name": "Ensure audit profile captures all the activities", "shortDescription": {"text": "Ensure audit profile captures all the activities"}, "fullDescription": {"text": "Ensure audit profile captures all the activities"}, "help": {"text": "Ensure audit profile captures all the activities\nResource: azurerm_monitor_log_profile.logging_profile"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-audit-profile-captures-all-activities"}, {"id": "CKV_AZURE_37", "name": "Ensure that Activity Log Retention is set 365 days or greater", "shortDescription": {"text": "Ensure that Activity Log Retention is set 365 days or greater"}, "fullDescription": {"text": "Ensure that Activity Log Retention is set 365 days or greater"}, "help": {"text": "Ensure that Activity Log Retention is set 365 days or greater\nResource: azurerm_monitor_log_profile.logging_profile"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/set-activity-log-retention-to-365-days-or-greater"}, {"id": "CKV_AZURE_33", "name": "Ensure Storage logging is enabled for Queue service for read, write and delete requests", "shortDescription": {"text": "Ensure Storage logging is enabled for Queue service for read, write and delete requests"}, "fullDescription": {"text": "Ensure Storage logging is enabled for Queue service for read, write and delete requests"}, "help": {"text": "Ensure Storage logging is enabled for Queue service for read, write and delete requests\nResource: azurerm_storage_account.security_storage_account"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/enable-requests-on-storage-logging-for-queue-service"}, {"id": "CKV_AZURE_59", "name": "Ensure that Storage accounts disallow public access", "shortDescription": {"text": "Ensure that Storage accounts disallow public access"}, "fullDescription": {"text": "Ensure that Storage accounts disallow public access"}, "help": {"text": "Ensure that Storage accounts disallow public access\nResource: azurerm_storage_account.security_storage_account"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-storage-accounts-disallow-public-access"}, {"id": "CKV_AZURE_44", "name": "Ensure Storage Account is using the latest version of TLS encryption", "shortDescription": {"text": "Ensure Storage Account is using the latest version of TLS encryption"}, "fullDescription": {"text": "Ensure Storage Account is using the latest version of TLS encryption"}, "help": {"text": "Ensure Storage Account is using the latest version of TLS encryption\nResource: azurerm_storage_account.security_storage_account"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_storage_2"}, {"id": "CKV_AZURE_206", "name": "Ensure that Storage Accounts use replication", "shortDescription": {"text": "Ensure that Storage Accounts use replication"}, "fullDescription": {"text": "Ensure that Storage Accounts use replication"}, "help": {"text": "Ensure that Storage Accounts use replication\nResource: azurerm_storage_account.security_storage_account"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_190", "name": "Ensure that Storage blobs restrict public access", "shortDescription": {"text": "Ensure that Storage blobs restrict public access"}, "fullDescription": {"text": "Ensure that Storage blobs restrict public access"}, "help": {"text": "Ensure that Storage blobs restrict public access\nResource: azurerm_storage_account.security_storage_account"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_113", "name": "Ensure that SQL server disables public network access", "shortDescription": {"text": "Ensure that SQL server disables public network access"}, "fullDescription": {"text": "Ensure that SQL server disables public network access"}, "help": {"text": "Ensure that SQL server disables public network access\nResource: azurerm_mssql_server.mssql1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-sql-server-disables-public-network-access"}, {"id": "CKV_AZURE_52", "name": "Ensure MSSQL is using the latest version of TLS encryption", "shortDescription": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "fullDescription": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "help": {"text": "Ensure MSSQL is using the latest version of TLS encryption\nResource: azurerm_mssql_server.mssql1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-mssql-is-using-the-latest-version-of-tls-encryption"}, {"id": "CKV_AZURE_25", "name": "Ensure that 'Threat Detection types' is set to 'All'", "shortDescription": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "fullDescription": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "help": {"text": "Ensure that 'Threat Detection types' is set to 'All'\nResource: azurerm_mssql_server_security_alert_policy.alertpolicy1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_6"}, {"id": "CKV_AZURE_27", "name": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers", "shortDescription": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "fullDescription": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "help": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers\nResource: azurerm_mssql_server_security_alert_policy.alertpolicy1"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_8"}, {"id": "CKV_AZURE_26", "name": "Ensure that 'Send Alerts To' is enabled for MSSQL servers", "shortDescription": {"text": "Ensure that 'Send Alerts To' is enabled for MSSQL servers"}, "fullDescription": {"text": "Ensure that 'Send Alerts To' is enabled for MSSQL servers"}, "help": {"text": "Ensure that 'Send Alerts To' is enabled for MSSQL servers\nResource: azurerm_mssql_server_security_alert_policy.alertpolicy5"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_7"}, {"id": "CKV_AZURE_10", "name": "Ensure that SSH access is restricted from the internet", "shortDescription": {"text": "Ensure that SSH access is restricted from the internet"}, "fullDescription": {"text": "Ensure that SSH access is restricted from the internet"}, "help": {"text": "Ensure that SSH access is restricted from the internet\nResource: azurerm_network_security_group.bad_sg"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_3"}, {"id": "CKV_AZURE_9", "name": "Ensure that RDP access is restricted from the internet", "shortDescription": {"text": "Ensure that RDP access is restricted from the internet"}, "fullDescription": {"text": "Ensure that RDP access is restricted from the internet"}, "help": {"text": "Ensure that RDP access is restricted from the internet\nResource: azurerm_network_security_group.bad_sg"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_2"}, {"id": "CKV_AZURE_12", "name": "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'", "shortDescription": {"text": "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"}, "fullDescription": {"text": "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"}, "help": {"text": "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'\nResource: azurerm_network_watcher_flow_log.flow_log"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_logging_1"}, {"id": "CKV_AZURE_39", "name": "Ensure that no custom subscription owner roles are created", "shortDescription": {"text": "Ensure that no custom subscription owner roles are created"}, "fullDescription": {"text": "Ensure that no custom subscription owner roles are created"}, "help": {"text": "Ensure that no custom subscription owner roles are created\nResource: azurerm_role_definition.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/do-not-create-custom-subscription-owner-roles"}, {"id": "CKV_AZURE_19", "name": "Ensure that standard pricing tier is selected", "shortDescription": {"text": "Ensure that standard pricing tier is selected"}, "fullDescription": {"text": "Ensure that standard pricing tier is selected"}, "help": {"text": "Ensure that standard pricing tier is selected\nResource: azurerm_security_center_subscription_pricing.pricing"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-standard-pricing-tier-is-selected"}, {"id": "CKV_AZURE_20", "name": "Ensure that security contact 'Phone number' is set", "shortDescription": {"text": "Ensure that security contact 'Phone number' is set"}, "fullDescription": {"text": "Ensure that security contact 'Phone number' is set"}, "help": {"text": "Ensure that security contact 'Phone number' is set\nResource: azurerm_security_center_contact.contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_3"}, {"id": "CKV_AZURE_22", "name": "Ensure that 'Send email notification for high severity alerts' is set to 'On'", "shortDescription": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'"}, "fullDescription": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'"}, "help": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'\nResource: azurerm_security_center_contact.contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_5"}, {"id": "CKV_AZURE_21", "name": "Ensure that 'Send email notification for high severity alerts' is set to 'On'", "shortDescription": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'"}, "fullDescription": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'"}, "help": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'\nResource: azurerm_security_center_contact.contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_4"}, {"id": "CKV_AZURE_54", "name": "Ensure MySQL is using the latest version of TLS encryption", "shortDescription": {"text": "Ensure MySQL is using the latest version of TLS encryption"}, "fullDescription": {"text": "Ensure MySQL is using the latest version of TLS encryption"}, "help": {"text": "Ensure MySQL is using the latest version of TLS encryption\nResource: azurerm_mysql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-mysql-is-using-the-latest-version-of-tls-encryption"}, {"id": "CKV_AZURE_127", "name": "Ensure that My SQL server enables Threat detection policy", "shortDescription": {"text": "Ensure that My SQL server enables Threat detection policy"}, "fullDescription": {"text": "Ensure that My SQL server enables Threat detection policy"}, "help": {"text": "Ensure that My SQL server enables Threat detection policy\nResource: azurerm_mysql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-my-sql-server-enables-threat-detection-policy"}, {"id": "CKV_AZURE_28", "name": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server", "shortDescription": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"}, "fullDescription": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"}, "help": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server\nResource: azurerm_mysql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_9"}, {"id": "CKV_AZURE_94", "name": "Ensure that My SQL server enables geo-redundant backups", "shortDescription": {"text": "Ensure that My SQL server enables geo-redundant backups"}, "fullDescription": {"text": "Ensure that My SQL server enables geo-redundant backups"}, "help": {"text": "Ensure that My SQL server enables geo-redundant backups\nResource: azurerm_mysql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-my-sql-server-enables-geo-redundant-backups"}, {"id": "CKV_AZURE_53", "name": "Ensure 'public network access enabled' is set to 'False' for mySQL servers", "shortDescription": {"text": "Ensure 'public network access enabled' is set to 'False' for mySQL servers"}, "fullDescription": {"text": "Ensure 'public network access enabled' is set to 'False' for mySQL servers"}, "help": {"text": "Ensure 'public network access enabled' is set to 'False' for mySQL servers\nResource: azurerm_mysql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-public-network-access-enabled-is-set-to-false-for-mysql-servers"}, {"id": "CKV_AZURE_68", "name": "Ensure that PostgreSQL server disables public network access", "shortDescription": {"text": "Ensure that PostgreSQL server disables public network access"}, "fullDescription": {"text": "Ensure that PostgreSQL server disables public network access"}, "help": {"text": "Ensure that PostgreSQL server disables public network access\nResource: azurerm_postgresql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-postgresql-server-disables-public-network-access"}, {"id": "CKV_AZURE_130", "name": "Ensure that PostgreSQL server enables infrastructure encryption", "shortDescription": {"text": "Ensure that PostgreSQL server enables infrastructure encryption"}, "fullDescription": {"text": "Ensure that PostgreSQL server enables infrastructure encryption"}, "help": {"text": "Ensure that PostgreSQL server enables infrastructure encryption\nResource: azurerm_postgresql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-postgresql-server-enables-infrastructure-encryption"}, {"id": "CKV_AZURE_128", "name": "Ensure that PostgreSQL server enables Threat detection policy", "shortDescription": {"text": "Ensure that PostgreSQL server enables Threat detection policy"}, "fullDescription": {"text": "Ensure that PostgreSQL server enables Threat detection policy"}, "help": {"text": "Ensure that PostgreSQL server enables Threat detection policy\nResource: azurerm_postgresql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-postgresql-server-enables-threat-detection-policy"}, {"id": "CKV_AZURE_147", "name": "Ensure PostgreSQL is using the latest version of TLS encryption", "shortDescription": {"text": "Ensure PostgreSQL is using the latest version of TLS encryption"}, "fullDescription": {"text": "Ensure PostgreSQL is using the latest version of TLS encryption"}, "help": {"text": "Ensure PostgreSQL is using the latest version of TLS encryption\nResource: azurerm_postgresql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-azure-postgresql-uses-the-latest-version-of-tls-encryption"}, {"id": "CKV_AZURE_29", "name": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server", "shortDescription": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"}, "fullDescription": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"}, "help": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server\nResource: azurerm_postgresql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_10"}, {"id": "CKV_AZURE_102", "name": "Ensure that PostgreSQL server enables geo-redundant backups", "shortDescription": {"text": "Ensure that PostgreSQL server enables geo-redundant backups"}, "fullDescription": {"text": "Ensure that PostgreSQL server enables geo-redundant backups"}, "help": {"text": "Ensure that PostgreSQL server enables geo-redundant backups\nResource: azurerm_postgresql_server.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-postgresql-server-enables-geo-redundant-backups"}, {"id": "CKV_AZURE_32", "name": "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server", "shortDescription": {"text": "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"}, "fullDescription": {"text": "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"}, "help": {"text": "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server\nResource: azurerm_postgresql_configuration.thrtottling_config"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_13"}, {"id": "CKV_AZURE_30", "name": "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server", "shortDescription": {"text": "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"}, "fullDescription": {"text": "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"}, "help": {"text": "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server\nResource: azurerm_postgresql_configuration.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_networking_11"}, {"id": "CKV_AZURE_93", "name": "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption", "shortDescription": {"text": "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"}, "fullDescription": {"text": "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"}, "help": {"text": "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption\nResource: azurerm_managed_disk.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-managed-disks-use-a-specific-set-of-disk-encryption-sets-for-the-customer-managed-key-encryption"}, {"id": "CKV_AZURE_2", "name": "Ensure Azure managed disk has encryption enabled", "shortDescription": {"text": "Ensure Azure managed disk has encryption enabled"}, "fullDescription": {"text": "Ensure Azure managed disk has encryption enabled"}, "help": {"text": "Ensure Azure managed disk has encryption enabled\nResource: azurerm_managed_disk.example"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_azr_general_1"}, {"id": "CKV_AZURE_36", "name": "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access", "shortDescription": {"text": "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"}, "fullDescription": {"text": "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"}, "help": {"text": "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access\nResource: azurerm_storage_account_network_rules.test"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/enable-trusted-microsoft-services-for-storage-account-access"}, {"id": "CKV_GCP_52", "name": "Ensure PostgreSQL database 'log_connections' flag is set to 'on'", "shortDescription": {"text": "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"}, "fullDescription": {"text": "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"}, "help": {"text": "Ensure PostgreSQL database 'log_connections' flag is set to 'on'\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_sql_3"}, {"id": "CKV_GCP_108", "name": "Ensure hostnames are logged for GCP PostgreSQL databases", "shortDescription": {"text": "Ensure hostnames are logged for GCP PostgreSQL databases"}, "fullDescription": {"text": "Ensure hostnames are logged for GCP PostgreSQL databases"}, "help": {"text": "Ensure hostnames are logged for GCP PostgreSQL databases\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_GCP_6", "name": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL", "shortDescription": {"text": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"}, "fullDescription": {"text": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"}, "help": {"text": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_general_1"}, {"id": "CKV_GCP_11", "name": "Ensure that Cloud SQL database Instances are not open to the world", "shortDescription": {"text": "Ensure that Cloud SQL database Instances are not open to the world"}, "fullDescription": {"text": "Ensure that Cloud SQL database Instances are not open to the world"}, "help": {"text": "Ensure that Cloud SQL database Instances are not open to the world\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_4"}, {"id": "CKV_GCP_79", "name": "Ensure SQL database is using latest Major version", "shortDescription": {"text": "Ensure SQL database is using latest Major version"}, "fullDescription": {"text": "Ensure SQL database is using latest Major version"}, "help": {"text": "Ensure SQL database is using latest Major version\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-sql-database-uses-the-latest-major-version"}, {"id": "CKV_GCP_110", "name": "Ensure pgAudit is enabled for your GCP PostgreSQL database", "shortDescription": {"text": "Ensure pgAudit is enabled for your GCP PostgreSQL database"}, "fullDescription": {"text": "Ensure pgAudit is enabled for your GCP PostgreSQL database"}, "help": {"text": "Ensure pgAudit is enabled for your GCP PostgreSQL database\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_GCP_51", "name": "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'", "shortDescription": {"text": "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"}, "fullDescription": {"text": "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"}, "help": {"text": "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_sql_2"}, {"id": "CKV_GCP_53", "name": "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'", "shortDescription": {"text": "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"}, "fullDescription": {"text": "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"}, "help": {"text": "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_sql_4"}, {"id": "CKV_GCP_60", "name": "Ensure Cloud SQL database does not have public IP", "shortDescription": {"text": "Ensure Cloud SQL database does not have public IP"}, "fullDescription": {"text": "Ensure Cloud SQL database does not have public IP"}, "help": {"text": "Ensure Cloud SQL database does not have public IP\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_sql_11"}, {"id": "CKV_GCP_109", "name": "Ensure the GCP PostgreSQL database log levels are set to ERROR or lower", "shortDescription": {"text": "Ensure the GCP PostgreSQL database log levels are set to ERROR or lower"}, "fullDescription": {"text": "Ensure the GCP PostgreSQL database log levels are set to ERROR or lower"}, "help": {"text": "Ensure the GCP PostgreSQL database log levels are set to ERROR or lower\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_GCP_111", "name": "Ensure GCP PostgreSQL logs SQL statements", "shortDescription": {"text": "Ensure GCP PostgreSQL logs SQL statements"}, "fullDescription": {"text": "Ensure GCP PostgreSQL logs SQL statements"}, "help": {"text": "Ensure GCP PostgreSQL logs SQL statements\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_GCP_54", "name": "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'", "shortDescription": {"text": "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"}, "fullDescription": {"text": "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"}, "help": {"text": "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_sql_5"}, {"id": "CKV_GCP_14", "name": "Ensure all Cloud SQL database instance have backup configuration enabled", "shortDescription": {"text": "Ensure all Cloud SQL database instance have backup configuration enabled"}, "fullDescription": {"text": "Ensure all Cloud SQL database instance have backup configuration enabled"}, "help": {"text": "Ensure all Cloud SQL database instance have backup configuration enabled\nResource: google_sql_database_instance.master_instance"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_general_2"}, {"id": "CKV_GCP_81", "name": "Ensure Big Query Datasets are encrypted with Customer Supplied Encryption Keys (CSEK)", "shortDescription": {"text": "Ensure Big Query Datasets are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "fullDescription": {"text": "Ensure Big Query Datasets are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "help": {"text": "Ensure Big Query Datasets are encrypted with Customer Supplied Encryption Keys (CSEK)\nResource: google_bigquery_dataset.dataset"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-big-query-tables-are-encrypted-with-customer-supplied-encryption-keys-csek-1"}, {"id": "CKV_GCP_15", "name": "Ensure that BigQuery datasets are not anonymously or publicly accessible", "shortDescription": {"text": "Ensure that BigQuery datasets are not anonymously or publicly accessible"}, "fullDescription": {"text": "Ensure that BigQuery datasets are not anonymously or publicly accessible"}, "help": {"text": "Ensure that BigQuery datasets are not anonymously or publicly accessible\nResource: google_bigquery_dataset.dataset"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_general_3"}, {"id": "CKV_GCP_114", "name": "Ensure public access prevention is enforced on Cloud Storage bucket", "shortDescription": {"text": "Ensure public access prevention is enforced on Cloud Storage bucket"}, "fullDescription": {"text": "Ensure public access prevention is enforced on Cloud Storage bucket"}, "help": {"text": "Ensure public access prevention is enforced on Cloud Storage bucket\nResource: google_storage_bucket.terragoat_website"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_GCP_62", "name": "Bucket should log access", "shortDescription": {"text": "Bucket should log access"}, "fullDescription": {"text": "Bucket should log access"}, "help": {"text": "Bucket should log access\nResource: google_storage_bucket.terragoat_website"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_logging_2"}, {"id": "CKV_GCP_29", "name": "Ensure that Cloud Storage buckets have uniform bucket-level access enabled", "shortDescription": {"text": "Ensure that Cloud Storage buckets have uniform bucket-level access enabled"}, "fullDescription": {"text": "Ensure that Cloud Storage buckets have uniform bucket-level access enabled"}, "help": {"text": "Ensure that Cloud Storage buckets have uniform bucket-level access enabled\nResource: google_storage_bucket.terragoat_website"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_gcs_2"}, {"id": "CKV_GCP_78", "name": "Ensure Cloud storage has versioning enabled", "shortDescription": {"text": "Ensure Cloud storage has versioning enabled"}, "fullDescription": {"text": "Ensure Cloud storage has versioning enabled"}, "help": {"text": "Ensure Cloud storage has versioning enabled\nResource: google_storage_bucket.terragoat_website"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-cloud-storage-has-versioning-enabled"}, {"id": "CKV_GCP_28", "name": "Ensure that Cloud Storage bucket is not anonymously or publicly accessible", "shortDescription": {"text": "Ensure that Cloud Storage bucket is not anonymously or publicly accessible"}, "fullDescription": {"text": "Ensure that Cloud Storage bucket is not anonymously or publicly accessible"}, "help": {"text": "Ensure that Cloud Storage bucket is not anonymously or publicly accessible\nResource: google_storage_bucket_iam_binding.allow_public_read"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_public_1"}, {"id": "CKV_GCP_24", "name": "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters", "shortDescription": {"text": "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"}, "fullDescription": {"text": "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"}, "help": {"text": "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_9"}, {"id": "CKV_GCP_18", "name": "Ensure GKE Control Plane is not public", "shortDescription": {"text": "Ensure GKE Control Plane is not public"}, "fullDescription": {"text": "Ensure GKE Control Plane is not public"}, "help": {"text": "Ensure GKE Control Plane is not public\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_10"}, {"id": "CKV_GCP_8", "name": "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters", "shortDescription": {"text": "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"}, "fullDescription": {"text": "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"}, "help": {"text": "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_3"}, {"id": "CKV_GCP_61", "name": "Enable VPC Flow Logs and Intranode Visibility", "shortDescription": {"text": "Enable VPC Flow Logs and Intranode Visibility"}, "fullDescription": {"text": "Enable VPC Flow Logs and Intranode Visibility"}, "help": {"text": "Enable VPC Flow Logs and Intranode Visibility\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/enable-vpc-flow-logs-and-intranode-visibility"}, {"id": "CKV_GCP_70", "name": "Ensure the GKE Release Channel is set", "shortDescription": {"text": "Ensure the GKE Release Channel is set"}, "fullDescription": {"text": "Ensure the GKE Release Channel is set"}, "help": {"text": "Ensure the GKE Release Channel is set\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-the-gke-release-channel-is-set"}, {"id": "CKV_GCP_25", "name": "Ensure Kubernetes Cluster is created with Private cluster enabled", "shortDescription": {"text": "Ensure Kubernetes Cluster is created with Private cluster enabled"}, "fullDescription": {"text": "Ensure Kubernetes Cluster is created with Private cluster enabled"}, "help": {"text": "Ensure Kubernetes Cluster is created with Private cluster enabled\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_6"}, {"id": "CKV_GCP_1", "name": "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters", "shortDescription": {"text": "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"}, "fullDescription": {"text": "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"}, "help": {"text": "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_1"}, {"id": "CKV_GCP_23", "name": "Ensure Kubernetes Cluster is created with Alias IP ranges enabled", "shortDescription": {"text": "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"}, "fullDescription": {"text": "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"}, "help": {"text": "Ensure Kubernetes Cluster is created with Alias IP ranges enabled\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_15"}, {"id": "CKV_GCP_21", "name": "Ensure Kubernetes Clusters are configured with Labels", "shortDescription": {"text": "Ensure Kubernetes Clusters are configured with Labels"}, "fullDescription": {"text": "Ensure Kubernetes Clusters are configured with Labels"}, "help": {"text": "Ensure Kubernetes Clusters are configured with Labels\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_13"}, {"id": "CKV_GCP_7", "name": "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters", "shortDescription": {"text": "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"}, "fullDescription": {"text": "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"}, "help": {"text": "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_2"}, {"id": "CKV_GCP_67", "name": "Ensure legacy Compute Engine instance metadata APIs are Disabled", "shortDescription": {"text": "Ensure legacy Compute Engine instance metadata APIs are Disabled"}, "fullDescription": {"text": "Ensure legacy Compute Engine instance metadata APIs are Disabled"}, "help": {"text": "Ensure legacy Compute Engine instance metadata APIs are Disabled\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-legacy-compute-engine-instance-metadata-apis-are-disabled"}, {"id": "CKV_GCP_13", "name": "Ensure client certificate authentication to Kubernetes Engine Clusters is disabled", "shortDescription": {"text": "Ensure client certificate authentication to Kubernetes Engine Clusters is disabled"}, "fullDescription": {"text": "Ensure client certificate authentication to Kubernetes Engine Clusters is disabled"}, "help": {"text": "Ensure client certificate authentication to Kubernetes Engine Clusters is disabled\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_8"}, {"id": "CKV_GCP_65", "name": "Manage Kubernetes RBAC users with Google Groups for GKE", "shortDescription": {"text": "Manage Kubernetes RBAC users with Google Groups for GKE"}, "fullDescription": {"text": "Manage Kubernetes RBAC users with Google Groups for GKE"}, "help": {"text": "Manage Kubernetes RBAC users with Google Groups for GKE\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/manage-kubernetes-rbac-users-with-google-groups-for-gke"}, {"id": "CKV_GCP_64", "name": "Ensure clusters are created with Private Nodes", "shortDescription": {"text": "Ensure clusters are created with Private Nodes"}, "fullDescription": {"text": "Ensure clusters are created with Private Nodes"}, "help": {"text": "Ensure clusters are created with Private Nodes\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-clusters-are-created-with-private-nodes"}, {"id": "CKV_GCP_66", "name": "Ensure use of Binary Authorization", "shortDescription": {"text": "Ensure use of Binary Authorization"}, "fullDescription": {"text": "Ensure use of Binary Authorization"}, "help": {"text": "Ensure use of Binary Authorization\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-use-of-binary-authorization"}, {"id": "CKV_GCP_69", "name": "Ensure the GKE Metadata Server is Enabled", "shortDescription": {"text": "Ensure the GKE Metadata Server is Enabled"}, "fullDescription": {"text": "Ensure the GKE Metadata Server is Enabled"}, "help": {"text": "Ensure the GKE Metadata Server is Enabled\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-the-gke-metadata-server-is-enabled"}, {"id": "CKV_GCP_12", "name": "Ensure Network Policy is enabled on Kubernetes Engine Clusters", "shortDescription": {"text": "Ensure Network Policy is enabled on Kubernetes Engine Clusters"}, "fullDescription": {"text": "Ensure Network Policy is enabled on Kubernetes Engine Clusters"}, "help": {"text": "Ensure Network Policy is enabled on Kubernetes Engine Clusters\nResource: google_container_cluster.workload_cluster"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_7"}, {"id": "CKV_GCP_10", "name": "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters", "shortDescription": {"text": "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"}, "fullDescription": {"text": "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"}, "help": {"text": "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters\nResource: google_container_node_pool.custom_node_pool"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_5"}, {"id": "CKV_GCP_22", "name": "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image", "shortDescription": {"text": "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"}, "fullDescription": {"text": "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"}, "help": {"text": "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image\nResource: google_container_node_pool.custom_node_pool"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_14"}, {"id": "CKV_GCP_68", "name": "Ensure Secure Boot for Shielded GKE Nodes is Enabled", "shortDescription": {"text": "Ensure Secure Boot for Shielded GKE Nodes is Enabled"}, "fullDescription": {"text": "Ensure Secure Boot for Shielded GKE Nodes is Enabled"}, "help": {"text": "Ensure Secure Boot for Shielded GKE Nodes is Enabled\nResource: google_container_node_pool.custom_node_pool"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-secure-boot-for-shielded-gke-nodes-is-enabled"}, {"id": "CKV_GCP_9", "name": "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters", "shortDescription": {"text": "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"}, "fullDescription": {"text": "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"}, "help": {"text": "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters\nResource: google_container_node_pool.custom_node_pool"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_kubernetes_4"}, {"id": "CKV_GCP_36", "name": "Ensure that IP forwarding is not enabled on Instances", "shortDescription": {"text": "Ensure that IP forwarding is not enabled on Instances"}, "fullDescription": {"text": "Ensure that IP forwarding is not enabled on Instances"}, "help": {"text": "Ensure that IP forwarding is not enabled on Instances\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_12"}, {"id": "CKV_GCP_34", "name": "Ensure that no instance in the project overrides the project setting for enabling OSLogin(OSLogin needs to be enabled in project metadata for all instances)", "shortDescription": {"text": "Ensure that no instance in the project overrides the project setting for enabling OSLogin(OSLogin needs to be enabled in project metadata for all instances)"}, "fullDescription": {"text": "Ensure that no instance in the project overrides the project setting for enabling OSLogin(OSLogin needs to be enabled in project metadata for all instances)"}, "help": {"text": "Ensure that no instance in the project overrides the project setting for enabling OSLogin(OSLogin needs to be enabled in project metadata for all instances)\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_10"}, {"id": "CKV_GCP_32", "name": "Ensure 'Block Project-wide SSH keys' is enabled for VM instances", "shortDescription": {"text": "Ensure 'Block Project-wide SSH keys' is enabled for VM instances"}, "fullDescription": {"text": "Ensure 'Block Project-wide SSH keys' is enabled for VM instances"}, "help": {"text": "Ensure 'Block Project-wide SSH keys' is enabled for VM instances\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_8"}, {"id": "CKV_GCP_38", "name": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)", "shortDescription": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "fullDescription": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "help": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/encrypt-boot-disks-for-instances-with-cseks"}, {"id": "CKV_GCP_30", "name": "Ensure that instances are not configured to use the default service account", "shortDescription": {"text": "Ensure that instances are not configured to use the default service account"}, "fullDescription": {"text": "Ensure that instances are not configured to use the default service account"}, "help": {"text": "Ensure that instances are not configured to use the default service account\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_iam_1"}, {"id": "CKV_GCP_35", "name": "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance", "shortDescription": {"text": "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance"}, "fullDescription": {"text": "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance"}, "help": {"text": "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_11"}, {"id": "CKV_GCP_39", "name": "Ensure Compute instances are launched with Shielded VM enabled", "shortDescription": {"text": "Ensure Compute instances are launched with Shielded VM enabled"}, "fullDescription": {"text": "Ensure Compute instances are launched with Shielded VM enabled"}, "help": {"text": "Ensure Compute instances are launched with Shielded VM enabled\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_general_y"}, {"id": "CKV_GCP_40", "name": "Ensure that Compute instances do not have public IP addresses", "shortDescription": {"text": "Ensure that Compute instances do not have public IP addresses"}, "fullDescription": {"text": "Ensure that Compute instances do not have public IP addresses"}, "help": {"text": "Ensure that Compute instances do not have public IP addresses\nResource: google_compute_instance.server"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_public_2"}, {"id": "CKV_GCP_37", "name": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)", "shortDescription": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "fullDescription": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "help": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)\nResource: google_compute_disk.unencrypted_disk"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_general_x"}, {"id": "CKV_GCP_74", "name": "Ensure that private_ip_google_access is enabled for Subnet", "shortDescription": {"text": "Ensure that private_ip_google_access is enabled for Subnet"}, "fullDescription": {"text": "Ensure that private_ip_google_access is enabled for Subnet"}, "help": {"text": "Ensure that private_ip_google_access is enabled for Subnet\nResource: google_compute_subnetwork.public-subnetwork"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-subnet-has-a-private-ip-google-access"}, {"id": "CKV_GCP_26", "name": "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network", "shortDescription": {"text": "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network"}, "fullDescription": {"text": "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network"}, "help": {"text": "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network\nResource: google_compute_subnetwork.public-subnetwork"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_logging_1"}, {"id": "CKV_GCP_76", "name": "Ensure that Private google access is enabled for IPV6", "shortDescription": {"text": "Ensure that Private google access is enabled for IPV6"}, "fullDescription": {"text": "Ensure that Private google access is enabled for IPV6"}, "help": {"text": "Ensure that Private google access is enabled for IPV6\nResource: google_compute_subnetwork.public-subnetwork"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-private-google-access-is-enabled-for-ipv6"}, {"id": "CKV_GCP_88", "name": "Ensure Google compute firewall ingress does not allow unrestricted mysql access", "shortDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted mysql access"}, "fullDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted mysql access"}, "help": {"text": "Ensure Google compute firewall ingress does not allow unrestricted mysql access\nResource: google_compute_firewall.allow_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-compute-firewall-ingress-does-not-allow-unrestricted-mysql-access"}, {"id": "CKV_GCP_75", "name": "Ensure Google compute firewall ingress does not allow unrestricted FTP access", "shortDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted FTP access"}, "fullDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted FTP access"}, "help": {"text": "Ensure Google compute firewall ingress does not allow unrestricted FTP access\nResource: google_compute_firewall.allow_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-google-compute-firewall-ingress-does-not-allow-unrestricted-ftp-access"}, {"id": "CKV_GCP_77", "name": "Ensure Google compute firewall ingress does not allow on ftp port", "shortDescription": {"text": "Ensure Google compute firewall ingress does not allow on ftp port"}, "fullDescription": {"text": "Ensure Google compute firewall ingress does not allow on ftp port"}, "help": {"text": "Ensure Google compute firewall ingress does not allow on ftp port\nResource: google_compute_firewall.allow_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-google-compute-firewall-ingress-does-not-allow-ftp-port-20-access"}, {"id": "CKV_GCP_3", "name": "Ensure Google compute firewall ingress does not allow unrestricted rdp access", "shortDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted rdp access"}, "fullDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted rdp access"}, "help": {"text": "Ensure Google compute firewall ingress does not allow unrestricted rdp access\nResource: google_compute_firewall.allow_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_2"}, {"id": "CKV_GCP_2", "name": "Ensure Google compute firewall ingress does not allow unrestricted ssh access", "shortDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted ssh access"}, "fullDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted ssh access"}, "help": {"text": "Ensure Google compute firewall ingress does not allow unrestricted ssh access\nResource: google_compute_firewall.allow_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_gcp_networking_1"}, {"id": "CKV_GCP_106", "name": "Ensure Google compute firewall ingress does not allow unrestricted http port 80 access", "shortDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted http port 80 access"}, "fullDescription": {"text": "Ensure Google compute firewall ingress does not allow unrestricted http port 80 access"}, "help": {"text": "Ensure Google compute firewall ingress does not allow unrestricted http port 80 access\nResource: google_compute_firewall.allow_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-gcp-google-compute-firewall-ingress-does-not-allow-unrestricted-http-port-80-access"}, {"id": "CKV_OCI_9", "name": "Ensure OCI Object Storage is encrypted with Customer Managed Key", "shortDescription": {"text": "Ensure OCI Object Storage is encrypted with Customer Managed Key"}, "fullDescription": {"text": "Ensure OCI Object Storage is encrypted with Customer Managed Key"}, "help": {"text": "Ensure OCI Object Storage is encrypted with Customer Managed Key\nResource: oci_objectstorage_bucket.secretsquirrel"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-oci-object-storage-is-encrypted-with-customer-managed-key"}, {"id": "CKV_OCI_10", "name": "Ensure OCI Object Storage is not Public", "shortDescription": {"text": "Ensure OCI Object Storage is not Public"}, "fullDescription": {"text": "Ensure OCI Object Storage is not Public"}, "help": {"text": "Ensure OCI Object Storage is not Public\nResource: oci_objectstorage_bucket.secretsquirrel"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-oci-object-storage-is-not-public"}, {"id": "CKV_OCI_8", "name": "Ensure OCI Object Storage has versioning enabled", "shortDescription": {"text": "Ensure OCI Object Storage has versioning enabled"}, "fullDescription": {"text": "Ensure OCI Object Storage has versioning enabled"}, "help": {"text": "Ensure OCI Object Storage has versioning enabled\nResource: oci_objectstorage_bucket.secretsquirrel"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-oci-object-storage-has-versioning-enabled"}, {"id": "CKV_OCI_7", "name": "Ensure OCI Object Storage bucket can emit object events", "shortDescription": {"text": "Ensure OCI Object Storage bucket can emit object events"}, "fullDescription": {"text": "Ensure OCI Object Storage bucket can emit object events"}, "help": {"text": "Ensure OCI Object Storage bucket can emit object events\nResource: oci_objectstorage_bucket.secretsquirrel"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-oci-object-storage-bucket-can-emit-object-events"}, {"id": "CKV_AWS_18", "name": "Ensure the S3 bucket has access logging enabled", "shortDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "fullDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "help": {"text": "Ensure the S3 bucket has access logging enabled\nResource: AWS::S3::Bucket.FlowBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/s3_13-enable-logging"}, {"id": "CKV_AWS_53", "name": "Ensure S3 bucket has block public ACLS enabled", "shortDescription": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "fullDescription": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "help": {"text": "Ensure S3 bucket has block public ACLS enabled\nResource: AWS::S3::Bucket.FlowBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_s3_19"}, {"id": "CKV_AWS_54", "name": "Ensure S3 bucket has block public policy enabled", "shortDescription": {"text": "Ensure S3 bucket has block public policy enabled"}, "fullDescription": {"text": "Ensure S3 bucket has block public policy enabled"}, "help": {"text": "Ensure S3 bucket has block public policy enabled\nResource: AWS::S3::Bucket.FlowBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_s3_20"}, {"id": "CKV_AWS_21", "name": "Ensure the S3 bucket has versioning enabled", "shortDescription": {"text": "Ensure the S3 bucket has versioning enabled"}, "fullDescription": {"text": "Ensure the S3 bucket has versioning enabled"}, "help": {"text": "Ensure the S3 bucket has versioning enabled\nResource: AWS::S3::Bucket.FlowBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/s3_16-enable-versioning"}, {"id": "CKV_AWS_55", "name": "Ensure S3 bucket has ignore public ACLs enabled", "shortDescription": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "fullDescription": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "help": {"text": "Ensure S3 bucket has ignore public ACLs enabled\nResource: AWS::S3::Bucket.FlowBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_s3_21"}, {"id": "CKV_AWS_56", "name": "Ensure S3 bucket has 'restrict_public_bucket' enabled", "shortDescription": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "fullDescription": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "help": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled\nResource: AWS::S3::Bucket.FlowBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_aws_s3_22"}, {"id": "CKV_AWS_108", "name": "Ensure IAM policies does not allow data exfiltration", "shortDescription": {"text": "Ensure IAM policies does not allow data exfiltration"}, "fullDescription": {"text": "Ensure IAM policies does not allow data exfiltration"}, "help": {"text": "Ensure IAM policies does not allow data exfiltration\nResource: AWS::IAM::Policy.UserPolicy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-iam-policies-do-not-allow-data-exfiltration"}, {"id": "CKV_AWS_107", "name": "Ensure IAM policies does not allow credentials exposure", "shortDescription": {"text": "Ensure IAM policies does not allow credentials exposure"}, "fullDescription": {"text": "Ensure IAM policies does not allow credentials exposure"}, "help": {"text": "Ensure IAM policies does not allow credentials exposure\nResource: AWS::IAM::Policy.UserPolicy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-iam-policies-do-not-allow-credentials-exposure"}, {"id": "CKV_AWS_40", "name": "Ensure IAM policies are attached only to groups or roles (Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.)", "shortDescription": {"text": "Ensure IAM policies are attached only to groups or roles (Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.)"}, "fullDescription": {"text": "Ensure IAM policies are attached only to groups or roles (Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.)"}, "help": {"text": "Ensure IAM policies are attached only to groups or roles (Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.)\nResource: AWS::IAM::Policy.UserPolicy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/iam_16-iam-policy-privileges-1"}, {"id": "CKV_AWS_110", "name": "Ensure IAM policies does not allow privilege escalation", "shortDescription": {"text": "Ensure IAM policies does not allow privilege escalation"}, "fullDescription": {"text": "Ensure IAM policies does not allow privilege escalation"}, "help": {"text": "Ensure IAM policies does not allow privilege escalation\nResource: AWS::IAM::Policy.UserPolicy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-iam-policies-does-not-allow-privilege-escalation"}, {"id": "CKV_AWS_20", "name": "Ensure the S3 bucket does not allow READ permissions to everyone", "shortDescription": {"text": "Ensure the S3 bucket does not allow READ permissions to everyone"}, "fullDescription": {"text": "Ensure the S3 bucket does not allow READ permissions to everyone"}, "help": {"text": "Ensure the S3 bucket does not allow READ permissions to everyone\nResource: AWS::S3::Bucket.DataBucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/s3_1-acl-read-permissions-everyone"}, {"id": "CKV_K8S_40", "name": "Containers should run as a high UID to avoid host conflict", "shortDescription": {"text": "Containers should run as a high UID to avoid host conflict"}, "fullDescription": {"text": "Containers should run as a high UID to avoid host conflict"}, "help": {"text": "Containers should run as a high UID to avoid host conflict\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_37"}, {"id": "CKV_K8S_29", "name": "Apply security context to your pods and containers", "shortDescription": {"text": "Apply security context to your pods and containers"}, "fullDescription": {"text": "Apply security context to your pods and containers"}, "help": {"text": "Apply security context to your pods and containers\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_28"}, {"id": "CKV_K8S_38", "name": "Ensure that Service Account Tokens are only mounted where necessary", "shortDescription": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "fullDescription": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "help": {"text": "Ensure that Service Account Tokens are only mounted where necessary\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_35"}, {"id": "CKV_K8S_37", "name": "Minimize the admission of containers with capabilities assigned", "shortDescription": {"text": "Minimize the admission of containers with capabilities assigned"}, "fullDescription": {"text": "Minimize the admission of containers with capabilities assigned"}, "help": {"text": "Minimize the admission of containers with capabilities assigned\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_34"}, {"id": "CKV_K8S_31", "name": "Ensure that the seccomp profile is set to docker/default or runtime/default", "shortDescription": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "fullDescription": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "help": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_29"}, {"id": "CKV_K8S_8", "name": "Liveness Probe Should be Configured", "shortDescription": {"text": "Liveness Probe Should be Configured"}, "fullDescription": {"text": "Liveness Probe Should be Configured"}, "help": {"text": "Liveness Probe Should be Configured\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_7"}, {"id": "CKV_K8S_12", "name": "Memory requests should be set", "shortDescription": {"text": "Memory requests should be set"}, "fullDescription": {"text": "Memory requests should be set"}, "help": {"text": "Memory requests should be set\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_11"}, {"id": "CKV_K8S_20", "name": "Containers should not run with allowPrivilegeEscalation", "shortDescription": {"text": "Containers should not run with allowPrivilegeEscalation"}, "fullDescription": {"text": "Containers should not run with allowPrivilegeEscalation"}, "help": {"text": "Containers should not run with allowPrivilegeEscalation\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_19"}, {"id": "CKV_K8S_15", "name": "Image Pull Policy should be Always", "shortDescription": {"text": "Image Pull Policy should be Always"}, "fullDescription": {"text": "Image Pull Policy should be Always"}, "help": {"text": "Image Pull Policy should be Always\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_14"}, {"id": "CKV_K8S_13", "name": "Memory limits should be set", "shortDescription": {"text": "Memory limits should be set"}, "fullDescription": {"text": "Memory limits should be set"}, "help": {"text": "Memory limits should be set\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_12"}, {"id": "CKV_K8S_10", "name": "CPU requests should be set", "shortDescription": {"text": "CPU requests should be set"}, "fullDescription": {"text": "CPU requests should be set"}, "help": {"text": "CPU requests should be set\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_9"}, {"id": "CKV_K8S_22", "name": "Use read-only filesystem for containers where possible", "shortDescription": {"text": "Use read-only filesystem for containers where possible"}, "fullDescription": {"text": "Use read-only filesystem for containers where possible"}, "help": {"text": "Use read-only filesystem for containers where possible\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_21"}, {"id": "CKV_K8S_9", "name": "Readiness Probe Should be Configured", "shortDescription": {"text": "Readiness Probe Should be Configured"}, "fullDescription": {"text": "Readiness Probe Should be Configured"}, "help": {"text": "Readiness Probe Should be Configured\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_8"}, {"id": "CKV_K8S_28", "name": "Minimize the admission of containers with the NET_RAW capability", "shortDescription": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "fullDescription": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "help": {"text": "Minimize the admission of containers with the NET_RAW capability\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_27"}, {"id": "CKV_K8S_30", "name": "Apply security context to your containers", "shortDescription": {"text": "Apply security context to your containers"}, "fullDescription": {"text": "Apply security context to your containers"}, "help": {"text": "Apply security context to your containers\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_28"}, {"id": "CKV_K8S_23", "name": "Minimize the admission of root containers", "shortDescription": {"text": "Minimize the admission of root containers"}, "fullDescription": {"text": "Minimize the admission of root containers"}, "help": {"text": "Minimize the admission of root containers\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_22"}, {"id": "CKV_K8S_43", "name": "Image should use digest", "shortDescription": {"text": "Image should use digest"}, "fullDescription": {"text": "Image should use digest"}, "help": {"text": "Image should use digest\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_39"}, {"id": "CKV_K8S_11", "name": "CPU limits should be set", "shortDescription": {"text": "CPU limits should be set"}, "fullDescription": {"text": "CPU limits should be set"}, "help": {"text": "CPU limits should be set\nResource: Deployment.kustomizegoat.kustomizegoat"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_10"}, {"id": "CKV_K8S_27", "name": "Do not expose the docker daemon socket to containers", "shortDescription": {"text": "Do not expose the docker daemon socket to containers"}, "fullDescription": {"text": "Do not expose the docker daemon socket to containers"}, "help": {"text": "Do not expose the docker daemon socket to containers\nResource: Deployment.default.health-check-deployment"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_26"}, {"id": "CKV_K8S_16", "name": "Container should not be privileged", "shortDescription": {"text": "Container should not be privileged"}, "fullDescription": {"text": "Container should not be privileged"}, "help": {"text": "Container should not be privileged\nResource: Deployment.default.health-check-deployment"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_15"}, {"id": "CKV_K8S_14", "name": "Image Tag should be fixed - not latest or blank", "shortDescription": {"text": "Image Tag should be fixed - not latest or blank"}, "fullDescription": {"text": "Image Tag should be fixed - not latest or blank"}, "help": {"text": "Image Tag should be fixed - not latest or blank\nResource: Deployment.default.health-check-deployment"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_13"}, {"id": "CKV_K8S_21", "name": "The default namespace should not be used", "shortDescription": {"text": "The default namespace should not be used"}, "fullDescription": {"text": "The default namespace should not be used"}, "help": {"text": "The default namespace should not be used\nResource: Deployment.default.health-check-deployment"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/bc_k8s_20"}, {"id": "CKV_DOCKER_2", "name": "Ensure that HEALTHCHECK instructions have been added to container images", "shortDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "fullDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "help": {"text": "Ensure that HEALTHCHECK instructions have been added to container images\nResource: /iac/terragoat/terraform/aws/resources/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-healthcheck-instructions-have-been-added-to-container-images"}, {"id": "CKV_DOCKER_3", "name": "Ensure that a user for the container has been created", "shortDescription": {"text": "Ensure that a user for the container has been created"}, "fullDescription": {"text": "Ensure that a user for the container has been created"}, "help": {"text": "Ensure that a user for the container has been created\nResource: /iac/terragoat/terraform/aws/resources/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created"}, {"id": "CKV_DOCKER_6", "name": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)", "shortDescription": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)"}, "fullDescription": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)"}, "help": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)\nResource: /docker/bad-dockerfile/Dockerfile.MAINTAINER"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/ensure-that-label-maintainer-is-used-instead-of-maintainer-deprecated"}, {"id": "CKV_SECRET_2", "name": "AWS Access Key", "shortDescription": {"text": "AWS Access Key"}, "fullDescription": {"text": "AWS Access Key"}, "help": {"text": "AWS Access Key\nResource: fc3f784491eba6121c3bfcc1652a2c57d27b16cb"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/git_secrets_2"}, {"id": "CKV_SECRET_6", "name": "Base64 High Entropy String", "shortDescription": {"text": "Base64 High Entropy String"}, "fullDescription": {"text": "Base64 High Entropy String"}, "help": {"text": "Base64 High Entropy String\nResource: c00f1a6e4b20aa64691d50781b810756d6254b8e"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/git_secrets_6"}, {"id": "CKV_SECRET_13", "name": "Private Key", "shortDescription": {"text": "Private Key"}, "fullDescription": {"text": "Private Key"}, "help": {"text": "Private Key\nResource: eda1f4f00936b2c0a7f7df83072cb22d2fe02388"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.bridgecrew.io/docs/git_secrets_13"}, {"id": "CKV_AZURE_3", "name": "Ensure that 'supportsHttpsTrafficOnly' is set to 'true'", "shortDescription": {"text": "Ensure that 'supportsHttpsTrafficOnly' is set to 'true'"}, "fullDescription": {"text": "Ensure that 'supportsHttpsTrafficOnly' is set to 'true'"}, "help": {"text": "Ensure that 'supportsHttpsTrafficOnly' is set to 'true'\nResource: Microsoft.Storage/storageAccounts.storageAccount"}, "defaultConfiguration": {"level": "error"}}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_41", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure no hard coded AWS access key and secret key exists in provider"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 311, "endLine": 315, "snippet": {"text": "provider \"aws\" {\n  region     = \"us-west-2\"\n  access_key = \"AKIAI***************\"\n  secret_key = \"UzIHRv**********************************\"\n}\n"}}}}]}, {"ruleId": "CKV_OCI_1", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure no hard coded OCI private key in provider"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 466, "endLine": 522, "snippet": {"text": "provider \"oci\" {\n  private_key          = <<EOT\n-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAwY7gujdg4XqaUh2+LzFwRhY0exjCXkCDh3IMQpW/prHvItMy\n1BtDXGDBhPOXApRKb5dK4eG9WmvrdPdUIaftYIka6SFd6FzW3q4TvRfB6sztPnOA\nvDM2OrwJNcun6Mo4fdxv/tBFYj5DwoZYVmFEJ5HE5plPMUQ44o6AaqISqrC6KrX/\nB2tIVKlKWIkLUrsMOhW9Mv7bf8qDA+GlC9VMWcWbUZ0Z4XQhXtPz5039jSCP+FuX\n54ZyIRD7q75QBPaOZuDXZMNLIILFcX9TLRf58Hgd4t70jeVCA+wAbxxetAYisv/j\n5HbhELaw30H2wG04MgnBHB6QxFKU0R/AI5TfYc9xTNhKHOdvN2waIsoGSfU/CDhf\nezkoOdaR+1WRYPb9lu9Y/Xon3lggq8uA6979iYk5N2ofk5FICFdYOLEba3eLtf7b\nTI+SKSxCDIOL8pMR2CNO+o8X0slvJTqlBKwTSrBx8o0SRRMLHSNrTqyn+ySys8fb\nOJGXzIrB0x0L/k5rXKipu0hzhqnPOS/n71Km1vr75iuc0eteIe/oo0AEY7ktbC8B\nHYdjuAHQ58rzly0PQLPAp0eWPG12OPipiCr+5p80iUJInvhDGjTB9JZqKoQBR6MT\nUQnNYTXZlabaaRjRzZNIcd7SuM1n/5AHJiManp89EAu/US7oW2n61Rv8gh0CAwEA\nAQKCAgEAjlWD+kv46TZgPxxyG4AugMuZYiAN5oNodXSvgVNfcLSOFrzaNtGpkkfw\nZtU96f6kUjUeMsbumIydxBCQhINZctC/wknwJYwH0g6Oo1HSHtj9aRxEwaCjM0PN\nPgr5+ZyjOCKfFPGQ5DLHX0ettC+oj7SI5847Rw5VCn0h/8gZE/4LmJbm6EzDDsbC\nziJQ+lBkKF6OF+8D+JAyEeufk/kRQT6n/bcaLglY9MPGKwTV/C7C0C6CoRXj3V8A\nwwWbEFtC0nJq0kUufMTNbq3ju1hTSrr5tzie+61oAzxMAWkKVzXf1GOJ8RpeXQ0L\nOdHnIw/t8BXuNMBhUo0rtDC1+TRjot4NjuOF0vQYhfJVa11T2/exPwG5QVYcwGa/\nV5KqTSFGzR5edRyuX9nLR0pkz0bNIPJJLHKs50NLWmrsBosJJO6RfPZvi7Y/Ojim\n0rwI2254lP16+uP1K14RzTKYjcynmd/1gcTlGG1hkC2BA2ZaLBD64uSQ8Nig7TmI\nP76FYKL5eXl+62yl7t2q+suxfxf6P511XsgwGHzUDMyTxoPLGxMWhf2u5JdDfIvK\n8HkXc9uscSnqVjRg3JhSXDlXQG9bOjCMb05C+xp5D/xuKi4YLOviYHCtalnxIH9g\naZGEJ923hKEVep/Bp+YpS2Cm2nM33U0XzvnQ0aSKHptHvW7m7kECggEBAP9qhZdY\nPG891dBF4A1VL0OgY0luiJjEC0wkFAxUDcPCLuAJQtgskIt8STd13PjyF6ySN+Wu\nMZX2Jll4d/uuD3vWZJZ4nXrgrFvy/iL/kaItoVSFL4Ik/DIK9pY7ftG3RWb/bnZh\ngxe0zdAEa6NRRubZt/0GUt+4bGJ1zA7YmdgHHeOc60jxoy34wlZPRNiiH+3oSMVH\nY/duXZDXVSVjAtoeKds0VSiL+wcvJgcjLfnko7KyEb/AIsMuFQPxriegfs6QkJsC\np2ilQ9URj28hgVQt07hjgffFK3fjHWROxvtwQZfOI9diINSAwrYCH7tXMFLLEYBR\nTWObWXiMBiHANLECggEBAMIAJ5Si8vCN7SDkZQ8gjaGj4M9i/X+JSzkGUBzQ8Mg3\nphjzGgDRroeQhJDomeYs4+sfG8yShOgqutB90ZhbPYahT26eeYbPj7xQdjdkshyM\n7jrcTFFcdxNS+aynAx5sywWuMTAVGWdbMEhBoRIIBrQxfgt6r+W9aWBmSH6ydZd6\nsk+GnHat/GNuF5TaP6qOs3js/CFqs0u5iKabMV5YGbStcEvLn4wQKxbnqTvptk7N\nleZuQefcTKoZ90M3TDZKiSzmoHHCSrexzB/WmzI0D5tP7TRsTIANGDiBVJRs+c+T\nEuXiTd+u+rOc43DWA3Tw1Fz1qsxM+M6chu57nKSi7y0CggEBAI7uypG2VCOgg/3I\njKiJaii7IbTfQVvUIcpbSkjX5NgO2/KN3DVjQwR76fE6aQ17VRpCvTswLxmPpUhe\nbS6P6qRPhvzZxK8V+f5+zg9B2/rY9DZ7TenTzromfnX2F3M+z3zjJqriyNzEVoS5\nZI8Bld7sKdVT65688xJqf2Yzemx1FxngH58zcjDwy7hHJezhVWLqoYac++lkfsHm\nbwS8EsWDKcM81wcYxsLvdKV732e/tofytJIM8KcvK52IawBMBYqNRg8o/gxGp94d\ntJnpMxmrh5bhQMMqOLgfhbwzhZEB8gME3fPTOzIQWGZIa/+HvEgo0cNwPBGoxvn5\nyhirGhECggEAS9hvoQbL4Aw8xv1EHVPmy2kcfTgAT5pHlHXJYFq3qC9JerugUO2p\nRErV6Slm8bxfJw80eRhXacU64EQwa1ZQiZALU/4VGQWQ9limvyVZFRxsDwsNs0lp\nLF7mSf/Jkl2KSiA+DsRQ+D2IdNdjt373z/8Bfk9q8XDJ/+w9L3tpyd0oVTsVdLi0\n0dK62XEyLuY3eHF+aToj+tkAedJ2zKG4+xBLtPZY3BN+JShQ26GVqt1pW3uDvLg+\nKMqaBudZnmgplSpdU9xYBdU3LsNiTZBZAamP3Uzx46Y67+xwOs8YI3UmkEWXmHn6\nfbo6mWSyWUfGXsmVCuaU54H+psIhDaS9yQKCAQA6Px00WMUiTDv59Y4U7UHe3jXz\nT6Ih8pA364sDoz3FUvc169B1EN0md2wE+qsH8JyrPN3RmM9NrhmMQrqCWh7xlOAa\nIe8TYDE5PtpkHgaKvdZlZ8rVGLixB7pOEorK6qwsM2j2JnwXG42EPyNVnHMid5ZJ\nX0s3/3xG0xI/Sf66mfhfwKzpE1z324QT3c5D0Sqi6+u42y+xq4sbVh3SbjJFZ7sI\nU7tJK4TkZ1Wy8NhRdkQoZZOryCPVfVeiUJGZzRG9woWoRAstxrk60SzS0qtIBj53\nkKgviQ5BQ1SuMjPPhQouRHSZXaCnRiFvkYNWHWMFiOtIx+Xd+DC5SPTbVB6W\n-----END RSA PRIVATE KEY-----\nEOT\n  private_key_password = \"sdfdsf\"\n  region               = \"ca-montreal-1\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_186", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/main.tf"}, "region": {"startLine": 16, "endLine": 25, "snippet": {"text": "resource \"aws_s3_bucket_object\" \"data_object\" {\n  bucket = aws_s3_bucket.data.id\n  region        = \"us-west-2\"\n  key    = \"customer-master.xlsx\"\n  source = \"resources/customer-master.xlsx\"\n  tags = {\n    Name        = \"${local.resource_prefix.value}-customer-master\"\n    Environment = local.resource_prefix.value\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_10", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure OSS bucket has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/bucket.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"bad_bucket\" {\n  # Public and writeable bucket \n  # Versioning isn't enabled\n  # Not Encrypted with a Customer Master Key and no Server side encryption\n  # Doesn't have access logging enabled\" \n  bucket = \"wildwestfreeforall\"\n  acl    = \"public-read-write\"\n  tags = {\n    git_commit           = \"9c114f23d311f787c137723e1f71b27a52f0adec\"\n    git_file             = \"terraform/alicloud/bucket.tf\"\n    git_last_modified_at = \"2022-04-05 15:17:55\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"80373049-248d-4f5e-9d25-740c3e80f2b9\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_6", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure OSS bucket is encrypted with Customer Master Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/bucket.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"bad_bucket\" {\n  # Public and writeable bucket \n  # Versioning isn't enabled\n  # Not Encrypted with a Customer Master Key and no Server side encryption\n  # Doesn't have access logging enabled\" \n  bucket = \"wildwestfreeforall\"\n  acl    = \"public-read-write\"\n  tags = {\n    git_commit           = \"9c114f23d311f787c137723e1f71b27a52f0adec\"\n    git_file             = \"terraform/alicloud/bucket.tf\"\n    git_last_modified_at = \"2022-04-05 15:17:55\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"80373049-248d-4f5e-9d25-740c3e80f2b9\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_12", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure the OSS bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/bucket.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"bad_bucket\" {\n  # Public and writeable bucket \n  # Versioning isn't enabled\n  # Not Encrypted with a Customer Master Key and no Server side encryption\n  # Doesn't have access logging enabled\" \n  bucket = \"wildwestfreeforall\"\n  acl    = \"public-read-write\"\n  tags = {\n    git_commit           = \"9c114f23d311f787c137723e1f71b27a52f0adec\"\n    git_file             = \"terraform/alicloud/bucket.tf\"\n    git_last_modified_at = \"2022-04-05 15:17:55\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"80373049-248d-4f5e-9d25-740c3e80f2b9\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_1", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Alibaba Cloud OSS bucket accessible to public"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/bucket.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"bad_bucket\" {\n  # Public and writeable bucket \n  # Versioning isn't enabled\n  # Not Encrypted with a Customer Master Key and no Server side encryption\n  # Doesn't have access logging enabled\" \n  bucket = \"wildwestfreeforall\"\n  acl    = \"public-read-write\"\n  tags = {\n    git_commit           = \"9c114f23d311f787c137723e1f71b27a52f0adec\"\n    git_file             = \"terraform/alicloud/bucket.tf\"\n    git_last_modified_at = \"2022-04-05 15:17:55\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"80373049-248d-4f5e-9d25-740c3e80f2b9\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_11", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure OSS bucket has transfer Acceleration enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/bucket.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"bad_bucket\" {\n  # Public and writeable bucket \n  # Versioning isn't enabled\n  # Not Encrypted with a Customer Master Key and no Server side encryption\n  # Doesn't have access logging enabled\" \n  bucket = \"wildwestfreeforall\"\n  acl    = \"public-read-write\"\n  tags = {\n    git_commit           = \"9c114f23d311f787c137723e1f71b27a52f0adec\"\n    git_file             = \"terraform/alicloud/bucket.tf\"\n    git_last_modified_at = \"2022-04-05 15:17:55\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"80373049-248d-4f5e-9d25-740c3e80f2b9\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_20", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure RDS instance uses SSL"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_30", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure RDS instance auto upgrades for minor versions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_37", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure RDS instance has log_connections enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_36", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure RDS instance has log_disconnections enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_9", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure database instance is not public"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_25", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Instance SQL Collector Retention Period should be greater than 180"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_35", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure RDS instance has log_duration enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/rds.tf"}, "region": {"startLine": 1, "endLine": 30, "snippet": {"text": "resource \"alicloud_db_instance\" \"seeme\" {\n  # Is public due to Security IPS 0.0.0.0/0\n  engine           = \"MySQL\"\n  engine_version   = \"5.6\"\n  instance_type    = \"rds.mysql.t1.small\"\n  instance_storage = \"10\"\n  tde_status       = \"Enabled\"\n  security_ips = [\n    \"0.0.0.0\",\n    \"10.23.12.24/24\"\n  ]\n  parameters {\n    name  = \"innodb_large_prefix\"\n    value = \"ON\"\n  }\n  parameters {\n    name  = \"connect_timeout\"\n    value = \"50\"\n  }\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/rds.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7bd1394e-0a79-4288-8f83-5abcca5bf1ba\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_4", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure Action Trail Logging for all regions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/trail.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"alicloud_actiontrail_trail\" \"fail\" {\n  # Action Trail not Logging for all regions\n  # Action Trail not Logging for all events\n  trail_name         = \"action-trail\"\n  oss_write_role_arn = alicloud_ram_role.trail.arn\n  oss_bucket_name    = alicloud_oss_bucket.trail.bucket\n  event_rw           = \"Read\"\n  trail_region       = \"cn-hangzhou\"\n}\n"}}}}]}, {"ruleId": "CKV_ALI_5", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Ensure Action Trail Logging for all events"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/trail.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"alicloud_actiontrail_trail\" \"fail\" {\n  # Action Trail not Logging for all regions\n  # Action Trail not Logging for all events\n  trail_name         = \"action-trail\"\n  oss_write_role_arn = alicloud_ram_role.trail.arn\n  oss_bucket_name    = alicloud_oss_bucket.trail.bucket\n  event_rw           = \"Read\"\n  trail_region       = \"cn-hangzhou\"\n}\n"}}}}]}, {"ruleId": "CKV_ALI_10", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure OSS bucket has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/trail.tf"}, "region": {"startLine": 11, "endLine": 23, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"trail\" {\n\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/trail.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9ce7077b-8195-4e71-aec6-ed1f769555dc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_6", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure OSS bucket is encrypted with Customer Master Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/trail.tf"}, "region": {"startLine": 11, "endLine": 23, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"trail\" {\n\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/trail.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9ce7077b-8195-4e71-aec6-ed1f769555dc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_12", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure the OSS bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/trail.tf"}, "region": {"startLine": 11, "endLine": 23, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"trail\" {\n\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/trail.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9ce7077b-8195-4e71-aec6-ed1f769555dc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_ALI_11", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure OSS bucket has transfer Acceleration enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/alicloud/trail.tf"}, "region": {"startLine": 11, "endLine": 23, "snippet": {"text": "resource \"alicloud_oss_bucket\" \"trail\" {\n\n  tags = {\n    git_commit           = \"c2ff052009d49c65e6af551eb1506abc73b5976c\"\n    git_file             = \"terraform/alicloud/trail.tf\"\n    git_last_modified_at = \"2022-04-05 15:14:28\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9ce7077b-8195-4e71-aec6-ed1f769555dc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_161", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure RDS database has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_293", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_157", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_129", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_133", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances has backup policy"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_226", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_17", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in RDS is not publicly accessible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_118", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_16", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the RDS is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 1, "endLine": 42, "snippet": {"text": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure every security groups rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 117, "endLine": 134, "snippet": {"text": "resource \"aws_security_group\" \"default\" {\n  name   = \"${local.resource_prefix.value}-rds-sg\"\n  vpc_id = aws_vpc.web_vpc.id\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds-sg\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7b251090-8ac1-4290-bd2e-bf3e16126430\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure every security groups rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 136, "endLine": 143, "snippet": {"text": "resource \"aws_security_group_rule\" \"ingress\" {\n  type              = \"ingress\"\n  from_port         = \"3306\"\n  to_port           = \"3306\"\n  protocol          = \"tcp\"\n  cidr_blocks       = [\"${aws_vpc.web_vpc.cidr_block}\"]\n  security_group_id = aws_security_group.default.id\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure every security groups rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 145, "endLine": 152, "snippet": {"text": "resource \"aws_security_group_rule\" \"egress\" {\n  type              = \"egress\"\n  from_port         = 0\n  to_port           = 0\n  protocol          = \"-1\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n  security_group_id = \"${aws_security_group.default.id}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_79", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 243, "endLine": 413, "snippet": {"text": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_126", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Ensure that detailed monitoring is enabled for EC2 instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 243, "endLine": 413, "snippet": {"text": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_135", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Ensure that EC2 is EBS optimized"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 243, "endLine": 413, "snippet": {"text": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_8", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/db-app.tf"}, "region": {"startLine": 243, "endLine": 413, "snippet": {"text": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_79", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 1, "endLine": 32, "snippet": {"text": "resource \"aws_instance\" \"web_host\" {\n  # ec2 have plain text secrets in user data\n  ami           = \"${var.ami}\"\n  instance_type = \"t2.nano\"\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\nsudo apt-get update\nsudo apt-get install -y apache2\nsudo systemctl start apache2\nsudo systemctl enable apache2\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA\nexport AWS_SECRET_ACCESS_KEY=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\nexport AWS_DEFAULT_REGION=us-west-2\necho \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ec2\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"347af3cd-4f70-4632-aca3-4d5e30ffc0b6\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_46", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Ensure no hard-coded secrets exist in EC2 user data"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 1, "endLine": 32, "snippet": {"text": "resource \"aws_instance\" \"web_host\" {\n  # ec2 have plain text secrets in user data\n  ami           = \"${var.ami}\"\n  instance_type = \"t2.nano\"\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\nsudo apt-get update\nsudo apt-get install -y apache2\nsudo systemctl start apache2\nsudo systemctl enable apache2\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA\nexport AWS_SECRET_ACCESS_KEY=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\nexport AWS_DEFAULT_REGION=us-west-2\necho \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ec2\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"347af3cd-4f70-4632-aca3-4d5e30ffc0b6\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_126", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Ensure that detailed monitoring is enabled for EC2 instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 1, "endLine": 32, "snippet": {"text": "resource \"aws_instance\" \"web_host\" {\n  # ec2 have plain text secrets in user data\n  ami           = \"${var.ami}\"\n  instance_type = \"t2.nano\"\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\nsudo apt-get update\nsudo apt-get install -y apache2\nsudo systemctl start apache2\nsudo systemctl enable apache2\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA\nexport AWS_SECRET_ACCESS_KEY=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\nexport AWS_DEFAULT_REGION=us-west-2\necho \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ec2\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"347af3cd-4f70-4632-aca3-4d5e30ffc0b6\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_135", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Ensure that EC2 is EBS optimized"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 1, "endLine": 32, "snippet": {"text": "resource \"aws_instance\" \"web_host\" {\n  # ec2 have plain text secrets in user data\n  ami           = \"${var.ami}\"\n  instance_type = \"t2.nano\"\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\nsudo apt-get update\nsudo apt-get install -y apache2\nsudo systemctl start apache2\nsudo systemctl enable apache2\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA\nexport AWS_SECRET_ACCESS_KEY=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\nexport AWS_DEFAULT_REGION=us-west-2\necho \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ec2\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"347af3cd-4f70-4632-aca3-4d5e30ffc0b6\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_8", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 1, "endLine": 32, "snippet": {"text": "resource \"aws_instance\" \"web_host\" {\n  # ec2 have plain text secrets in user data\n  ami           = \"${var.ami}\"\n  instance_type = \"t2.nano\"\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\nsudo apt-get update\nsudo apt-get install -y apache2\nsudo systemctl start apache2\nsudo systemctl enable apache2\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA\nexport AWS_SECRET_ACCESS_KEY=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\nexport AWS_DEFAULT_REGION=us-west-2\necho \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ec2\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"347af3cd-4f70-4632-aca3-4d5e30ffc0b6\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_189", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Ensure EBS Volume is encrypted by KMS using a customer managed Key (CMK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 34, "endLine": 51, "snippet": {"text": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n  # unencrypted volume\n  availability_zone = \"${var.region}a\"\n  #encrypted         = false  # Setting this causes the volume to be recreated on apply \n  size = 1\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ebs\"\n    }, {\n    git_commit           = \"d3439f0f2af62f6fa3521e14d6c27819ef8f12e1\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:17:26\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"c5509daf-10f0-46af-9e03-41989212521d\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_3", "ruleIndex": 33, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the EBS is securely encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 34, "endLine": 51, "snippet": {"text": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n  # unencrypted volume\n  availability_zone = \"${var.region}a\"\n  #encrypted         = false  # Setting this causes the volume to be recreated on apply \n  size = 1\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ebs\"\n    }, {\n    git_commit           = \"d3439f0f2af62f6fa3521e14d6c27819ef8f12e1\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:17:26\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"c5509daf-10f0-46af-9e03-41989212521d\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_260", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 77, "endLine": 115, "snippet": {"text": "resource \"aws_security_group\" \"web-node\" {\n  # security group is open to the world in SSH port\n  name        = \"${local.resource_prefix.value}-sg\"\n  description = \"${local.resource_prefix.value} Security Group\"\n  vpc_id      = aws_vpc.web_vpc.id\n\n  ingress {\n    from_port = 80\n    to_port   = 80\n    protocol  = \"tcp\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port = 22\n    to_port   = 22\n    protocol  = \"tcp\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  egress {\n    from_port = 0\n    to_port   = 0\n    protocol  = \"-1\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  depends_on = [aws_vpc.web_vpc]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b7af1b40-64eb-4519-a1a0-ab198db4b193\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_24", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 77, "endLine": 115, "snippet": {"text": "resource \"aws_security_group\" \"web-node\" {\n  # security group is open to the world in SSH port\n  name        = \"${local.resource_prefix.value}-sg\"\n  description = \"${local.resource_prefix.value} Security Group\"\n  vpc_id      = aws_vpc.web_vpc.id\n\n  ingress {\n    from_port = 80\n    to_port   = 80\n    protocol  = \"tcp\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port = 22\n    to_port   = 22\n    protocol  = \"tcp\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  egress {\n    from_port = 0\n    to_port   = 0\n    protocol  = \"-1\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  depends_on = [aws_vpc.web_vpc]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b7af1b40-64eb-4519-a1a0-ab198db4b193\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure every security groups rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 77, "endLine": 115, "snippet": {"text": "resource \"aws_security_group\" \"web-node\" {\n  # security group is open to the world in SSH port\n  name        = \"${local.resource_prefix.value}-sg\"\n  description = \"${local.resource_prefix.value} Security Group\"\n  vpc_id      = aws_vpc.web_vpc.id\n\n  ingress {\n    from_port = 80\n    to_port   = 80\n    protocol  = \"tcp\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port = 22\n    to_port   = 22\n    protocol  = \"tcp\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  egress {\n    from_port = 0\n    to_port   = 0\n    protocol  = \"-1\"\n    cidr_blocks = [\n    \"0.0.0.0/0\"]\n  }\n  depends_on = [aws_vpc.web_vpc]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b7af1b40-64eb-4519-a1a0-ab198db4b193\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 135, "endLine": 153, "snippet": {"text": "resource \"aws_subnet\" \"web_subnet\" {\n  vpc_id                  = aws_vpc.web_vpc.id\n  cidr_block              = \"172.16.10.0/24\"\n  availability_zone       = \"${var.region}a\"\n  map_public_ip_on_launch = true\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-subnet\"\n    }, {\n    git_commit           = \"6e62522d2ab8f63740e53752b84a6e99cd65696a\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:16:31\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0345f650-d280-4ca8-86c9-c71c38c0eda8\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 155, "endLine": 173, "snippet": {"text": "resource \"aws_subnet\" \"web_subnet2\" {\n  vpc_id                  = aws_vpc.web_vpc.id\n  cidr_block              = \"172.16.11.0/24\"\n  availability_zone       = \"${var.region}b\"\n  map_public_ip_on_launch = true\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-subnet2\"\n    }, {\n    git_commit           = \"6e62522d2ab8f63740e53752b84a6e99cd65696a\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:16:31\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"224af03a-00e0-4981-be30-14965833c2db\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_163", "ruleIndex": 37, "level": "error", "attachments": [], "message": {"text": "Ensure ECR image scanning on push is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ecr.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource aws_ecr_repository \"repository\" {\n  name                 = \"${local.resource_prefix.value}-repository\"\n  image_tag_mutability = \"MUTABLE\"\n\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-repository\"\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/ecr.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7a3ec657-fa54-4aa2-8467-5d08d6c90bc2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_136", "ruleIndex": 38, "level": "error", "attachments": [], "message": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ecr.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource aws_ecr_repository \"repository\" {\n  name                 = \"${local.resource_prefix.value}-repository\"\n  image_tag_mutability = \"MUTABLE\"\n\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-repository\"\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/ecr.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7a3ec657-fa54-4aa2-8467-5d08d6c90bc2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_51", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Ensure ECR Image Tags are immutable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ecr.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource aws_ecr_repository \"repository\" {\n  name                 = \"${local.resource_prefix.value}-repository\"\n  image_tag_mutability = \"MUTABLE\"\n\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-repository\"\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/ecr.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7a3ec657-fa54-4aa2-8467-5d08d6c90bc2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/eks.tf"}, "region": {"startLine": 62, "endLine": 88, "snippet": {"text": "resource aws_subnet \"eks_subnet1\" {\n  vpc_id                  = aws_vpc.eks_vpc.id\n  cidr_block              = \"10.10.10.0/24\"\n  availability_zone       = \"${var.region}a\"\n  map_public_ip_on_launch = true\n  tags = merge({\n    Name                                            = \"${local.resource_prefix.value}-eks-subnet\"\n    \"kubernetes.io/cluster/${local.eks_name.value}\" = \"shared\"\n    }, {\n    git_commit                                       = \"6e62522d2ab8f63740e53752b84a6e99cd65696a\"\n    git_file                                         = \"terraform/aws/eks.tf\"\n    git_last_modified_at                             = \"2021-05-02 11:16:31\"\n    git_last_modified_by                             = \"nimrodkor@gmail.com\"\n    git_modifiers                                    = \"nimrodkor\"\n    git_org                                          = \"bridgecrewio\"\n    git_repo                                         = \"terragoat\"\n    \"kubernetes.io/cluster/$${local.eks_name.value}\" = \"shared\"\n    yor_trace                                        = \"1fb4fa23-a5d6-4d6a-b7dc-88749383f48d\"\n    }, {\n    \"kubernetes.io/cluster/$$${local.eks_name.value}\" = \"shared\"\n    \"kubernetes.io/cluster/$${local.eks_name.value}\"  = \"shared\"\n    }, {\n    \"kubernetes.io/cluster/$$$${local.eks_name.value}\" = \"shared\"\n    \"kubernetes.io/cluster/$$${local.eks_name.value}\"  = \"shared\"\n    \"kubernetes.io/cluster/$${local.eks_name.value}\"   = \"shared\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/eks.tf"}, "region": {"startLine": 90, "endLine": 116, "snippet": {"text": "resource aws_subnet \"eks_subnet2\" {\n  vpc_id                  = aws_vpc.eks_vpc.id\n  cidr_block              = \"10.10.11.0/24\"\n  availability_zone       = \"${var.region}b\"\n  map_public_ip_on_launch = true\n  tags = merge({\n    Name                                            = \"${local.resource_prefix.value}-eks-subnet2\"\n    \"kubernetes.io/cluster/${local.eks_name.value}\" = \"shared\"\n    }, {\n    git_commit                                       = \"6e62522d2ab8f63740e53752b84a6e99cd65696a\"\n    git_file                                         = \"terraform/aws/eks.tf\"\n    git_last_modified_at                             = \"2021-05-02 11:16:31\"\n    git_last_modified_by                             = \"nimrodkor@gmail.com\"\n    git_modifiers                                    = \"nimrodkor\"\n    git_org                                          = \"bridgecrewio\"\n    git_repo                                         = \"terragoat\"\n    \"kubernetes.io/cluster/$${local.eks_name.value}\" = \"shared\"\n    yor_trace                                        = \"9ce04af2-5321-4e6c-a262-e4d7c1f69525\"\n    }, {\n    \"kubernetes.io/cluster/$$${local.eks_name.value}\" = \"shared\"\n    \"kubernetes.io/cluster/$${local.eks_name.value}\"  = \"shared\"\n    }, {\n    \"kubernetes.io/cluster/$$$${local.eks_name.value}\" = \"shared\"\n    \"kubernetes.io/cluster/$$${local.eks_name.value}\"  = \"shared\"\n    \"kubernetes.io/cluster/$${local.eks_name.value}\"   = \"shared\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_39", "ruleIndex": 40, "level": "error", "attachments": [], "message": {"text": "Ensure Amazon EKS public endpoint disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/eks.tf"}, "region": {"startLine": 118, "endLine": 141, "snippet": {"text": "resource aws_eks_cluster \"eks_cluster\" {\n  name     = local.eks_name.value\n  role_arn = \"${aws_iam_role.iam_for_eks.arn}\"\n\n  vpc_config {\n    endpoint_private_access = true\n    subnet_ids              = [\"${aws_subnet.eks_subnet1.id}\", \"${aws_subnet.eks_subnet2.id}\"]\n  }\n\n  depends_on = [\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSClusterPolicy\",\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSServicePolicy\",\n  ]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/eks.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7fa14261-c18d-4fa2-aec4-746f6e64d2d3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_58", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/eks.tf"}, "region": {"startLine": 118, "endLine": 141, "snippet": {"text": "resource aws_eks_cluster \"eks_cluster\" {\n  name     = local.eks_name.value\n  role_arn = \"${aws_iam_role.iam_for_eks.arn}\"\n\n  vpc_config {\n    endpoint_private_access = true\n    subnet_ids              = [\"${aws_subnet.eks_subnet1.id}\", \"${aws_subnet.eks_subnet2.id}\"]\n  }\n\n  depends_on = [\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSClusterPolicy\",\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSServicePolicy\",\n  ]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/eks.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7fa14261-c18d-4fa2-aec4-746f6e64d2d3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_38", "ruleIndex": 42, "level": "error", "attachments": [], "message": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/eks.tf"}, "region": {"startLine": 118, "endLine": 141, "snippet": {"text": "resource aws_eks_cluster \"eks_cluster\" {\n  name     = local.eks_name.value\n  role_arn = \"${aws_iam_role.iam_for_eks.arn}\"\n\n  vpc_config {\n    endpoint_private_access = true\n    subnet_ids              = [\"${aws_subnet.eks_subnet1.id}\", \"${aws_subnet.eks_subnet2.id}\"]\n  }\n\n  depends_on = [\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSClusterPolicy\",\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSServicePolicy\",\n  ]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/eks.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7fa14261-c18d-4fa2-aec4-746f6e64d2d3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_37", "ruleIndex": 43, "level": "error", "attachments": [], "message": {"text": "Ensure Amazon EKS control plane logging enabled for all log types"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/eks.tf"}, "region": {"startLine": 118, "endLine": 141, "snippet": {"text": "resource aws_eks_cluster \"eks_cluster\" {\n  name     = local.eks_name.value\n  role_arn = \"${aws_iam_role.iam_for_eks.arn}\"\n\n  vpc_config {\n    endpoint_private_access = true\n    subnet_ids              = [\"${aws_subnet.eks_subnet1.id}\", \"${aws_subnet.eks_subnet2.id}\"]\n  }\n\n  depends_on = [\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSClusterPolicy\",\n    \"aws_iam_role_policy_attachment.policy_attachment-AmazonEKSServicePolicy\",\n  ]\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/eks.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"7fa14261-c18d-4fa2-aec4-746f6e64d2d3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_127", "ruleIndex": 44, "level": "error", "attachments": [], "message": {"text": "Ensure that Elastic Load Balancer(s) uses SSL certificates provided by AWS Certificate Manager"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/elb.tf"}, "region": {"startLine": 2, "endLine": 40, "snippet": {"text": "resource \"aws_elb\" \"weblb\" {\n  name = \"weblb-terraform-elb\"\n\n  listener {\n    instance_port     = 8000\n    instance_protocol = \"http\"\n    lb_port           = 80\n    lb_protocol       = \"http\"\n  }\n\n  health_check {\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n    timeout             = 3\n    target              = \"HTTP:8000/\"\n    interval            = 30\n  }\n\n  subnets                     = [aws_subnet.web_subnet.id]\n  security_groups             = [aws_security_group.web-node.id]\n  instances                   = [aws_instance.web_host.id]\n  cross_zone_load_balancing   = true\n  idle_timeout                = 400\n  connection_draining         = true\n  connection_draining_timeout = 400\n\n  tags = merge({\n    Name = \"foobar-terraform-elb\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/elb.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b4a83ce9-9a45-43b4-b6d9-1783c282f702\"\n  })\n}"}}}}]}, {"ruleId": "CKV_AWS_92", "ruleIndex": 45, "level": "error", "attachments": [], "message": {"text": "Ensure the ELB has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/elb.tf"}, "region": {"startLine": 2, "endLine": 40, "snippet": {"text": "resource \"aws_elb\" \"weblb\" {\n  name = \"weblb-terraform-elb\"\n\n  listener {\n    instance_port     = 8000\n    instance_protocol = \"http\"\n    lb_port           = 80\n    lb_protocol       = \"http\"\n  }\n\n  health_check {\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n    timeout             = 3\n    target              = \"HTTP:8000/\"\n    interval            = 30\n  }\n\n  subnets                     = [aws_subnet.web_subnet.id]\n  security_groups             = [aws_security_group.web-node.id]\n  instances                   = [aws_instance.web_host.id]\n  cross_zone_load_balancing   = true\n  idle_timeout                = 400\n  connection_draining         = true\n  connection_draining_timeout = 400\n\n  tags = merge({\n    Name = \"foobar-terraform-elb\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/elb.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b4a83ce9-9a45-43b4-b6d9-1783c282f702\"\n  })\n}"}}}}]}, {"ruleId": "CKV_AWS_137", "ruleIndex": 46, "level": "error", "attachments": [], "message": {"text": "Ensure that Elasticsearch is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_317", "ruleIndex": 47, "level": "error", "attachments": [], "message": {"text": "Ensure Elasticsearch Domain Audit Logging is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_228", "ruleIndex": 48, "level": "error", "attachments": [], "message": {"text": "Verify Elasticsearch domain is using an up to date TLS policy"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_5", "ruleIndex": 49, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the Elasticsearch is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_247", "ruleIndex": 50, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the Elasticsearch is encrypted with a CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_248", "ruleIndex": 51, "level": "error", "attachments": [], "message": {"text": "Ensure that Elasticsearch is not using the default Security Group"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_84", "ruleIndex": 52, "level": "error", "attachments": [], "message": {"text": "Ensure Elasticsearch Domain Logging is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_318", "ruleIndex": 53, "level": "error", "attachments": [], "message": {"text": "Ensure Elasticsearch domains are configured with at least three dedicated master nodes for HA"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 1, "endLine": 28, "snippet": {"text": "resource \"aws_elasticsearch_domain\" \"monitoring-framework\" {\n  domain_name           = \"tg-${var.environment}-es\"\n  elasticsearch_version = \"2.3\"\n\n  cluster_config {\n    instance_type            = \"t2.small.elasticsearch\"\n    instance_count           = 1\n    dedicated_master_enabled = false\n    dedicated_master_type    = \"m4.large.elasticsearch\"\n    dedicated_master_count   = 1\n  }\n\n\n  ebs_options {\n    ebs_enabled = true\n    volume_size = 30\n  }\n  tags = {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/es.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"95131dec-d7c9-49bb-9aff-eb0e2736603b\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_111", "ruleIndex": 54, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow write access without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 30, "endLine": 39, "snippet": {"text": "data aws_iam_policy_document \"policy\" {\n  statement {\n    actions = [\"es:*\"]\n    principals {\n      type        = \"AWS\"\n      identifiers = [\"*\"]\n    }\n    resources = [\"*\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_109", "ruleIndex": 55, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow permissions management / resource exposure without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 30, "endLine": 39, "snippet": {"text": "data aws_iam_policy_document \"policy\" {\n  statement {\n    actions = [\"es:*\"]\n    principals {\n      type        = \"AWS\"\n      identifiers = [\"*\"]\n    }\n    resources = [\"*\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_283", "ruleIndex": 56, "level": "error", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow ALL or any AWS principal permissions to the resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/es.tf"}, "region": {"startLine": 30, "endLine": 39, "snippet": {"text": "data aws_iam_policy_document \"policy\" {\n  statement {\n    actions = [\"es:*\"]\n    principals {\n      type        = \"AWS\"\n      identifiers = [\"*\"]\n    }\n    resources = [\"*\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_273", "ruleIndex": 57, "level": "error", "attachments": [], "message": {"text": "Ensure access is controlled through SSO and not AWS IAM defined users"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/iam.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"aws_iam_user\" \"user\" {\n  name          = \"${local.resource_prefix.value}-user\"\n  force_destroy = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-user\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/iam.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9b45b298-c1ea-426a-9644-610780021eaa\"\n  })\n\n}\n"}}}}]}, {"ruleId": "CKV_AWS_7", "ruleIndex": 58, "level": "error", "attachments": [], "message": {"text": "Ensure rotation for customer created CMKs is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/kms.tf"}, "region": {"startLine": 1, "endLine": 16, "snippet": {"text": "resource \"aws_kms_key\" \"logs_key\" {\n  # key does not have rotation enabled\n  description = \"${local.resource_prefix.value}-logs bucket key\"\n\n  deletion_window_in_days = 7\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/kms.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd8fa2a7-4868-4cd1-993d-da4644808ce5\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_50", "ruleIndex": 59, "level": "error", "attachments": [], "message": {"text": "X-ray tracing is enabled for Lambda"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 60, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_116", "ruleIndex": 61, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_173", "ruleIndex": 62, "level": "error", "attachments": [], "message": {"text": "Check encryption settings for Lambda environmental variable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_272", "ruleIndex": 63, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_45", "ruleIndex": 64, "level": "error", "attachments": [], "message": {"text": "Ensure no hard-coded secrets exist in lambda environment"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrX**********************************\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 65, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 32, "endLine": 59, "snippet": {"text": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AWS_101", "ruleIndex": 66, "level": "error", "attachments": [], "message": {"text": "Ensure Neptune logging is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/neptune.tf"}, "region": {"startLine": 1, "endLine": 20, "snippet": {"text": "resource \"aws_neptune_cluster\" \"default\" {\n  cluster_identifier                  = var.neptune-dbname\n  engine                              = \"neptune\"\n  backup_retention_period             = 5\n  preferred_backup_window             = \"07:00-09:00\"\n  skip_final_snapshot                 = true\n  iam_database_authentication_enabled = false\n  apply_immediately                   = true\n  storage_encrypted                   = false\n  tags = {\n    git_commit           = \"aa8fd16fd94cccf6af206e2f0922b5558f8ac514\"\n    git_file             = \"terraform/aws/neptune.tf\"\n    git_last_modified_at = \"2020-08-21 19:14:35\"\n    git_last_modified_by = \"matt@bridgecrew.io\"\n    git_modifiers        = \"matt\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0d4cbb85-73ed-4ca0-b1da-296e4185f34e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_347", "ruleIndex": 67, "level": "error", "attachments": [], "message": {"text": "Ensure Neptune is encrypted by KMS using a customer managed Key (CMK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/neptune.tf"}, "region": {"startLine": 1, "endLine": 20, "snippet": {"text": "resource \"aws_neptune_cluster\" \"default\" {\n  cluster_identifier                  = var.neptune-dbname\n  engine                              = \"neptune\"\n  backup_retention_period             = 5\n  preferred_backup_window             = \"07:00-09:00\"\n  skip_final_snapshot                 = true\n  iam_database_authentication_enabled = false\n  apply_immediately                   = true\n  storage_encrypted                   = false\n  tags = {\n    git_commit           = \"aa8fd16fd94cccf6af206e2f0922b5558f8ac514\"\n    git_file             = \"terraform/aws/neptune.tf\"\n    git_last_modified_at = \"2020-08-21 19:14:35\"\n    git_last_modified_by = \"matt@bridgecrew.io\"\n    git_modifiers        = \"matt\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0d4cbb85-73ed-4ca0-b1da-296e4185f34e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_44", "ruleIndex": 68, "level": "error", "attachments": [], "message": {"text": "Ensure Neptune storage is securely encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/neptune.tf"}, "region": {"startLine": 1, "endLine": 20, "snippet": {"text": "resource \"aws_neptune_cluster\" \"default\" {\n  cluster_identifier                  = var.neptune-dbname\n  engine                              = \"neptune\"\n  backup_retention_period             = 5\n  preferred_backup_window             = \"07:00-09:00\"\n  skip_final_snapshot                 = true\n  iam_database_authentication_enabled = false\n  apply_immediately                   = true\n  storage_encrypted                   = false\n  tags = {\n    git_commit           = \"aa8fd16fd94cccf6af206e2f0922b5558f8ac514\"\n    git_file             = \"terraform/aws/neptune.tf\"\n    git_last_modified_at = \"2020-08-21 19:14:35\"\n    git_last_modified_by = \"matt@bridgecrew.io\"\n    git_modifiers        = \"matt\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0d4cbb85-73ed-4ca0-b1da-296e4185f34e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_279", "ruleIndex": 69, "level": "error", "attachments": [], "message": {"text": "Ensure Neptune snapshot is securely encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/neptune.tf"}, "region": {"startLine": 41, "endLine": 44, "snippet": {"text": "resource \"aws_neptune_cluster_snapshot\" \"default\" {\n  db_cluster_identifier          = aws_neptune_cluster.default.id\n  db_cluster_snapshot_identifier = \"resourcetestsnapshot1\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_280", "ruleIndex": 70, "level": "error", "attachments": [], "message": {"text": "Ensure Neptune snapshot is encrypted by KMS using a customer managed Key (CMK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/neptune.tf"}, "region": {"startLine": 41, "endLine": 44, "snippet": {"text": "resource \"aws_neptune_cluster_snapshot\" \"default\" {\n  db_cluster_identifier          = aws_neptune_cluster.default.id\n  db_cluster_snapshot_identifier = \"resourcetestsnapshot1\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_41", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure no hard coded AWS access key and secret key exists in provider"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/providers.tf"}, "region": {"startLine": 7, "endLine": 12, "snippet": {"text": "provider \"aws\" {\n  alias      = \"plain_text_access_keys_provider\"\n  region     = \"us-west-1\"\n  access_key = \"AKIAI***************\"\n  secret_key = \"wJalrX**********************************\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_133", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances has backup policy"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 17, "endLine": 31, "snippet": {"text": "resource \"aws_rds_cluster\" \"app2-rds-cluster\" {\n  cluster_identifier      = \"app2-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 1\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d33c9292-952b-4c1f-9973-b6dbad519461\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 33, "endLine": 47, "snippet": {"text": "resource \"aws_rds_cluster\" \"app3-rds-cluster\" {\n  cluster_identifier      = \"app3-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2a8584b1-7e9d-4739-8e37-366620c92027\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 49, "endLine": 63, "snippet": {"text": "resource \"aws_rds_cluster\" \"app4-rds-cluster\" {\n  cluster_identifier      = \"app4-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"284aaeed-fd3f-4b7a-b5f8-61a8457f4d83\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 65, "endLine": 79, "snippet": {"text": "resource \"aws_rds_cluster\" \"app5-rds-cluster\" {\n  cluster_identifier      = \"app5-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0b2bea23-5ca5-4bd1-956e-b9ed978daadf\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 81, "endLine": 95, "snippet": {"text": "resource \"aws_rds_cluster\" \"app6-rds-cluster\" {\n  cluster_identifier      = \"app6-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 15\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"fcffb961-d859-4be5-997f-d51b50665ada\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 97, "endLine": 111, "snippet": {"text": "resource \"aws_rds_cluster\" \"app7-rds-cluster\" {\n  cluster_identifier      = \"app7-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ebc2ac20-23a3-4518-a7ef-3a102b003ab6\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 113, "endLine": 128, "snippet": {"text": "resource \"aws_rds_cluster\" \"app8-rds-cluster\" {\n  cluster_identifier      = \"app8-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"af643747-0967-4251-8645-3b54882c2507\"\n\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_313", "ruleIndex": 71, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster configured to copy tags to snapshots"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_96", "ruleIndex": 72, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in Aurora is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_162", "ruleIndex": 73, "level": "error", "attachments": [], "message": {"text": "Ensure RDS cluster has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_326", "ruleIndex": 74, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Aurora Clusters have backtracking enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_327", "ruleIndex": 75, "level": "error", "attachments": [], "message": {"text": "Ensure RDS Clusters are encrypted using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_325", "ruleIndex": 76, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster audit logging is enabled for MySQL engine"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_139", "ruleIndex": 77, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS clusters have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_324", "ruleIndex": 78, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS Cluster log capture is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/rds.tf"}, "region": {"startLine": 130, "endLine": 144, "snippet": {"text": "resource \"aws_rds_cluster\" \"app9-rds-cluster\" {\n  cluster_identifier      = \"app9-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 25\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a0c98536-c751-4743-92f1-a106ce750249\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_186", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/s3.tf"}, "region": {"startLine": 23, "endLine": 40, "snippet": {"text": "resource \"aws_s3_bucket_object\" \"data_object\" {\n  bucket = aws_s3_bucket.data.id\n  key    = \"customer-master.xlsx\"\n  source = \"resources/customer-master.xlsx\"\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-customer-master\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/s3.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a7f01cc7-63c2-41a8-8555-6665e5e39a64\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_170", "ruleIndex": 79, "level": "error", "attachments": [], "message": {"text": "Ensure that AKS use the Paid Sku for its SLA"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_172", "ruleIndex": 80, "level": "error", "attachments": [], "message": {"text": "Ensure autorotation of Secrets Store CSI Driver secrets for AKS clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_8", "ruleIndex": 81, "level": "error", "attachments": [], "message": {"text": "Ensure Kubernetes Dashboard is disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_141", "ruleIndex": 82, "level": "error", "attachments": [], "message": {"text": "Ensure AKS local admin account is disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_115", "ruleIndex": 83, "level": "error", "attachments": [], "message": {"text": "Ensure that AKS enables private clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_117", "ruleIndex": 84, "level": "error", "attachments": [], "message": {"text": "Ensure that AKS uses disk encryption set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_7", "ruleIndex": 85, "level": "error", "attachments": [], "message": {"text": "Ensure AKS cluster has Network Policy configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_116", "ruleIndex": 86, "level": "error", "attachments": [], "message": {"text": "Ensure that AKS uses Azure Policies Add-on"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_6", "ruleIndex": 87, "level": "error", "attachments": [], "message": {"text": "Ensure AKS has an API Server Authorized IP Ranges enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_171", "ruleIndex": 88, "level": "error", "attachments": [], "message": {"text": "Ensure AKS cluster upgrade channel is chosen"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_168", "ruleIndex": 89, "level": "error", "attachments": [], "message": {"text": "Ensure Azure Kubernetes Cluster (AKS) nodes should use a minimum number of 50 pods."}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_4", "ruleIndex": 90, "level": "error", "attachments": [], "message": {"text": "Ensure AKS logging to Azure Monitoring is Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_5", "ruleIndex": 91, "level": "error", "attachments": [], "message": {"text": "Ensure RBAC is enabled on AKS clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/aks.tf"}, "region": {"startLine": 1, "endLine": 35, "snippet": {"text": "resource azurerm_kubernetes_cluster \"k8s_cluster\" {\n  dns_prefix          = \"terragoat-${var.environment}\"\n  location            = var.location\n  name                = \"terragoat-aks-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n  identity {\n    type = \"SystemAssigned\"\n  }\n  default_node_pool {\n    name       = \"default\"\n    vm_size    = \"Standard_D2_v2\"\n    node_count = 2\n  }\n  addon_profile {\n    oms_agent {\n      enabled = false\n    }\n    kube_dashboard {\n      enabled = true\n    }\n  }\n  role_based_access_control {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/aks.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"6103d111-864e-42e5-899c-1864de281fd1\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_71", "ruleIndex": 92, "level": "error", "attachments": [], "message": {"text": "Ensure that Managed identity provider is enabled for app services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_63", "ruleIndex": 93, "level": "error", "attachments": [], "message": {"text": "Ensure that App service enables HTTP logging"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_213", "ruleIndex": 94, "level": "error", "attachments": [], "message": {"text": "Ensure that App Service configures health check"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_65", "ruleIndex": 95, "level": "error", "attachments": [], "message": {"text": "Ensure that App service enables detailed error messages"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_15", "ruleIndex": 96, "level": "error", "attachments": [], "message": {"text": "Ensure web app is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_17", "ruleIndex": 97, "level": "error", "attachments": [], "message": {"text": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_14", "ruleIndex": 98, "level": "error", "attachments": [], "message": {"text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_88", "ruleIndex": 99, "level": "error", "attachments": [], "message": {"text": "Ensure that app services use Azure Files"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_16", "ruleIndex": 100, "level": "error", "attachments": [], "message": {"text": "Ensure that Register with Azure Active Directory is enabled on App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_78", "ruleIndex": 101, "level": "error", "attachments": [], "message": {"text": "Ensure FTP deployments are disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_18", "ruleIndex": 102, "level": "error", "attachments": [], "message": {"text": "Ensure that 'HTTP Version' is the latest if used to run the web app"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_66", "ruleIndex": 103, "level": "error", "attachments": [], "message": {"text": "Ensure that App service enables failed request tracing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_13", "ruleIndex": 104, "level": "error", "attachments": [], "message": {"text": "Ensure App Service Authentication is set on Azure App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 22, "endLine": 41, "snippet": {"text": "resource azurerm_app_service \"app-service1\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = false\n  site_config {\n    min_tls_version = \"1.1\"\n  }\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"13be096d-c599-46e5-bf54-51c6e9732858\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_71", "ruleIndex": 92, "level": "error", "attachments": [], "message": {"text": "Ensure that Managed identity provider is enabled for app services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_63", "ruleIndex": 93, "level": "error", "attachments": [], "message": {"text": "Ensure that App service enables HTTP logging"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_213", "ruleIndex": 94, "level": "error", "attachments": [], "message": {"text": "Ensure that App Service configures health check"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_65", "ruleIndex": 95, "level": "error", "attachments": [], "message": {"text": "Ensure that App service enables detailed error messages"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_17", "ruleIndex": 97, "level": "error", "attachments": [], "message": {"text": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_88", "ruleIndex": 99, "level": "error", "attachments": [], "message": {"text": "Ensure that app services use Azure Files"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_16", "ruleIndex": 100, "level": "error", "attachments": [], "message": {"text": "Ensure that Register with Azure Active Directory is enabled on App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_78", "ruleIndex": 101, "level": "error", "attachments": [], "message": {"text": "Ensure FTP deployments are disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_18", "ruleIndex": 102, "level": "error", "attachments": [], "message": {"text": "Ensure that 'HTTP Version' is the latest if used to run the web app"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_66", "ruleIndex": 103, "level": "error", "attachments": [], "message": {"text": "Ensure that App service enables failed request tracing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_13", "ruleIndex": 104, "level": "error", "attachments": [], "message": {"text": "Ensure App Service Authentication is set on Azure App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/app_service.tf"}, "region": {"startLine": 43, "endLine": 63, "snippet": {"text": "resource azurerm_app_service \"app-service2\" {\n  app_service_plan_id = azurerm_app_service_plan.example.id\n  location            = var.location\n  name                = \"terragoat-app-service-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name = azurerm_resource_group.example.name\n  https_only          = true\n\n  auth_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/app_service.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"ec8295ab-af68-4cff-b0f1-b0cf5eaf1b75\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_178", "ruleIndex": 105, "level": "error", "attachments": [], "message": {"text": "Ensure linux VM enables SSH with keys for secure communication"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/instance.tf"}, "region": {"startLine": 9, "endLine": 42, "snippet": {"text": "resource azurerm_linux_virtual_machine \"linux_machine\" {\n  admin_username                  = \"terragoat-linux\"\n  admin_password                  = random_string.password.result\n  location                        = var.location\n  name                            = \"terragoat-linux\"\n  network_interface_ids           = [azurerm_network_interface.ni_linux.id]\n  resource_group_name             = azurerm_resource_group.example.name\n  size                            = \"Standard_F2\"\n  disable_password_authentication = false\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  tags = merge({\n    terragoat   = true\n    environment = var.environment\n    }, {\n    git_commit           = \"de3bb777f967989c2c3332faea16cb614c55ccc9\"\n    git_file             = \"terraform/azure/instance.tf\"\n    git_last_modified_at = \"2020-06-17 15:48:15\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"736ef713-51b8-4178-ad69-406be81f6ef2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_50", "ruleIndex": 106, "level": "error", "attachments": [], "message": {"text": "Ensure Virtual Machine Extensions are not Installed"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/instance.tf"}, "region": {"startLine": 9, "endLine": 42, "snippet": {"text": "resource azurerm_linux_virtual_machine \"linux_machine\" {\n  admin_username                  = \"terragoat-linux\"\n  admin_password                  = random_string.password.result\n  location                        = var.location\n  name                            = \"terragoat-linux\"\n  network_interface_ids           = [azurerm_network_interface.ni_linux.id]\n  resource_group_name             = azurerm_resource_group.example.name\n  size                            = \"Standard_F2\"\n  disable_password_authentication = false\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  tags = merge({\n    terragoat   = true\n    environment = var.environment\n    }, {\n    git_commit           = \"de3bb777f967989c2c3332faea16cb614c55ccc9\"\n    git_file             = \"terraform/azure/instance.tf\"\n    git_last_modified_at = \"2020-06-17 15:48:15\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"736ef713-51b8-4178-ad69-406be81f6ef2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_149", "ruleIndex": 107, "level": "error", "attachments": [], "message": {"text": "Ensure that Virtual machine does not enable password authentication"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/instance.tf"}, "region": {"startLine": 9, "endLine": 42, "snippet": {"text": "resource azurerm_linux_virtual_machine \"linux_machine\" {\n  admin_username                  = \"terragoat-linux\"\n  admin_password                  = random_string.password.result\n  location                        = var.location\n  name                            = \"terragoat-linux\"\n  network_interface_ids           = [azurerm_network_interface.ni_linux.id]\n  resource_group_name             = azurerm_resource_group.example.name\n  size                            = \"Standard_F2\"\n  disable_password_authentication = false\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  tags = merge({\n    terragoat   = true\n    environment = var.environment\n    }, {\n    git_commit           = \"de3bb777f967989c2c3332faea16cb614c55ccc9\"\n    git_file             = \"terraform/azure/instance.tf\"\n    git_last_modified_at = \"2020-06-17 15:48:15\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"736ef713-51b8-4178-ad69-406be81f6ef2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_1", "ruleIndex": 108, "level": "error", "attachments": [], "message": {"text": "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/instance.tf"}, "region": {"startLine": 9, "endLine": 42, "snippet": {"text": "resource azurerm_linux_virtual_machine \"linux_machine\" {\n  admin_username                  = \"terragoat-linux\"\n  admin_password                  = random_string.password.result\n  location                        = var.location\n  name                            = \"terragoat-linux\"\n  network_interface_ids           = [azurerm_network_interface.ni_linux.id]\n  resource_group_name             = azurerm_resource_group.example.name\n  size                            = \"Standard_F2\"\n  disable_password_authentication = false\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  tags = merge({\n    terragoat   = true\n    environment = var.environment\n    }, {\n    git_commit           = \"de3bb777f967989c2c3332faea16cb614c55ccc9\"\n    git_file             = \"terraform/azure/instance.tf\"\n    git_last_modified_at = \"2020-06-17 15:48:15\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"736ef713-51b8-4178-ad69-406be81f6ef2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_151", "ruleIndex": 109, "level": "error", "attachments": [], "message": {"text": "Ensure Windows VM enables encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/instance.tf"}, "region": {"startLine": 44, "endLine": 77, "snippet": {"text": "resource azurerm_windows_virtual_machine \"windows_machine\" {\n  admin_password        = random_string.password.result\n  admin_username        = \"tg-${var.environment}\"\n  location              = var.location\n  name                  = \"tg-win\"\n  network_interface_ids = [azurerm_network_interface.ni_win.id]\n  resource_group_name   = azurerm_resource_group.example.name\n  size                  = \"Standard_F2\"\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2016-Datacenter\"\n    version   = \"latest\"\n  }\n\n  tags = merge({\n    terragoat   = true\n    environment = var.environment\n    }, {\n    git_commit           = \"de3bb777f967989c2c3332faea16cb614c55ccc9\"\n    git_file             = \"terraform/azure/instance.tf\"\n    git_last_modified_at = \"2020-06-17 15:48:15\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"41938587-bdfc-4234-b941-560f1ae7d6c0\"\n  })\n}"}}}}]}, {"ruleId": "CKV_AZURE_50", "ruleIndex": 106, "level": "error", "attachments": [], "message": {"text": "Ensure Virtual Machine Extensions are not Installed"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/instance.tf"}, "region": {"startLine": 44, "endLine": 77, "snippet": {"text": "resource azurerm_windows_virtual_machine \"windows_machine\" {\n  admin_password        = random_string.password.result\n  admin_username        = \"tg-${var.environment}\"\n  location              = var.location\n  name                  = \"tg-win\"\n  network_interface_ids = [azurerm_network_interface.ni_win.id]\n  resource_group_name   = azurerm_resource_group.example.name\n  size                  = \"Standard_F2\"\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2016-Datacenter\"\n    version   = \"latest\"\n  }\n\n  tags = merge({\n    terragoat   = true\n    environment = var.environment\n    }, {\n    git_commit           = \"de3bb777f967989c2c3332faea16cb614c55ccc9\"\n    git_file             = \"terraform/azure/instance.tf\"\n    git_last_modified_at = \"2020-06-17 15:48:15\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"41938587-bdfc-4234-b941-560f1ae7d6c0\"\n  })\n}"}}}}]}, {"ruleId": "CKV_AZURE_42", "ruleIndex": 110, "level": "error", "attachments": [], "message": {"text": "Ensure the key vault is recoverable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 1, "endLine": 31, "snippet": {"text": "resource \"azurerm_key_vault\" \"example\" {\n  name                = \"terragoat-key-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n  sku_name            = \"premium\"\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n    key_permissions = [\n      \"create\",\n      \"get\",\n    ]\n    secret_permissions = [\n      \"set\",\n    ]\n  }\n  tags = merge({\n    environment = var.environment\n    terragoat   = true\n    }, {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"79afeacc-248a-4015-a4fa-76a6a57f06e2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_189", "ruleIndex": 111, "level": "error", "attachments": [], "message": {"text": "Ensure that Azure Key Vault disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 1, "endLine": 31, "snippet": {"text": "resource \"azurerm_key_vault\" \"example\" {\n  name                = \"terragoat-key-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n  sku_name            = \"premium\"\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n    key_permissions = [\n      \"create\",\n      \"get\",\n    ]\n    secret_permissions = [\n      \"set\",\n    ]\n  }\n  tags = merge({\n    environment = var.environment\n    terragoat   = true\n    }, {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"79afeacc-248a-4015-a4fa-76a6a57f06e2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_110", "ruleIndex": 112, "level": "error", "attachments": [], "message": {"text": "Ensure that key vault enables purge protection"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 1, "endLine": 31, "snippet": {"text": "resource \"azurerm_key_vault\" \"example\" {\n  name                = \"terragoat-key-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n  sku_name            = \"premium\"\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n    key_permissions = [\n      \"create\",\n      \"get\",\n    ]\n    secret_permissions = [\n      \"set\",\n    ]\n  }\n  tags = merge({\n    environment = var.environment\n    terragoat   = true\n    }, {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"79afeacc-248a-4015-a4fa-76a6a57f06e2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_109", "ruleIndex": 113, "level": "error", "attachments": [], "message": {"text": "Ensure that key vault allows firewall rules settings"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 1, "endLine": 31, "snippet": {"text": "resource \"azurerm_key_vault\" \"example\" {\n  name                = \"terragoat-key-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n  sku_name            = \"premium\"\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n    key_permissions = [\n      \"create\",\n      \"get\",\n    ]\n    secret_permissions = [\n      \"set\",\n    ]\n  }\n  tags = merge({\n    environment = var.environment\n    terragoat   = true\n    }, {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"79afeacc-248a-4015-a4fa-76a6a57f06e2\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_40", "ruleIndex": 114, "level": "error", "attachments": [], "message": {"text": "Ensure that the expiration date is set on all keys"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 33, "endLine": 56, "snippet": {"text": "resource \"azurerm_key_vault_key\" \"generated\" {\n  name         = \"terragoat-generated-certificate-${var.environment}\"\n  key_vault_id = azurerm_key_vault.example.id\n  key_type     = \"RSA\"\n  key_size     = 2048\n  key_opts = [\n    \"decrypt\",\n    \"encrypt\",\n    \"sign\",\n    \"unwrapKey\",\n    \"verify\",\n    \"wrapKey\",\n  ]\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"afbc6e13-63d9-4e6c-8914-d58b7744b5dd\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_112", "ruleIndex": 115, "level": "error", "attachments": [], "message": {"text": "Ensure that key vault key is backed by HSM"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 33, "endLine": 56, "snippet": {"text": "resource \"azurerm_key_vault_key\" \"generated\" {\n  name         = \"terragoat-generated-certificate-${var.environment}\"\n  key_vault_id = azurerm_key_vault.example.id\n  key_type     = \"RSA\"\n  key_size     = 2048\n  key_opts = [\n    \"decrypt\",\n    \"encrypt\",\n    \"sign\",\n    \"unwrapKey\",\n    \"verify\",\n    \"wrapKey\",\n  ]\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"afbc6e13-63d9-4e6c-8914-d58b7744b5dd\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_41", "ruleIndex": 116, "level": "error", "attachments": [], "message": {"text": "Ensure that the expiration date is set on all secrets"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 58, "endLine": 72, "snippet": {"text": "resource \"azurerm_key_vault_secret\" \"secret\" {\n  key_vault_id = azurerm_key_vault.example.id\n  name         = \"terragoat-secret-${var.environment}\"\n  value        = random_string.password.result\n  tags = {\n    git_commit           = \"f8ff847bb69370bbe03b3d2b70db586ff6c867fc\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-19 21:16:08\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"40517524-f05d-485b-bfbe-3fa0dbee511e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_114", "ruleIndex": 117, "level": "error", "attachments": [], "message": {"text": "Ensure that key vault secrets have \"content_type\" set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/key_vault.tf"}, "region": {"startLine": 58, "endLine": 72, "snippet": {"text": "resource \"azurerm_key_vault_secret\" \"secret\" {\n  key_vault_id = azurerm_key_vault.example.id\n  name         = \"terragoat-secret-${var.environment}\"\n  value        = random_string.password.result\n  tags = {\n    git_commit           = \"f8ff847bb69370bbe03b3d2b70db586ff6c867fc\"\n    git_file             = \"terraform/azure/key_vault.tf\"\n    git_last_modified_at = \"2020-06-19 21:16:08\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"40517524-f05d-485b-bfbe-3fa0dbee511e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_38", "ruleIndex": 118, "level": "error", "attachments": [], "message": {"text": "Ensure audit profile captures all the activities"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/logging.tf"}, "region": {"startLine": 1, "endLine": 10, "snippet": {"text": "resource azurerm_monitor_log_profile \"logging_profile\" {\n  storage_account_id = azurerm_storage_account.example.id\n  categories         = [\"Action\"]\n  locations          = [var.location]\n  name               = \"terragoat-${var.environment}\"\n  retention_policy {\n    enabled = true\n    days    = 30\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_37", "ruleIndex": 119, "level": "error", "attachments": [], "message": {"text": "Ensure that Activity Log Retention is set 365 days or greater"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/logging.tf"}, "region": {"startLine": 1, "endLine": 10, "snippet": {"text": "resource azurerm_monitor_log_profile \"logging_profile\" {\n  storage_account_id = azurerm_storage_account.example.id\n  categories         = [\"Action\"]\n  locations          = [var.location]\n  name               = \"terragoat-${var.environment}\"\n  retention_policy {\n    enabled = true\n    days    = 30\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_33", "ruleIndex": 120, "level": "error", "attachments": [], "message": {"text": "Ensure Storage logging is enabled for Queue service for read, write and delete requests"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"azurerm_storage_account\" \"security_storage_account\" {\n  name                      = \"securitystorageaccount-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name       = azurerm_resource_group.example.name\n  location                  = azurerm_resource_group.example.location\n  account_tier              = \"Standard\"\n  account_replication_type  = \"LRS\"\n  enable_https_traffic_only = true\n  tags = {\n    git_commit           = \"a1d1c1ce31a1bde6dafa188846d90eca82abe5fd\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 05:32:41\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"4b504d4d-608c-45fe-ae56-807bde6d969f\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_59", "ruleIndex": 121, "level": "error", "attachments": [], "message": {"text": "Ensure that Storage accounts disallow public access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"azurerm_storage_account\" \"security_storage_account\" {\n  name                      = \"securitystorageaccount-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name       = azurerm_resource_group.example.name\n  location                  = azurerm_resource_group.example.location\n  account_tier              = \"Standard\"\n  account_replication_type  = \"LRS\"\n  enable_https_traffic_only = true\n  tags = {\n    git_commit           = \"a1d1c1ce31a1bde6dafa188846d90eca82abe5fd\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 05:32:41\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"4b504d4d-608c-45fe-ae56-807bde6d969f\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_44", "ruleIndex": 122, "level": "error", "attachments": [], "message": {"text": "Ensure Storage Account is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"azurerm_storage_account\" \"security_storage_account\" {\n  name                      = \"securitystorageaccount-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name       = azurerm_resource_group.example.name\n  location                  = azurerm_resource_group.example.location\n  account_tier              = \"Standard\"\n  account_replication_type  = \"LRS\"\n  enable_https_traffic_only = true\n  tags = {\n    git_commit           = \"a1d1c1ce31a1bde6dafa188846d90eca82abe5fd\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 05:32:41\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"4b504d4d-608c-45fe-ae56-807bde6d969f\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_206", "ruleIndex": 123, "level": "error", "attachments": [], "message": {"text": "Ensure that Storage Accounts use replication"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"azurerm_storage_account\" \"security_storage_account\" {\n  name                      = \"securitystorageaccount-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name       = azurerm_resource_group.example.name\n  location                  = azurerm_resource_group.example.location\n  account_tier              = \"Standard\"\n  account_replication_type  = \"LRS\"\n  enable_https_traffic_only = true\n  tags = {\n    git_commit           = \"a1d1c1ce31a1bde6dafa188846d90eca82abe5fd\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 05:32:41\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"4b504d4d-608c-45fe-ae56-807bde6d969f\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_190", "ruleIndex": 124, "level": "error", "attachments": [], "message": {"text": "Ensure that Storage blobs restrict public access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "resource \"azurerm_storage_account\" \"security_storage_account\" {\n  name                      = \"securitystorageaccount-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name       = azurerm_resource_group.example.name\n  location                  = azurerm_resource_group.example.location\n  account_tier              = \"Standard\"\n  account_replication_type  = \"LRS\"\n  enable_https_traffic_only = true\n  tags = {\n    git_commit           = \"a1d1c1ce31a1bde6dafa188846d90eca82abe5fd\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 05:32:41\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"4b504d4d-608c-45fe-ae56-807bde6d969f\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 20, "endLine": 37, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql1\" {\n  name                         = \"terragoat-mssql1-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"54f6cb23-b30a-4f1d-8064-6f777b9b75db\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 20, "endLine": 37, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql1\" {\n  name                         = \"terragoat-mssql1-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"54f6cb23-b30a-4f1d-8064-6f777b9b75db\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 39, "endLine": 56, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql2\" {\n  name                         = \"mssql2-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"096d2cf2-6d47-41b2-9418-cdedea85e184\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 39, "endLine": 56, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql2\" {\n  name                         = \"mssql2-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"096d2cf2-6d47-41b2-9418-cdedea85e184\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 58, "endLine": 75, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql3\" {\n  name                         = \"mssql3-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"e71d3fb5-addc-481d-ada6-b7432a768de3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 58, "endLine": 75, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql3\" {\n  name                         = \"mssql3-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"e71d3fb5-addc-481d-ada6-b7432a768de3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 77, "endLine": 94, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql4\" {\n  name                         = \"mssql4-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"c3b85724-4f7e-4c63-a17d-3d04239beae8\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 77, "endLine": 94, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql4\" {\n  name                         = \"mssql4-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"c3b85724-4f7e-4c63-a17d-3d04239beae8\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 96, "endLine": 113, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql5\" {\n  name                         = \"mssql5-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0240ca84-acc9-47d9-b491-9e7e359787a1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 96, "endLine": 113, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql5\" {\n  name                         = \"mssql5-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0240ca84-acc9-47d9-b491-9e7e359787a1\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 115, "endLine": 132, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql6\" {\n  name                         = \"mssql6-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"042d15fb-edfa-484b-b65e-3d70c50cdee7\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 115, "endLine": 132, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql6\" {\n  name                         = \"mssql6-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"042d15fb-edfa-484b-b65e-3d70c50cdee7\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_113", "ruleIndex": 125, "level": "error", "attachments": [], "message": {"text": "Ensure that SQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 134, "endLine": 151, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql7\" {\n  name                         = \"mssql7-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"3f1118e1-5067-452e-906f-5123cfc93711\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_52", "ruleIndex": 126, "level": "error", "attachments": [], "message": {"text": "Ensure MSSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 134, "endLine": 151, "snippet": {"text": "resource \"azurerm_mssql_server\" \"mssql7\" {\n  name                         = \"mssql7-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name          = azurerm_resource_group.example.name\n  location                     = azurerm_resource_group.example.location\n  version                      = \"12.0\"\n  administrator_login          = \"missadministrator\"\n  administrator_login_password = \"AdminPassword123!\"\n  tags = {\n    git_commit           = \"c6f8caa51942284d02465518822685897ad90141\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 18:41:19\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"3f1118e1-5067-452e-906f-5123cfc93711\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 153, "endLine": 165, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy1\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql1.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 153, "endLine": 165, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy1\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql1.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 167, "endLine": 179, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy2\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql2.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 167, "endLine": 179, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy2\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql2.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 181, "endLine": 193, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy3\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql3.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 181, "endLine": 193, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy3\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql3.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 195, "endLine": 207, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy4\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql4.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 195, "endLine": 207, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy4\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql4.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 209, "endLine": 220, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy5\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql5.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days = 20\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_26", "ruleIndex": 129, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Send Alerts To' is enabled for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 209, "endLine": 220, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy5\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql5.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days = 20\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 209, "endLine": 220, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy5\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql5.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days = 20\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 222, "endLine": 234, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy6\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql6.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 222, "endLine": 234, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy6\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql6.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 236, "endLine": 248, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy7\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql7.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/mssql.tf"}, "region": {"startLine": 236, "endLine": 248, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"alertpolicy7\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.mssql7.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.security_storage_account.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.security_storage_account.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days  = 20\n  email_addresses = [\"securityengineer@bridgecrew.io\"]\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_10", "ruleIndex": 130, "level": "error", "attachments": [], "message": {"text": "Ensure that SSH access is restricted from the internet"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/networking.tf"}, "region": {"startLine": 69, "endLine": 107, "snippet": {"text": "resource azurerm_network_security_group \"bad_sg\" {\n  location            = var.location\n  name                = \"terragoat-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n\n  security_rule {\n    access                     = \"Allow\"\n    direction                  = \"Inbound\"\n    name                       = \"AllowSSH\"\n    priority                   = 200\n    protocol                   = \"TCP\"\n    source_address_prefix      = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22-22\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    access                     = \"Allow\"\n    direction                  = \"Inbound\"\n    name                       = \"AllowRDP\"\n    priority                   = 300\n    protocol                   = \"TCP\"\n    source_address_prefix      = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"3389-3389\"\n    destination_address_prefix = \"*\"\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/networking.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1a591ba4-d969-4572-9704-87b5c55c0ba3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_9", "ruleIndex": 131, "level": "error", "attachments": [], "message": {"text": "Ensure that RDP access is restricted from the internet"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/networking.tf"}, "region": {"startLine": 69, "endLine": 107, "snippet": {"text": "resource azurerm_network_security_group \"bad_sg\" {\n  location            = var.location\n  name                = \"terragoat-${var.environment}\"\n  resource_group_name = azurerm_resource_group.example.name\n\n  security_rule {\n    access                     = \"Allow\"\n    direction                  = \"Inbound\"\n    name                       = \"AllowSSH\"\n    priority                   = 200\n    protocol                   = \"TCP\"\n    source_address_prefix      = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22-22\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    access                     = \"Allow\"\n    direction                  = \"Inbound\"\n    name                       = \"AllowRDP\"\n    priority                   = 300\n    protocol                   = \"TCP\"\n    source_address_prefix      = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"3389-3389\"\n    destination_address_prefix = \"*\"\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/networking.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1a591ba4-d969-4572-9704-87b5c55c0ba3\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_12", "ruleIndex": 132, "level": "error", "attachments": [], "message": {"text": "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/networking.tf"}, "region": {"startLine": 125, "endLine": 145, "snippet": {"text": "resource azurerm_network_watcher_flow_log \"flow_log\" {\n  enabled                   = false\n  network_security_group_id = azurerm_network_security_group.bad_sg.id\n  network_watcher_name      = azurerm_network_watcher.network_watcher.name\n  resource_group_name       = azurerm_resource_group.example.name\n  storage_account_id        = azurerm_storage_account.example.id\n  retention_policy {\n    enabled = false\n    days    = 10\n  }\n  tags = {\n    git_commit           = \"898d5beaec7ffdef6df0d7abecff407362e2a74e\"\n    git_file             = \"terraform/azure/networking.tf\"\n    git_last_modified_at = \"2020-06-17 12:59:55\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"33a7212e-7f1a-49fc-af73-8e525c5546ec\"\n  }\n}"}}}}]}, {"ruleId": "CKV_AZURE_39", "ruleIndex": 133, "level": "error", "attachments": [], "message": {"text": "Ensure that no custom subscription owner roles are created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/roles.tf"}, "region": {"startLine": 3, "endLine": 16, "snippet": {"text": "resource \"azurerm_role_definition\" \"example\" {\n  name        = \"my-custom-role\"\n  scope       = data.azurerm_subscription.current_subscription.id\n  description = \"This is a custom role created via Terraform\"\n\n  permissions {\n    actions     = [\"*\"]\n    not_actions = []\n  }\n\n  assignable_scopes = [\n    data.azurerm_subscription.current_subscription.id\n  ]\n}"}}}}]}, {"ruleId": "CKV_AZURE_19", "ruleIndex": 134, "level": "error", "attachments": [], "message": {"text": "Ensure that standard pricing tier is selected"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/security_center.tf"}, "region": {"startLine": 1, "endLine": 3, "snippet": {"text": "resource azurerm_security_center_subscription_pricing \"pricing\" {\n  tier = \"Free\"\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_20", "ruleIndex": 135, "level": "error", "attachments": [], "message": {"text": "Ensure that security contact 'Phone number' is set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/security_center.tf"}, "region": {"startLine": 5, "endLine": 9, "snippet": {"text": "resource azurerm_security_center_contact \"contact\" {\n  alert_notifications = false\n  alerts_to_admins    = false\n  email               = \"some@email.com\"\n}"}}}}]}, {"ruleId": "CKV_AZURE_22", "ruleIndex": 136, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/security_center.tf"}, "region": {"startLine": 5, "endLine": 9, "snippet": {"text": "resource azurerm_security_center_contact \"contact\" {\n  alert_notifications = false\n  alerts_to_admins    = false\n  email               = \"some@email.com\"\n}"}}}}]}, {"ruleId": "CKV_AZURE_21", "ruleIndex": 137, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Send email notification for high severity alerts' is set to 'On'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/security_center.tf"}, "region": {"startLine": 5, "endLine": 9, "snippet": {"text": "resource azurerm_security_center_contact \"contact\" {\n  alert_notifications = false\n  alerts_to_admins    = false\n  email               = \"some@email.com\"\n}"}}}}]}, {"ruleId": "CKV_AZURE_25", "ruleIndex": 127, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Threat Detection types' is set to 'All'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 31, "endLine": 42, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"example\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_sql_server.example.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.example.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days = 20\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_26", "ruleIndex": 129, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Send Alerts To' is enabled for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 31, "endLine": 42, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"example\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_sql_server.example.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.example.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days = 20\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_27", "ruleIndex": 128, "level": "error", "attachments": [], "message": {"text": "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 31, "endLine": 42, "snippet": {"text": "resource \"azurerm_mssql_server_security_alert_policy\" \"example\" {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_sql_server.example.name\n  state                      = \"Enabled\"\n  storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.example.primary_access_key\n  disabled_alerts = [\n    \"Sql_Injection\",\n    \"Data_Exfiltration\"\n  ]\n  retention_days = 20\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_54", "ruleIndex": 138, "level": "error", "attachments": [], "message": {"text": "Ensure MySQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 44, "endLine": 71, "snippet": {"text": "resource \"azurerm_mysql_server\" \"example\" {\n  name                = \"terragoat-mysql-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  administrator_login          = \"terragoat-${var.environment}\"\n  administrator_login_password = random_string.password.result\n\n  sku_name   = \"B_Gen5_2\"\n  storage_mb = 5120\n  version    = \"5.7\"\n\n  auto_grow_enabled                 = true\n  backup_retention_days             = 7\n  infrastructure_encryption_enabled = true\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1ac18c16-09a4-41c9-9a66-6f514050178e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_127", "ruleIndex": 139, "level": "error", "attachments": [], "message": {"text": "Ensure that My SQL server enables Threat detection policy"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 44, "endLine": 71, "snippet": {"text": "resource \"azurerm_mysql_server\" \"example\" {\n  name                = \"terragoat-mysql-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  administrator_login          = \"terragoat-${var.environment}\"\n  administrator_login_password = random_string.password.result\n\n  sku_name   = \"B_Gen5_2\"\n  storage_mb = 5120\n  version    = \"5.7\"\n\n  auto_grow_enabled                 = true\n  backup_retention_days             = 7\n  infrastructure_encryption_enabled = true\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1ac18c16-09a4-41c9-9a66-6f514050178e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_28", "ruleIndex": 140, "level": "error", "attachments": [], "message": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 44, "endLine": 71, "snippet": {"text": "resource \"azurerm_mysql_server\" \"example\" {\n  name                = \"terragoat-mysql-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  administrator_login          = \"terragoat-${var.environment}\"\n  administrator_login_password = random_string.password.result\n\n  sku_name   = \"B_Gen5_2\"\n  storage_mb = 5120\n  version    = \"5.7\"\n\n  auto_grow_enabled                 = true\n  backup_retention_days             = 7\n  infrastructure_encryption_enabled = true\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1ac18c16-09a4-41c9-9a66-6f514050178e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_94", "ruleIndex": 141, "level": "error", "attachments": [], "message": {"text": "Ensure that My SQL server enables geo-redundant backups"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 44, "endLine": 71, "snippet": {"text": "resource \"azurerm_mysql_server\" \"example\" {\n  name                = \"terragoat-mysql-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  administrator_login          = \"terragoat-${var.environment}\"\n  administrator_login_password = random_string.password.result\n\n  sku_name   = \"B_Gen5_2\"\n  storage_mb = 5120\n  version    = \"5.7\"\n\n  auto_grow_enabled                 = true\n  backup_retention_days             = 7\n  infrastructure_encryption_enabled = true\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1ac18c16-09a4-41c9-9a66-6f514050178e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_53", "ruleIndex": 142, "level": "error", "attachments": [], "message": {"text": "Ensure 'public network access enabled' is set to 'False' for mySQL servers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 44, "endLine": 71, "snippet": {"text": "resource \"azurerm_mysql_server\" \"example\" {\n  name                = \"terragoat-mysql-${var.environment}${random_integer.rnd_int.result}\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  administrator_login          = \"terragoat-${var.environment}\"\n  administrator_login_password = random_string.password.result\n\n  sku_name   = \"B_Gen5_2\"\n  storage_mb = 5120\n  version    = \"5.7\"\n\n  auto_grow_enabled                 = true\n  backup_retention_days             = 7\n  infrastructure_encryption_enabled = true\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"1ac18c16-09a4-41c9-9a66-6f514050178e\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_68", "ruleIndex": 143, "level": "error", "attachments": [], "message": {"text": "Ensure that PostgreSQL server disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 73, "endLine": 96, "snippet": {"text": "resource \"azurerm_postgresql_server\" \"example\" {\n  name                         = \"terragoat-postgresql-${var.environment}${random_integer.rnd_int.result}\"\n  location                     = azurerm_resource_group.example.location\n  resource_group_name          = azurerm_resource_group.example.name\n  sku_name                     = \"B_Gen5_2\"\n  storage_mb                   = 5120\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  administrator_login          = \"terragoat\"\n  administrator_login_password = \"Aa12345678\"\n  version                      = \"9.5\"\n  ssl_enforcement_enabled      = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9eae126d-9404-4511-9c32-2243457df459\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_130", "ruleIndex": 144, "level": "error", "attachments": [], "message": {"text": "Ensure that PostgreSQL server enables infrastructure encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 73, "endLine": 96, "snippet": {"text": "resource \"azurerm_postgresql_server\" \"example\" {\n  name                         = \"terragoat-postgresql-${var.environment}${random_integer.rnd_int.result}\"\n  location                     = azurerm_resource_group.example.location\n  resource_group_name          = azurerm_resource_group.example.name\n  sku_name                     = \"B_Gen5_2\"\n  storage_mb                   = 5120\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  administrator_login          = \"terragoat\"\n  administrator_login_password = \"Aa12345678\"\n  version                      = \"9.5\"\n  ssl_enforcement_enabled      = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9eae126d-9404-4511-9c32-2243457df459\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_128", "ruleIndex": 145, "level": "error", "attachments": [], "message": {"text": "Ensure that PostgreSQL server enables Threat detection policy"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 73, "endLine": 96, "snippet": {"text": "resource \"azurerm_postgresql_server\" \"example\" {\n  name                         = \"terragoat-postgresql-${var.environment}${random_integer.rnd_int.result}\"\n  location                     = azurerm_resource_group.example.location\n  resource_group_name          = azurerm_resource_group.example.name\n  sku_name                     = \"B_Gen5_2\"\n  storage_mb                   = 5120\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  administrator_login          = \"terragoat\"\n  administrator_login_password = \"Aa12345678\"\n  version                      = \"9.5\"\n  ssl_enforcement_enabled      = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9eae126d-9404-4511-9c32-2243457df459\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_147", "ruleIndex": 146, "level": "error", "attachments": [], "message": {"text": "Ensure PostgreSQL is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 73, "endLine": 96, "snippet": {"text": "resource \"azurerm_postgresql_server\" \"example\" {\n  name                         = \"terragoat-postgresql-${var.environment}${random_integer.rnd_int.result}\"\n  location                     = azurerm_resource_group.example.location\n  resource_group_name          = azurerm_resource_group.example.name\n  sku_name                     = \"B_Gen5_2\"\n  storage_mb                   = 5120\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  administrator_login          = \"terragoat\"\n  administrator_login_password = \"Aa12345678\"\n  version                      = \"9.5\"\n  ssl_enforcement_enabled      = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9eae126d-9404-4511-9c32-2243457df459\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_29", "ruleIndex": 147, "level": "error", "attachments": [], "message": {"text": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 73, "endLine": 96, "snippet": {"text": "resource \"azurerm_postgresql_server\" \"example\" {\n  name                         = \"terragoat-postgresql-${var.environment}${random_integer.rnd_int.result}\"\n  location                     = azurerm_resource_group.example.location\n  resource_group_name          = azurerm_resource_group.example.name\n  sku_name                     = \"B_Gen5_2\"\n  storage_mb                   = 5120\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  administrator_login          = \"terragoat\"\n  administrator_login_password = \"Aa12345678\"\n  version                      = \"9.5\"\n  ssl_enforcement_enabled      = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9eae126d-9404-4511-9c32-2243457df459\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_102", "ruleIndex": 148, "level": "error", "attachments": [], "message": {"text": "Ensure that PostgreSQL server enables geo-redundant backups"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 73, "endLine": 96, "snippet": {"text": "resource \"azurerm_postgresql_server\" \"example\" {\n  name                         = \"terragoat-postgresql-${var.environment}${random_integer.rnd_int.result}\"\n  location                     = azurerm_resource_group.example.location\n  resource_group_name          = azurerm_resource_group.example.name\n  sku_name                     = \"B_Gen5_2\"\n  storage_mb                   = 5120\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  administrator_login          = \"terragoat\"\n  administrator_login_password = \"Aa12345678\"\n  version                      = \"9.5\"\n  ssl_enforcement_enabled      = false\n  tags = {\n    git_commit           = \"81738b80d571fa3034633690d13ffb460e1e7dea\"\n    git_file             = \"terraform/azure/sql.tf\"\n    git_last_modified_at = \"2020-06-19 21:14:50\"\n    git_last_modified_by = \"Adin.Ermie@outlook.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"9eae126d-9404-4511-9c32-2243457df459\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_32", "ruleIndex": 149, "level": "error", "attachments": [], "message": {"text": "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 98, "endLine": 103, "snippet": {"text": "resource \"azurerm_postgresql_configuration\" \"thrtottling_config\" {\n  name                = \"connection_throttling\"\n  resource_group_name = azurerm_resource_group.example.name\n  server_name         = azurerm_postgresql_server.example.name\n  value               = \"off\"\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_30", "ruleIndex": 150, "level": "error", "attachments": [], "message": {"text": "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 105, "endLine": 110, "snippet": {"text": "resource \"azurerm_postgresql_configuration\" \"example\" {\n  name                = \"log_checkpoints\"\n  resource_group_name = azurerm_resource_group.example.name\n  server_name         = azurerm_postgresql_server.example.name\n  value               = \"off\"\n}"}}}}]}, {"ruleId": "CKV_AZURE_93", "ruleIndex": 151, "level": "error", "attachments": [], "message": {"text": "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 1, "endLine": 21, "snippet": {"text": "resource \"azurerm_managed_disk\" \"example\" {\n  name                 = \"terragoat-disk-${var.environment}\"\n  location             = var.location\n  resource_group_name  = azurerm_resource_group.example.name\n  storage_account_type = \"Standard_LRS\"\n  create_option        = \"Empty\"\n  disk_size_gb         = 1\n  encryption_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d17da7b3-f1c5-4723-9f77-d1b9069459c7\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_2", "ruleIndex": 152, "level": "error", "attachments": [], "message": {"text": "Ensure Azure managed disk has encryption enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 1, "endLine": 21, "snippet": {"text": "resource \"azurerm_managed_disk\" \"example\" {\n  name                 = \"terragoat-disk-${var.environment}\"\n  location             = var.location\n  resource_group_name  = azurerm_resource_group.example.name\n  storage_account_type = \"Standard_LRS\"\n  create_option        = \"Empty\"\n  disk_size_gb         = 1\n  encryption_settings {\n    enabled = false\n  }\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"d17da7b3-f1c5-4723-9f77-d1b9069459c7\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_33", "ruleIndex": 120, "level": "error", "attachments": [], "message": {"text": "Ensure Storage logging is enabled for Queue service for read, write and delete requests"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 23, "endLine": 60, "snippet": {"text": "resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"tgsa${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"GRS\"\n  queue_properties {\n    logging {\n      delete                = false\n      read                  = false\n      write                 = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    hour_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    minute_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"23861ff4-c42d-495e-80ac-776c74035f43\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_59", "ruleIndex": 121, "level": "error", "attachments": [], "message": {"text": "Ensure that Storage accounts disallow public access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 23, "endLine": 60, "snippet": {"text": "resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"tgsa${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"GRS\"\n  queue_properties {\n    logging {\n      delete                = false\n      read                  = false\n      write                 = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    hour_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    minute_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"23861ff4-c42d-495e-80ac-776c74035f43\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_44", "ruleIndex": 122, "level": "error", "attachments": [], "message": {"text": "Ensure Storage Account is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 23, "endLine": 60, "snippet": {"text": "resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"tgsa${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"GRS\"\n  queue_properties {\n    logging {\n      delete                = false\n      read                  = false\n      write                 = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    hour_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    minute_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"23861ff4-c42d-495e-80ac-776c74035f43\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_190", "ruleIndex": 124, "level": "error", "attachments": [], "message": {"text": "Ensure that Storage blobs restrict public access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 23, "endLine": 60, "snippet": {"text": "resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"tgsa${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"GRS\"\n  queue_properties {\n    logging {\n      delete                = false\n      read                  = false\n      write                 = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    hour_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    minute_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"23861ff4-c42d-495e-80ac-776c74035f43\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_36", "ruleIndex": 153, "level": "error", "attachments": [], "message": {"text": "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/storage.tf"}, "region": {"startLine": 62, "endLine": 69, "snippet": {"text": "resource \"azurerm_storage_account_network_rules\" \"test\" {\n  resource_group_name  = azurerm_resource_group.example.name\n  storage_account_name = azurerm_storage_account.example.name\n\n  default_action = \"Deny\"\n  ip_rules       = [\"127.0.0.1\"]\n  bypass         = [\"Metrics\"]\n}\n"}}}}]}, {"ruleId": "CKV_GCP_52", "ruleIndex": 154, "level": "error", "attachments": [], "message": {"text": "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_108", "ruleIndex": 155, "level": "error", "attachments": [], "message": {"text": "Ensure hostnames are logged for GCP PostgreSQL databases"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_6", "ruleIndex": 156, "level": "error", "attachments": [], "message": {"text": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_11", "ruleIndex": 157, "level": "error", "attachments": [], "message": {"text": "Ensure that Cloud SQL database Instances are not open to the world"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_79", "ruleIndex": 158, "level": "error", "attachments": [], "message": {"text": "Ensure SQL database is using latest Major version"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_110", "ruleIndex": 159, "level": "error", "attachments": [], "message": {"text": "Ensure pgAudit is enabled for your GCP PostgreSQL database"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_51", "ruleIndex": 160, "level": "error", "attachments": [], "message": {"text": "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_53", "ruleIndex": 161, "level": "error", "attachments": [], "message": {"text": "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_60", "ruleIndex": 162, "level": "error", "attachments": [], "message": {"text": "Ensure Cloud SQL database does not have public IP"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_109", "ruleIndex": 163, "level": "error", "attachments": [], "message": {"text": "Ensure the GCP PostgreSQL database log levels are set to ERROR or lower"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_111", "ruleIndex": 164, "level": "error", "attachments": [], "message": {"text": "Ensure GCP PostgreSQL logs SQL statements"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_54", "ruleIndex": 165, "level": "error", "attachments": [], "message": {"text": "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_14", "ruleIndex": 166, "level": "error", "attachments": [], "message": {"text": "Ensure all Cloud SQL database instance have backup configuration enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "resource \"google_sql_database_instance\" \"master_instance\" {\n  name             = \"terragoat-${var.environment}-master\"\n  database_version = \"POSTGRES_11\"\n  region           = var.region\n\n  settings {\n    tier = \"db-f1-micro\"\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"WWW\"\n        value = \"0.0.0.0/0\"\n      }\n    }\n    backup_configuration {\n      enabled = false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_81", "ruleIndex": 167, "level": "error", "attachments": [], "message": {"text": "Ensure Big Query Datasets are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 21, "endLine": 37, "snippet": {"text": "resource \"google_bigquery_dataset\" \"dataset\" {\n  dataset_id = \"terragoat_${var.environment}_dataset\"\n  access {\n    special_group = \"allAuthenticatedUsers\"\n    role          = \"READER\"\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__big_data_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2560d883-bc3a-4cb6-b9fc-fb666edf626e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_GCP_15", "ruleIndex": 168, "level": "error", "attachments": [], "message": {"text": "Ensure that BigQuery datasets are not anonymously or publicly accessible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/big_data.tf"}, "region": {"startLine": 21, "endLine": 37, "snippet": {"text": "resource \"google_bigquery_dataset\" \"dataset\" {\n  dataset_id = \"terragoat_${var.environment}_dataset\"\n  access {\n    special_group = \"allAuthenticatedUsers\"\n    role          = \"READER\"\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__big_data_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"2560d883-bc3a-4cb6-b9fc-fb666edf626e\"\n  }\n}"}}}}]}, {"ruleId": "CKV_GCP_114", "ruleIndex": 169, "level": "error", "attachments": [], "message": {"text": "Ensure public access prevention is enforced on Cloud Storage bucket"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gcs.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"google_storage_bucket\" \"terragoat_website\" {\n  name          = \"terragot-${var.environment}\"\n  location      = var.location\n  force_destroy = true\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__gcs_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"bd00cd2e-f53f-4daf-8d4d-74c47846c1cc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_62", "ruleIndex": 170, "level": "error", "attachments": [], "message": {"text": "Bucket should log access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gcs.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"google_storage_bucket\" \"terragoat_website\" {\n  name          = \"terragot-${var.environment}\"\n  location      = var.location\n  force_destroy = true\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__gcs_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"bd00cd2e-f53f-4daf-8d4d-74c47846c1cc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_29", "ruleIndex": 171, "level": "error", "attachments": [], "message": {"text": "Ensure that Cloud Storage buckets have uniform bucket-level access enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gcs.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"google_storage_bucket\" \"terragoat_website\" {\n  name          = \"terragot-${var.environment}\"\n  location      = var.location\n  force_destroy = true\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__gcs_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"bd00cd2e-f53f-4daf-8d4d-74c47846c1cc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_78", "ruleIndex": 172, "level": "error", "attachments": [], "message": {"text": "Ensure Cloud storage has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gcs.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "resource \"google_storage_bucket\" \"terragoat_website\" {\n  name          = \"terragot-${var.environment}\"\n  location      = var.location\n  force_destroy = true\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__gcs_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"bd00cd2e-f53f-4daf-8d4d-74c47846c1cc\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_28", "ruleIndex": 173, "level": "error", "attachments": [], "message": {"text": "Ensure that Cloud Storage bucket is not anonymously or publicly accessible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gcs.tf"}, "region": {"startLine": 17, "endLine": 21, "snippet": {"text": "resource \"google_storage_bucket_iam_binding\" \"allow_public_read\" {\n  bucket  = google_storage_bucket.terragoat_website.id\n  members = [\"allUsers\"]\n  role    = \"roles/storage.objectViewer\"\n}"}}}}]}, {"ruleId": "CKV_GCP_24", "ruleIndex": 174, "level": "error", "attachments": [], "message": {"text": "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_18", "ruleIndex": 175, "level": "error", "attachments": [], "message": {"text": "Ensure GKE Control Plane is not public"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_8", "ruleIndex": 176, "level": "error", "attachments": [], "message": {"text": "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_61", "ruleIndex": 177, "level": "error", "attachments": [], "message": {"text": "Enable VPC Flow Logs and Intranode Visibility"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_70", "ruleIndex": 178, "level": "error", "attachments": [], "message": {"text": "Ensure the GKE Release Channel is set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_25", "ruleIndex": 179, "level": "error", "attachments": [], "message": {"text": "Ensure Kubernetes Cluster is created with Private cluster enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_1", "ruleIndex": 180, "level": "error", "attachments": [], "message": {"text": "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_23", "ruleIndex": 181, "level": "error", "attachments": [], "message": {"text": "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_21", "ruleIndex": 182, "level": "error", "attachments": [], "message": {"text": "Ensure Kubernetes Clusters are configured with Labels"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_7", "ruleIndex": 183, "level": "error", "attachments": [], "message": {"text": "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_67", "ruleIndex": 184, "level": "error", "attachments": [], "message": {"text": "Ensure legacy Compute Engine instance metadata APIs are Disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_13", "ruleIndex": 185, "level": "error", "attachments": [], "message": {"text": "Ensure client certificate authentication to Kubernetes Engine Clusters is disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_65", "ruleIndex": 186, "level": "error", "attachments": [], "message": {"text": "Manage Kubernetes RBAC users with Google Groups for GKE"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_64", "ruleIndex": 187, "level": "error", "attachments": [], "message": {"text": "Ensure clusters are created with Private Nodes"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_66", "ruleIndex": 188, "level": "error", "attachments": [], "message": {"text": "Ensure use of Binary Authorization"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_69", "ruleIndex": 189, "level": "error", "attachments": [], "message": {"text": "Ensure the GKE Metadata Server is Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_12", "ruleIndex": 190, "level": "error", "attachments": [], "message": {"text": "Ensure Network Policy is enabled on Kubernetes Engine Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 6, "endLine": 22, "snippet": {"text": "resource \"google_container_cluster\" \"workload_cluster\" {\n  name               = \"terragoat-${var.environment}-cluster\"\n  logging_service    = \"none\"\n  location           = var.region\n  initial_node_count = 1\n\n  enable_legacy_abac       = true\n  monitoring_service       = \"none\"\n  remove_default_node_pool = true\n  network                  = google_compute_network.vpc.name\n  subnetwork               = google_compute_subnetwork.public-subnetwork.name\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"0.0.0.0/0\"\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_10", "ruleIndex": 191, "level": "error", "attachments": [], "message": {"text": "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 24, "endLine": 31, "snippet": {"text": "resource \"google_container_node_pool\" \"custom_node_pool\" {\n  cluster  = google_container_cluster.workload_cluster.name\n  location = var.region\n\n  node_config {\n    image_type = \"Ubuntu\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_22", "ruleIndex": 192, "level": "error", "attachments": [], "message": {"text": "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 24, "endLine": 31, "snippet": {"text": "resource \"google_container_node_pool\" \"custom_node_pool\" {\n  cluster  = google_container_cluster.workload_cluster.name\n  location = var.region\n\n  node_config {\n    image_type = \"Ubuntu\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_68", "ruleIndex": 193, "level": "error", "attachments": [], "message": {"text": "Ensure Secure Boot for Shielded GKE Nodes is Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 24, "endLine": 31, "snippet": {"text": "resource \"google_container_node_pool\" \"custom_node_pool\" {\n  cluster  = google_container_cluster.workload_cluster.name\n  location = var.region\n\n  node_config {\n    image_type = \"Ubuntu\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_9", "ruleIndex": 194, "level": "error", "attachments": [], "message": {"text": "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 24, "endLine": 31, "snippet": {"text": "resource \"google_container_node_pool\" \"custom_node_pool\" {\n  cluster  = google_container_cluster.workload_cluster.name\n  location = var.region\n\n  node_config {\n    image_type = \"Ubuntu\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_69", "ruleIndex": 189, "level": "error", "attachments": [], "message": {"text": "Ensure the GKE Metadata Server is Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/gke.tf"}, "region": {"startLine": 24, "endLine": 31, "snippet": {"text": "resource \"google_container_node_pool\" \"custom_node_pool\" {\n  cluster  = google_container_cluster.workload_cluster.name\n  location = var.region\n\n  node_config {\n    image_type = \"Ubuntu\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_36", "ruleIndex": 195, "level": "error", "attachments": [], "message": {"text": "Ensure that IP forwarding is not enabled on Instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_34", "ruleIndex": 196, "level": "error", "attachments": [], "message": {"text": "Ensure that no instance in the project overrides the project setting for enabling OSLogin(OSLogin needs to be enabled in project metadata for all instances)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_32", "ruleIndex": 197, "level": "error", "attachments": [], "message": {"text": "Ensure 'Block Project-wide SSH keys' is enabled for VM instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_38", "ruleIndex": 198, "level": "error", "attachments": [], "message": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_30", "ruleIndex": 199, "level": "error", "attachments": [], "message": {"text": "Ensure that instances are not configured to use the default service account"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_35", "ruleIndex": 200, "level": "error", "attachments": [], "message": {"text": "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_39", "ruleIndex": 201, "level": "error", "attachments": [], "message": {"text": "Ensure Compute instances are launched with Shielded VM enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_40", "ruleIndex": 202, "level": "error", "attachments": [], "message": {"text": "Ensure that Compute instances do not have public IP addresses"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 3, "endLine": 34, "snippet": {"text": "resource \"google_compute_instance\" \"server\" {\n  machine_type = \"n1-standard-1\"\n  name         = \"terragoat-${var.environment}-machine\"\n  zone         = data.google_compute_zones.zones.names[0]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n    auto_delete = true\n  }\n  network_interface {\n    subnetwork = google_compute_subnetwork.public-subnetwork.name\n    access_config {}\n  }\n  can_ip_forward = true\n\n  metadata = {\n    block-project-ssh-keys = false\n    enable-oslogin         = false\n    serial-port-enable     = true\n  }\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd562b76-fbce-4e60-8c75-c9f43d7ffc16\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_37", "ruleIndex": 203, "level": "error", "attachments": [], "message": {"text": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/instances.tf"}, "region": {"startLine": 36, "endLine": 48, "snippet": {"text": "resource \"google_compute_disk\" \"unencrypted_disk\" {\n  name = \"terragoat-${var.environment}-disk\"\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__instances_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"bf87b7d7-a9d8-4f03-a0d4-8a4cbb647d03\"\n  }\n}"}}}}]}, {"ruleId": "CKV_GCP_74", "ruleIndex": 204, "level": "error", "attachments": [], "message": {"text": "Ensure that private_ip_google_access is enabled for Subnet"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 7, "endLine": 17, "snippet": {"text": "resource \"google_compute_subnetwork\" \"public-subnetwork\" {\n  name          = \"terragoat-${var.environment}-public-subnetwork\"\n  ip_cidr_range = \"10.0.0.0/24\"\n  region        = var.region\n  network       = google_compute_network.vpc.id\n\n  secondary_ip_range {\n    range_name    = \"tf-test-secondary-range-update1\"\n    ip_cidr_range = \"192.168.10.0/24\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_26", "ruleIndex": 205, "level": "error", "attachments": [], "message": {"text": "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 7, "endLine": 17, "snippet": {"text": "resource \"google_compute_subnetwork\" \"public-subnetwork\" {\n  name          = \"terragoat-${var.environment}-public-subnetwork\"\n  ip_cidr_range = \"10.0.0.0/24\"\n  region        = var.region\n  network       = google_compute_network.vpc.id\n\n  secondary_ip_range {\n    range_name    = \"tf-test-secondary-range-update1\"\n    ip_cidr_range = \"192.168.10.0/24\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_76", "ruleIndex": 206, "level": "error", "attachments": [], "message": {"text": "Ensure that Private google access is enabled for IPV6"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 7, "endLine": 17, "snippet": {"text": "resource \"google_compute_subnetwork\" \"public-subnetwork\" {\n  name          = \"terragoat-${var.environment}-public-subnetwork\"\n  ip_cidr_range = \"10.0.0.0/24\"\n  region        = var.region\n  network       = google_compute_network.vpc.id\n\n  secondary_ip_range {\n    range_name    = \"tf-test-secondary-range-update1\"\n    ip_cidr_range = \"192.168.10.0/24\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_88", "ruleIndex": 207, "level": "error", "attachments": [], "message": {"text": "Ensure Google compute firewall ingress does not allow unrestricted mysql access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 19, "endLine": 27, "snippet": {"text": "resource \"google_compute_firewall\" \"allow_all\" {\n  name          = \"terragoat-${var.environment}-firewall\"\n  network       = google_compute_network.vpc.id\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_75", "ruleIndex": 208, "level": "error", "attachments": [], "message": {"text": "Ensure Google compute firewall ingress does not allow unrestricted FTP access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 19, "endLine": 27, "snippet": {"text": "resource \"google_compute_firewall\" \"allow_all\" {\n  name          = \"terragoat-${var.environment}-firewall\"\n  network       = google_compute_network.vpc.id\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_77", "ruleIndex": 209, "level": "error", "attachments": [], "message": {"text": "Ensure Google compute firewall ingress does not allow on ftp port"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 19, "endLine": 27, "snippet": {"text": "resource \"google_compute_firewall\" \"allow_all\" {\n  name          = \"terragoat-${var.environment}-firewall\"\n  network       = google_compute_network.vpc.id\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_3", "ruleIndex": 210, "level": "error", "attachments": [], "message": {"text": "Ensure Google compute firewall ingress does not allow unrestricted rdp access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 19, "endLine": 27, "snippet": {"text": "resource \"google_compute_firewall\" \"allow_all\" {\n  name          = \"terragoat-${var.environment}-firewall\"\n  network       = google_compute_network.vpc.id\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_2", "ruleIndex": 211, "level": "error", "attachments": [], "message": {"text": "Ensure Google compute firewall ingress does not allow unrestricted ssh access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 19, "endLine": 27, "snippet": {"text": "resource \"google_compute_firewall\" \"allow_all\" {\n  name          = \"terragoat-${var.environment}-firewall\"\n  network       = google_compute_network.vpc.id\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_GCP_106", "ruleIndex": 212, "level": "error", "attachments": [], "message": {"text": "Ensure Google compute firewall ingress does not allow unrestricted http port 80 access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/gcp/networks.tf"}, "region": {"startLine": 19, "endLine": 27, "snippet": {"text": "resource \"google_compute_firewall\" \"allow_all\" {\n  name          = \"terragoat-${var.environment}-firewall\"\n  network       = google_compute_network.vpc.id\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_OCI_9", "ruleIndex": 213, "level": "error", "attachments": [], "message": {"text": "Ensure OCI Object Storage is encrypted with Customer Managed Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/oracle/bucket.tf"}, "region": {"startLine": 1, "endLine": 23, "snippet": {"text": "resource \"oci_objectstorage_bucket\" \"secretsquirrel\" {\n  # bucket can't emit object events\n  # Storage hasn't versioning enabled\n  # Storage isn't encrypted with Customer Managed Key\n  # Object Storage is Public\"\n  compartment_id        = oci_identity_compartment.tf-compartment.id\n  name                  = \"myreallysecretstore\"\n  namespace             = data.oci_objectstorage_namespace.example.namespace\n  object_events_enabled = false\n  access_type           = \"ObjectRead\"\n  metadata              = { \"data\" = \"Blockofdata\" }\n  storage_tier          = \"Standard\"\n  freeform_tags = {\n    git_commit           = \"7a7b957091945f77ecef712a92ac719c8d9a6498\"\n    git_file             = \"terraform/oracle/bucket.tf\"\n    git_last_modified_at = \"2022-04-06 10:43:57\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a854aa89-5141-4518-a5dc-0ffe3075f209\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_OCI_10", "ruleIndex": 214, "level": "error", "attachments": [], "message": {"text": "Ensure OCI Object Storage is not Public"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/oracle/bucket.tf"}, "region": {"startLine": 1, "endLine": 23, "snippet": {"text": "resource \"oci_objectstorage_bucket\" \"secretsquirrel\" {\n  # bucket can't emit object events\n  # Storage hasn't versioning enabled\n  # Storage isn't encrypted with Customer Managed Key\n  # Object Storage is Public\"\n  compartment_id        = oci_identity_compartment.tf-compartment.id\n  name                  = \"myreallysecretstore\"\n  namespace             = data.oci_objectstorage_namespace.example.namespace\n  object_events_enabled = false\n  access_type           = \"ObjectRead\"\n  metadata              = { \"data\" = \"Blockofdata\" }\n  storage_tier          = \"Standard\"\n  freeform_tags = {\n    git_commit           = \"7a7b957091945f77ecef712a92ac719c8d9a6498\"\n    git_file             = \"terraform/oracle/bucket.tf\"\n    git_last_modified_at = \"2022-04-06 10:43:57\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a854aa89-5141-4518-a5dc-0ffe3075f209\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_OCI_8", "ruleIndex": 215, "level": "error", "attachments": [], "message": {"text": "Ensure OCI Object Storage has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/oracle/bucket.tf"}, "region": {"startLine": 1, "endLine": 23, "snippet": {"text": "resource \"oci_objectstorage_bucket\" \"secretsquirrel\" {\n  # bucket can't emit object events\n  # Storage hasn't versioning enabled\n  # Storage isn't encrypted with Customer Managed Key\n  # Object Storage is Public\"\n  compartment_id        = oci_identity_compartment.tf-compartment.id\n  name                  = \"myreallysecretstore\"\n  namespace             = data.oci_objectstorage_namespace.example.namespace\n  object_events_enabled = false\n  access_type           = \"ObjectRead\"\n  metadata              = { \"data\" = \"Blockofdata\" }\n  storage_tier          = \"Standard\"\n  freeform_tags = {\n    git_commit           = \"7a7b957091945f77ecef712a92ac719c8d9a6498\"\n    git_file             = \"terraform/oracle/bucket.tf\"\n    git_last_modified_at = \"2022-04-06 10:43:57\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a854aa89-5141-4518-a5dc-0ffe3075f209\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_OCI_7", "ruleIndex": 216, "level": "error", "attachments": [], "message": {"text": "Ensure OCI Object Storage bucket can emit object events"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/oracle/bucket.tf"}, "region": {"startLine": 1, "endLine": 23, "snippet": {"text": "resource \"oci_objectstorage_bucket\" \"secretsquirrel\" {\n  # bucket can't emit object events\n  # Storage hasn't versioning enabled\n  # Storage isn't encrypted with Customer Managed Key\n  # Object Storage is Public\"\n  compartment_id        = oci_identity_compartment.tf-compartment.id\n  name                  = \"myreallysecretstore\"\n  namespace             = data.oci_objectstorage_namespace.example.namespace\n  object_events_enabled = false\n  access_type           = \"ObjectRead\"\n  metadata              = { \"data\" = \"Blockofdata\" }\n  storage_tier          = \"Standard\"\n  freeform_tags = {\n    git_commit           = \"7a7b957091945f77ecef712a92ac719c8d9a6498\"\n    git_file             = \"terraform/oracle/bucket.tf\"\n    git_last_modified_at = \"2022-04-06 10:43:57\"\n    git_last_modified_by = \"james.woolfenden@gmail.com\"\n    git_modifiers        = \"james.woolfenden\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"a854aa89-5141-4518-a5dc-0ffe3075f209\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_58", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/eks.yaml"}, "region": {"startLine": 439, "endLine": 453, "snippet": {"text": "  EKSCluster:\n    Type: AWS::EKS::Cluster\n    Properties:\n      Name: !Ref EKSClusterName\n      RoleArn:\n        \"Fn::GetAtt\": [\"EKSIAMRole\", \"Arn\"]\n      ResourcesVpcConfig:\n        SecurityGroupIds:\n        - !Ref ControlPlaneSecurityGroup\n        SubnetIds:\n        - !Ref PublicSubnet01\n        - !Ref PublicSubnet02\n        - !Ref PrivateSubnet01\n        - !Ref PrivateSubnet02\n    DependsOn: [EKSIAMRole, PublicSubnet01, PublicSubnet02, PrivateSubnet01, PrivateSubnet02, ControlPlaneSecurityGroup]\n"}}}}]}, {"ruleId": "CKV_AWS_46", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Ensure no hard-coded secrets exist in EC2 user data"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 31, "endLine": 72, "snippet": {"text": "  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n        - \"0\"\n        - Fn::GetAZs: \"\"\n      InstanceType: t2.nano\n      SecurityGroupIds: \n        - !Ref WebNodeSG\n      ImageId: !Ref LatestAmiId\n      SubnetId: !Ref WebSubnet\n      Tags: \n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-ec2\" \n        - Key: yor_trace\n          Value: 595b9b79-bd1e-45fd-a297-d521ebdf15e7\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n      UserData:\n        Fn::Base64: |\n          #!/bin/bash\n          sudo yum -y update\n          sudo yum -y install httpd php php-mysqlnd\n          sudo systemctl enable httpd\n          sudo systemctl start httpd\n          export AWS_ACCESS_KEY_ID=AKIAI***************\n          export AWS_SE********************************************************\n          export AWS_DEFAULT_REGION=us-west-2\n          echo \"<h1>Deployed via CloudFormation</h1>\" | sudo tee /var/www/html/index.html\n"}}}}]}, {"ruleId": "CKV_AWS_3", "ruleIndex": 33, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the EBS is securely encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 73, "endLine": 101, "snippet": {"text": "  WebHostStorage:\n    # Unencrypted Volume\n    Type: AWS::EC2::Volume\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - \"0\"\n          - Fn::GetAZs: \"\"\n      #Encrypted: False\n      Size: 1\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-ebs\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 838685b6-8fac-42eb-9cf4-008dd36216a1\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n"}}}}]}, {"ruleId": "CKV_AWS_260", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 112, "endLine": 147, "snippet": {"text": "  WebNodeSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-sg\"\n      GroupDescription: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment} Security Group\"\n      VpcId: !Ref WebVPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 80\n        ToPort: 80\n        CidrIp: 0.0.0.0/0\n      - IpProtocol: tcp\n        FromPort: 22\n        ToPort: 22\n        CidrIp: 0.0.0.0/0\n      - IpProtocol: \"-1\"\n        FromPort: 0\n        ToPort: 0\n        CidrIp: 0.0.0.0/0\n      Tags:\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: d4d72008-2b73-4635-9df6-8035c8850d66\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_24", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 112, "endLine": 147, "snippet": {"text": "  WebNodeSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-sg\"\n      GroupDescription: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment} Security Group\"\n      VpcId: !Ref WebVPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 80\n        ToPort: 80\n        CidrIp: 0.0.0.0/0\n      - IpProtocol: tcp\n        FromPort: 22\n        ToPort: 22\n        CidrIp: 0.0.0.0/0\n      - IpProtocol: \"-1\"\n        FromPort: 0\n        ToPort: 0\n        CidrIp: 0.0.0.0/0\n      Tags:\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: d4d72008-2b73-4635-9df6-8035c8850d66\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure every security groups rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 112, "endLine": 147, "snippet": {"text": "  WebNodeSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-sg\"\n      GroupDescription: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment} Security Group\"\n      VpcId: !Ref WebVPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 80\n        ToPort: 80\n        CidrIp: 0.0.0.0/0\n      - IpProtocol: tcp\n        FromPort: 22\n        ToPort: 22\n        CidrIp: 0.0.0.0/0\n      - IpProtocol: \"-1\"\n        FromPort: 0\n        ToPort: 0\n        CidrIp: 0.0.0.0/0\n      Tags:\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: d4d72008-2b73-4635-9df6-8035c8850d66\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 217, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 349, "endLine": 372, "snippet": {"text": "  FlowBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n        - Key: yor_trace\n          Value: a148a687-a031-4491-8fc9-6bb78fef0572\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 218, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 349, "endLine": 372, "snippet": {"text": "  FlowBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n        - Key: yor_trace\n          Value: a148a687-a031-4491-8fc9-6bb78fef0572\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 219, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 349, "endLine": 372, "snippet": {"text": "  FlowBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n        - Key: yor_trace\n          Value: a148a687-a031-4491-8fc9-6bb78fef0572\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_21", "ruleIndex": 220, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 349, "endLine": 372, "snippet": {"text": "  FlowBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n        - Key: yor_trace\n          Value: a148a687-a031-4491-8fc9-6bb78fef0572\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 221, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 349, "endLine": 372, "snippet": {"text": "  FlowBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n        - Key: yor_trace\n          Value: a148a687-a031-4491-8fc9-6bb78fef0572\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 222, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 349, "endLine": 372, "snippet": {"text": "  FlowBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-flowlogs\"\n        - Key: yor_trace\n          Value: a148a687-a031-4491-8fc9-6bb78fef0572\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_108", "ruleIndex": 223, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow data exfiltration"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 406, "endLine": 421, "snippet": {"text": "  UserPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: excess_policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"ec2:*\"\n              - \"s3:*\"\n              - \"lambda:*\"\n              - \"cloudwatch:*\"\n            Resource: \"*\"\n      Users:\n        - !Ref User\n"}}}}]}, {"ruleId": "CKV_AWS_111", "ruleIndex": 54, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow write access without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 406, "endLine": 421, "snippet": {"text": "  UserPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: excess_policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"ec2:*\"\n              - \"s3:*\"\n              - \"lambda:*\"\n              - \"cloudwatch:*\"\n            Resource: \"*\"\n      Users:\n        - !Ref User\n"}}}}]}, {"ruleId": "CKV_AWS_107", "ruleIndex": 224, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow credentials exposure"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 406, "endLine": 421, "snippet": {"text": "  UserPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: excess_policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"ec2:*\"\n              - \"s3:*\"\n              - \"lambda:*\"\n              - \"cloudwatch:*\"\n            Resource: \"*\"\n      Users:\n        - !Ref User\n"}}}}]}, {"ruleId": "CKV_AWS_109", "ruleIndex": 55, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow permissions management without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 406, "endLine": 421, "snippet": {"text": "  UserPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: excess_policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"ec2:*\"\n              - \"s3:*\"\n              - \"lambda:*\"\n              - \"cloudwatch:*\"\n            Resource: \"*\"\n      Users:\n        - !Ref User\n"}}}}]}, {"ruleId": "CKV_AWS_40", "ruleIndex": 225, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies are attached only to groups or roles (Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 406, "endLine": 421, "snippet": {"text": "  UserPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: excess_policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"ec2:*\"\n              - \"s3:*\"\n              - \"lambda:*\"\n              - \"cloudwatch:*\"\n            Resource: \"*\"\n      Users:\n        - !Ref User\n"}}}}]}, {"ruleId": "CKV_AWS_110", "ruleIndex": 226, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow privilege escalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 406, "endLine": 421, "snippet": {"text": "  UserPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: excess_policy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"ec2:*\"\n              - \"s3:*\"\n              - \"lambda:*\"\n              - \"cloudwatch:*\"\n            Resource: \"*\"\n      Users:\n        - !Ref User\n"}}}}]}, {"ruleId": "CKV_AWS_7", "ruleIndex": 58, "level": "error", "attachments": [], "message": {"text": "Ensure rotation for customer created CMKs is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 426, "endLine": 458, "snippet": {"text": "  LogsKey:\n    # Key does not have rotation enabled\n    Type: AWS::KMS::Key\n    Properties:\n      Description: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs bucket key\"\n      PendingWindowInDays: 7\n      KeyPolicy:\n        Version: '2012-10-17'\n        Id: key-default-1\n        Statement:\n        - Sid: Enable IAM User Permissions\n          Effect: Allow\n          Principal:\n            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root\n          Action: kms:*\n          Resource: '*'\n      Tags:\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: bd68272a-4d3b-44e6-a2f0-ad783935c332\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n"}}}}]}, {"ruleId": "CKV_AWS_157", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 468, "endLine": 511, "snippet": {"text": "  DefaultDB:\n    Type: AWS::RDS::DBInstance\n    DeletionPolicy: Delete\n    Properties:\n      DBName: !Ref DBName\n      Engine: MySQL\n      OptionGroupName: !Ref DefaultDBOptionGroup\n      DBParameterGroupName: !Ref DefaultDBParameterGroup\n      DBSubnetGroupName: !Ref DefaultSubnetGroup\n      VPCSecurityGroups:\n        - !Ref DefaultSG\n\n      DBInstanceIdentifier: !Sub \"rds-${AWS::AccountId}-${CompanyName}-${Environment}\"\n      EngineVersion: \"8.0\"\n      DBInstanceClass: db.t3.micro\n      AllocatedStorage: \"20\"\n      MasterUsername: admin\n      MasterUserPassword: !Ref Password\n      MultiAZ: False\n      BackupRetentionPeriod: 0\n      StorageEncrypted: False\n      MonitoringInterval: 0\n      PubliclyAccessible: True\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-rds\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: ca176a04-46cc-411d-a062-222ae03835a8\n"}}}}]}, {"ruleId": "CKV_AWS_17", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in RDS is not publicly accessible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 468, "endLine": 511, "snippet": {"text": "  DefaultDB:\n    Type: AWS::RDS::DBInstance\n    DeletionPolicy: Delete\n    Properties:\n      DBName: !Ref DBName\n      Engine: MySQL\n      OptionGroupName: !Ref DefaultDBOptionGroup\n      DBParameterGroupName: !Ref DefaultDBParameterGroup\n      DBSubnetGroupName: !Ref DefaultSubnetGroup\n      VPCSecurityGroups:\n        - !Ref DefaultSG\n\n      DBInstanceIdentifier: !Sub \"rds-${AWS::AccountId}-${CompanyName}-${Environment}\"\n      EngineVersion: \"8.0\"\n      DBInstanceClass: db.t3.micro\n      AllocatedStorage: \"20\"\n      MasterUsername: admin\n      MasterUserPassword: !Ref Password\n      MultiAZ: False\n      BackupRetentionPeriod: 0\n      StorageEncrypted: False\n      MonitoringInterval: 0\n      PubliclyAccessible: True\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-rds\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: ca176a04-46cc-411d-a062-222ae03835a8\n"}}}}]}, {"ruleId": "CKV_AWS_118", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 468, "endLine": 511, "snippet": {"text": "  DefaultDB:\n    Type: AWS::RDS::DBInstance\n    DeletionPolicy: Delete\n    Properties:\n      DBName: !Ref DBName\n      Engine: MySQL\n      OptionGroupName: !Ref DefaultDBOptionGroup\n      DBParameterGroupName: !Ref DefaultDBParameterGroup\n      DBSubnetGroupName: !Ref DefaultSubnetGroup\n      VPCSecurityGroups:\n        - !Ref DefaultSG\n\n      DBInstanceIdentifier: !Sub \"rds-${AWS::AccountId}-${CompanyName}-${Environment}\"\n      EngineVersion: \"8.0\"\n      DBInstanceClass: db.t3.micro\n      AllocatedStorage: \"20\"\n      MasterUsername: admin\n      MasterUserPassword: !Ref Password\n      MultiAZ: False\n      BackupRetentionPeriod: 0\n      StorageEncrypted: False\n      MonitoringInterval: 0\n      PubliclyAccessible: True\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-rds\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: ca176a04-46cc-411d-a062-222ae03835a8\n"}}}}]}, {"ruleId": "CKV_AWS_16", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the RDS is securely encrypted at rest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 468, "endLine": 511, "snippet": {"text": "  DefaultDB:\n    Type: AWS::RDS::DBInstance\n    DeletionPolicy: Delete\n    Properties:\n      DBName: !Ref DBName\n      Engine: MySQL\n      OptionGroupName: !Ref DefaultDBOptionGroup\n      DBParameterGroupName: !Ref DefaultDBParameterGroup\n      DBSubnetGroupName: !Ref DefaultSubnetGroup\n      VPCSecurityGroups:\n        - !Ref DefaultSG\n\n      DBInstanceIdentifier: !Sub \"rds-${AWS::AccountId}-${CompanyName}-${Environment}\"\n      EngineVersion: \"8.0\"\n      DBInstanceClass: db.t3.micro\n      AllocatedStorage: \"20\"\n      MasterUsername: admin\n      MasterUserPassword: !Ref Password\n      MultiAZ: False\n      BackupRetentionPeriod: 0\n      StorageEncrypted: False\n      MonitoringInterval: 0\n      PubliclyAccessible: True\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-rds\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: ca176a04-46cc-411d-a062-222ae03835a8\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure every security groups rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 598, "endLine": 629, "snippet": {"text": "  DefaultSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-rds-sg\"\n      GroupDescription: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment} RDS Security Group\"\n      VpcId: !Ref WebVPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 3306\n        ToPort: 3306\n        CidrIp: !GetAtt WebVPC.CidrBlock\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-rds-sg\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 3d3b2421-0886-4ab8-88ec-e4bef646fdf6\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 60, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 878, "endLine": 912, "snippet": {"text": "  AnalysisLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n      Runtime: nodejs12.x\n      Role: !GetAtt IAM4Lambda.Arn\n      Handler: exports.test\n      Code:\n        ZipFile: |\n          console.log(\"Hello World\");\n      Environment:\n        Variables:\n          access_key: \"AKIAIOSFODNN7EXAMPLE\"\n          secret_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 5939cdf9-4e86-4208-80d1-095c367c2c13\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n"}}}}]}, {"ruleId": "CKV_AWS_116", "ruleIndex": 61, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 878, "endLine": 912, "snippet": {"text": "  AnalysisLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n      Runtime: nodejs12.x\n      Role: !GetAtt IAM4Lambda.Arn\n      Handler: exports.test\n      Code:\n        ZipFile: |\n          console.log(\"Hello World\");\n      Environment:\n        Variables:\n          access_key: \"AKIAIOSFODNN7EXAMPLE\"\n          secret_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 5939cdf9-4e86-4208-80d1-095c367c2c13\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n"}}}}]}, {"ruleId": "CKV_AWS_173", "ruleIndex": 62, "level": "error", "attachments": [], "message": {"text": "Check encryption settings for Lambda environmental variable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 878, "endLine": 912, "snippet": {"text": "  AnalysisLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n      Runtime: nodejs12.x\n      Role: !GetAtt IAM4Lambda.Arn\n      Handler: exports.test\n      Code:\n        ZipFile: |\n          console.log(\"Hello World\");\n      Environment:\n        Variables:\n          access_key: \"AKIAIOSFODNN7EXAMPLE\"\n          secret_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 5939cdf9-4e86-4208-80d1-095c367c2c13\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n"}}}}]}, {"ruleId": "CKV_AWS_45", "ruleIndex": 64, "level": "error", "attachments": [], "message": {"text": "Ensure no hard-coded secrets exist in lambda environment"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 878, "endLine": 912, "snippet": {"text": "  AnalysisLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n      Runtime: nodejs12.x\n      Role: !GetAtt IAM4Lambda.Arn\n      Handler: exports.test\n      Code:\n        ZipFile: |\n          console.log(\"Hello World\");\n      Environment:\n        Variables:\n          access_key: \"AKIAI***************\"\n          secret_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 5939cdf9-4e86-4208-80d1-095c367c2c13\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 65, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 878, "endLine": 912, "snippet": {"text": "  AnalysisLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n      Runtime: nodejs12.x\n      Role: !GetAtt IAM4Lambda.Arn\n      Handler: exports.test\n      Code:\n        ZipFile: |\n          console.log(\"Hello World\");\n      Environment:\n        Variables:\n          access_key: \"AKIAIOSFODNN7EXAMPLE\"\n          secret_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-analysis\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 5939cdf9-4e86-4208-80d1-095c367c2c13\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n"}}}}]}, {"ruleId": "CKV_AWS_20", "ruleIndex": 227, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket does not allow READ permissions to everyone"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 217, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 218, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 219, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_21", "ruleIndex": 220, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 221, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 222, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 917, "endLine": 942, "snippet": {"text": "  DataBucket:\n    # Public, not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n      AccessControl: PublicRead\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 509b197d-4f87-4ae1-aa43-8cca13c9e92e\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 217, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 945, "endLine": 970, "snippet": {"text": "  FinancialsBucket:\n    # not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n      AccessControl: Private\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 7d0b70d4-58fb-4d2d-b966-177d349932da\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 218, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 945, "endLine": 970, "snippet": {"text": "  FinancialsBucket:\n    # not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n      AccessControl: Private\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 7d0b70d4-58fb-4d2d-b966-177d349932da\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 219, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 945, "endLine": 970, "snippet": {"text": "  FinancialsBucket:\n    # not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n      AccessControl: Private\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 7d0b70d4-58fb-4d2d-b966-177d349932da\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_21", "ruleIndex": 220, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 945, "endLine": 970, "snippet": {"text": "  FinancialsBucket:\n    # not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n      AccessControl: Private\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 7d0b70d4-58fb-4d2d-b966-177d349932da\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 221, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 945, "endLine": 970, "snippet": {"text": "  FinancialsBucket:\n    # not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n      AccessControl: Private\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 7d0b70d4-58fb-4d2d-b966-177d349932da\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 222, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 945, "endLine": 970, "snippet": {"text": "  FinancialsBucket:\n    # not encrypted, no access logs, no versioning\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n      AccessControl: Private\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-financials\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 7d0b70d4-58fb-4d2d-b966-177d349932da\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 217, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 971, "endLine": 998, "snippet": {"text": "  OperationsBucket:\n    # not encrypted, no access logs\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 9e00e7c2-b27c-4141-af5a-2d90c9632a23\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 218, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 971, "endLine": 998, "snippet": {"text": "  OperationsBucket:\n    # not encrypted, no access logs\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 9e00e7c2-b27c-4141-af5a-2d90c9632a23\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 219, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 971, "endLine": 998, "snippet": {"text": "  OperationsBucket:\n    # not encrypted, no access logs\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 9e00e7c2-b27c-4141-af5a-2d90c9632a23\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 221, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 971, "endLine": 998, "snippet": {"text": "  OperationsBucket:\n    # not encrypted, no access logs\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 9e00e7c2-b27c-4141-af5a-2d90c9632a23\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 222, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 971, "endLine": 998, "snippet": {"text": "  OperationsBucket:\n    # not encrypted, no access logs\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-operations\"\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 9e00e7c2-b27c-4141-af5a-2d90c9632a23\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 218, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 999, "endLine": 1029, "snippet": {"text": "  DataScienceBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      LoggingConfiguration:\n        DestinationBucketName: !Ref LogsBucket\n        LogFilePrefix: log/\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 11266986-850e-41eb-b980-7b4d8d49f919\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 219, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 999, "endLine": 1029, "snippet": {"text": "  DataScienceBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      LoggingConfiguration:\n        DestinationBucketName: !Ref LogsBucket\n        LogFilePrefix: log/\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 11266986-850e-41eb-b980-7b4d8d49f919\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 221, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 999, "endLine": 1029, "snippet": {"text": "  DataScienceBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      LoggingConfiguration:\n        DestinationBucketName: !Ref LogsBucket\n        LogFilePrefix: log/\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 11266986-850e-41eb-b980-7b4d8d49f919\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 222, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 999, "endLine": 1029, "snippet": {"text": "  DataScienceBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n      AccessControl: Private\n      VersioningConfiguration:\n        Status: Enabled\n      LoggingConfiguration:\n        DestinationBucketName: !Ref LogsBucket\n        LogFilePrefix: log/\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-data-science\"\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 11266986-850e-41eb-b980-7b4d8d49f919\n        - Key: git_org\n          Value: bridgecrewio\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 217, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1030, "endLine": 1062, "snippet": {"text": "  LogsBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n      AccessControl: LogDeliveryWrite\n      VersioningConfiguration:\n        Status: Enabled\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              KMSMasterKeyID: !Ref LogsKey\n              SSEAlgorithm: aws:kms\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n        - Key: yor_trace\n          Value: 7c5f90f1-7102-45dc-bead-02754df64eba\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 218, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1030, "endLine": 1062, "snippet": {"text": "  LogsBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n      AccessControl: LogDeliveryWrite\n      VersioningConfiguration:\n        Status: Enabled\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              KMSMasterKeyID: !Ref LogsKey\n              SSEAlgorithm: aws:kms\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n        - Key: yor_trace\n          Value: 7c5f90f1-7102-45dc-bead-02754df64eba\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 219, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1030, "endLine": 1062, "snippet": {"text": "  LogsBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n      AccessControl: LogDeliveryWrite\n      VersioningConfiguration:\n        Status: Enabled\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              KMSMasterKeyID: !Ref LogsKey\n              SSEAlgorithm: aws:kms\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n        - Key: yor_trace\n          Value: 7c5f90f1-7102-45dc-bead-02754df64eba\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 221, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1030, "endLine": 1062, "snippet": {"text": "  LogsBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n      AccessControl: LogDeliveryWrite\n      VersioningConfiguration:\n        Status: Enabled\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              KMSMasterKeyID: !Ref LogsKey\n              SSEAlgorithm: aws:kms\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n        - Key: yor_trace\n          Value: 7c5f90f1-7102-45dc-bead-02754df64eba\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 222, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_bucket' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1030, "endLine": 1062, "snippet": {"text": "  LogsBucket:\n    # not encrypted\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n      AccessControl: LogDeliveryWrite\n      VersioningConfiguration:\n        Status: Enabled\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              KMSMasterKeyID: !Ref LogsKey\n              SSEAlgorithm: aws:kms\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-logs\"\n        - Key: yor_trace\n          Value: 7c5f90f1-7102-45dc-bead-02754df64eba\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n"}}}}]}, {"ruleId": "CKV_AWS_108", "ruleIndex": 223, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow data exfiltration"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1067, "endLine": 1114, "snippet": {"text": "  CleanupRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: [lambda.amazonaws.com]\n          Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n      - PolicyName: lambda-execute\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              - logs:*\n            Resource: '*'\n      - PolicyName: s3-object-delete\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              - s3:GetObject\n              - s3:ListBucket\n              - s3:DeleteObject\n            Resource: '*'\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-cleanup-role\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 573995a2-e3f4-43a6-847d-df474b0fc71a\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_111", "ruleIndex": 54, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow write access without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1067, "endLine": 1114, "snippet": {"text": "  CleanupRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: [lambda.amazonaws.com]\n          Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n      - PolicyName: lambda-execute\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              - logs:*\n            Resource: '*'\n      - PolicyName: s3-object-delete\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              - s3:GetObject\n              - s3:ListBucket\n              - s3:DeleteObject\n            Resource: '*'\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}-cleanup-role\"\n        - Key: Environment\n          Value: !Sub \"${AWS::AccountId}-${CompanyName}-${Environment}\"\n        - Key: git_file\n          Value: cfngoat.yaml\n        - Key: git_commit\n          Value: b1681f3806db6656faf4107ceceb77e9364e59b7\n        - Key: git_modifiers\n          Value: jonathan.jozwiak\n        - Key: git_last_modified_at\n          Value: \"2020-04-25 01:13:26\"\n        - Key: git_last_modified_by\n          Value: jonathan.jozwiak@googlemail.com\n        - Key: yor_trace\n          Value: 573995a2-e3f4-43a6-847d-df474b0fc71a\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 60, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1115, "endLine": 1268, "snippet": {"text": "  CleanBucketFunction:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n    - CleanupRole\n    Properties:\n      Handler: index.clearS3Bucket\n      Role:\n        Fn::GetAtt:\n          - CleanupRole\n          - Arn\n      Runtime: nodejs12.x\n      Timeout: 25\n      Code:\n        ZipFile: |\n          'use strict';\n\n          var AWS      = require('aws-sdk');\n          var s3       = new AWS.S3();\n\n          module.exports =  {\n            clearS3Bucket: function (event, context, cb) {\n              console.log(\"Event=\", event);\n              console.log(\"Context=\", context);\n              if (event.RequestType === 'Delete')  {\n                  var bucketName = event.ResourceProperties.BucketName;\n\n                  console.log(\"Delete bucket requested for\", bucketName);\n\n                  var objects = listObjects(s3, bucketName);\n\n                  objects.then(function(result) {\n                     var keysToDeleteArray = [];\n                     console.log(\"Found \"+ result.Contents.length + \" objects to delete.\");\n                     if (result.Contents.length === 0) {\n                         sendResponse(event, context, \"SUCCESS\");\n                     } else {\n                         for (var i = 0, len = result.Contents.length; i < len; i++) {\n                             var item =  new Object();\n                             item = {};\n                             item = { Key: result.Contents[i].Key };\n                             keysToDeleteArray.push(item);\n                         }\n\n                         var delete_params = {\n                             Bucket: bucketName,\n                             Delete: {\n                               Objects: keysToDeleteArray,\n                               Quiet: false\n                             }\n                         };\n\n                         var deletedObjects = deleteObjects(s3, delete_params);\n\n                         deletedObjects.then(function(result) {\n                             console.log(\"deleteObjects API returned \", result);\n                             sendResponse(event, context, \"SUCCESS\");\n                         }, function(err) {\n                             console.log(\"ERROR: deleteObjects API Call failed!\");\n                             console.log(err);\n                             sendResponse(event, context, \"FAILED\");\n                         });\n                     }\n                  }, function(err) {\n                     console.log(\"ERROR: listObjects API Call failed!\");\n                     console.log(err);\n                     sendResponse(event, context, \"FAILED\");\n                  });\n\n              } else {\n                console.log(\"Delete not requested.\");\n                sendResponse(event, context, \"SUCCESS\");\n              }\n\n            }\n          };\n\n          function listObjects(client, bucketName) {\n            return new Promise(function (resolve, reject){\n              client.listObjectsV2({Bucket: bucketName}, function (err, res){\n                if (err) reject(err);\n                else resolve(res);\n              });\n            });\n          }\n\n          function deleteObjects(client, params) {\n            return new Promise(function (resolve, reject){\n              client.deleteObjects(params, function (err, res){\n                if (err) reject(err);\n                else resolve(res);\n              });\n            });\n          }\n\n          function sendResponse(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n            var responseBody = JSON.stringify({\n              Status: responseStatus,\n              Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n              PhysicalResourceId: physicalResourceId || context.logStreamName,\n              StackId: event.StackId,\n              RequestId: event.RequestId,\n              LogicalResourceId: event.LogicalResourceId,\n              NoEcho: noEcho || false,\n              Data: responseData\n            });\n\n            console.log(\"Response body:\\n\", responseBody);\n\n            var https = require(\"https\");\n            var url = require(\"url\");\n\n            var parsedUrl = url.parse(event.ResponseURL);\n            var options = {\n              hostname: parsedUrl.hostname,\n              port: 443,\n              path: parsedUrl.path,\n              method: \"PUT\",\n              headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n              }\n            };\n\n            var request = https.request(options, function(response) {\n              console.log(\"Status code: \" + response.statusCode);\n              console.log(\"Status message: \" + response.statusMessage);\n              context.done();\n            });\n\n            request.on(\"error\", function(error) {\n              console.log(\"send(..) failed executing https.request(..): \" + error);\n              context.done();\n            });\n\n            request.write(responseBody);\n            request.end();\n          }\n      Tags:\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 75847e0e-ba4e-46e5-8c36-cd934d666acd\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n"}}}}]}, {"ruleId": "CKV_AWS_116", "ruleIndex": 61, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1115, "endLine": 1268, "snippet": {"text": "  CleanBucketFunction:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n    - CleanupRole\n    Properties:\n      Handler: index.clearS3Bucket\n      Role:\n        Fn::GetAtt:\n          - CleanupRole\n          - Arn\n      Runtime: nodejs12.x\n      Timeout: 25\n      Code:\n        ZipFile: |\n          'use strict';\n\n          var AWS      = require('aws-sdk');\n          var s3       = new AWS.S3();\n\n          module.exports =  {\n            clearS3Bucket: function (event, context, cb) {\n              console.log(\"Event=\", event);\n              console.log(\"Context=\", context);\n              if (event.RequestType === 'Delete')  {\n                  var bucketName = event.ResourceProperties.BucketName;\n\n                  console.log(\"Delete bucket requested for\", bucketName);\n\n                  var objects = listObjects(s3, bucketName);\n\n                  objects.then(function(result) {\n                     var keysToDeleteArray = [];\n                     console.log(\"Found \"+ result.Contents.length + \" objects to delete.\");\n                     if (result.Contents.length === 0) {\n                         sendResponse(event, context, \"SUCCESS\");\n                     } else {\n                         for (var i = 0, len = result.Contents.length; i < len; i++) {\n                             var item =  new Object();\n                             item = {};\n                             item = { Key: result.Contents[i].Key };\n                             keysToDeleteArray.push(item);\n                         }\n\n                         var delete_params = {\n                             Bucket: bucketName,\n                             Delete: {\n                               Objects: keysToDeleteArray,\n                               Quiet: false\n                             }\n                         };\n\n                         var deletedObjects = deleteObjects(s3, delete_params);\n\n                         deletedObjects.then(function(result) {\n                             console.log(\"deleteObjects API returned \", result);\n                             sendResponse(event, context, \"SUCCESS\");\n                         }, function(err) {\n                             console.log(\"ERROR: deleteObjects API Call failed!\");\n                             console.log(err);\n                             sendResponse(event, context, \"FAILED\");\n                         });\n                     }\n                  }, function(err) {\n                     console.log(\"ERROR: listObjects API Call failed!\");\n                     console.log(err);\n                     sendResponse(event, context, \"FAILED\");\n                  });\n\n              } else {\n                console.log(\"Delete not requested.\");\n                sendResponse(event, context, \"SUCCESS\");\n              }\n\n            }\n          };\n\n          function listObjects(client, bucketName) {\n            return new Promise(function (resolve, reject){\n              client.listObjectsV2({Bucket: bucketName}, function (err, res){\n                if (err) reject(err);\n                else resolve(res);\n              });\n            });\n          }\n\n          function deleteObjects(client, params) {\n            return new Promise(function (resolve, reject){\n              client.deleteObjects(params, function (err, res){\n                if (err) reject(err);\n                else resolve(res);\n              });\n            });\n          }\n\n          function sendResponse(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n            var responseBody = JSON.stringify({\n              Status: responseStatus,\n              Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n              PhysicalResourceId: physicalResourceId || context.logStreamName,\n              StackId: event.StackId,\n              RequestId: event.RequestId,\n              LogicalResourceId: event.LogicalResourceId,\n              NoEcho: noEcho || false,\n              Data: responseData\n            });\n\n            console.log(\"Response body:\\n\", responseBody);\n\n            var https = require(\"https\");\n            var url = require(\"url\");\n\n            var parsedUrl = url.parse(event.ResponseURL);\n            var options = {\n              hostname: parsedUrl.hostname,\n              port: 443,\n              path: parsedUrl.path,\n              method: \"PUT\",\n              headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n              }\n            };\n\n            var request = https.request(options, function(response) {\n              console.log(\"Status code: \" + response.statusCode);\n              console.log(\"Status message: \" + response.statusMessage);\n              context.done();\n            });\n\n            request.on(\"error\", function(error) {\n              console.log(\"send(..) failed executing https.request(..): \" + error);\n              context.done();\n            });\n\n            request.write(responseBody);\n            request.end();\n          }\n      Tags:\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 75847e0e-ba4e-46e5-8c36-cd934d666acd\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 65, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 1115, "endLine": 1268, "snippet": {"text": "  CleanBucketFunction:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n    - CleanupRole\n    Properties:\n      Handler: index.clearS3Bucket\n      Role:\n        Fn::GetAtt:\n          - CleanupRole\n          - Arn\n      Runtime: nodejs12.x\n      Timeout: 25\n      Code:\n        ZipFile: |\n          'use strict';\n\n          var AWS      = require('aws-sdk');\n          var s3       = new AWS.S3();\n\n          module.exports =  {\n            clearS3Bucket: function (event, context, cb) {\n              console.log(\"Event=\", event);\n              console.log(\"Context=\", context);\n              if (event.RequestType === 'Delete')  {\n                  var bucketName = event.ResourceProperties.BucketName;\n\n                  console.log(\"Delete bucket requested for\", bucketName);\n\n                  var objects = listObjects(s3, bucketName);\n\n                  objects.then(function(result) {\n                     var keysToDeleteArray = [];\n                     console.log(\"Found \"+ result.Contents.length + \" objects to delete.\");\n                     if (result.Contents.length === 0) {\n                         sendResponse(event, context, \"SUCCESS\");\n                     } else {\n                         for (var i = 0, len = result.Contents.length; i < len; i++) {\n                             var item =  new Object();\n                             item = {};\n                             item = { Key: result.Contents[i].Key };\n                             keysToDeleteArray.push(item);\n                         }\n\n                         var delete_params = {\n                             Bucket: bucketName,\n                             Delete: {\n                               Objects: keysToDeleteArray,\n                               Quiet: false\n                             }\n                         };\n\n                         var deletedObjects = deleteObjects(s3, delete_params);\n\n                         deletedObjects.then(function(result) {\n                             console.log(\"deleteObjects API returned \", result);\n                             sendResponse(event, context, \"SUCCESS\");\n                         }, function(err) {\n                             console.log(\"ERROR: deleteObjects API Call failed!\");\n                             console.log(err);\n                             sendResponse(event, context, \"FAILED\");\n                         });\n                     }\n                  }, function(err) {\n                     console.log(\"ERROR: listObjects API Call failed!\");\n                     console.log(err);\n                     sendResponse(event, context, \"FAILED\");\n                  });\n\n              } else {\n                console.log(\"Delete not requested.\");\n                sendResponse(event, context, \"SUCCESS\");\n              }\n\n            }\n          };\n\n          function listObjects(client, bucketName) {\n            return new Promise(function (resolve, reject){\n              client.listObjectsV2({Bucket: bucketName}, function (err, res){\n                if (err) reject(err);\n                else resolve(res);\n              });\n            });\n          }\n\n          function deleteObjects(client, params) {\n            return new Promise(function (resolve, reject){\n              client.deleteObjects(params, function (err, res){\n                if (err) reject(err);\n                else resolve(res);\n              });\n            });\n          }\n\n          function sendResponse(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n            var responseBody = JSON.stringify({\n              Status: responseStatus,\n              Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n              PhysicalResourceId: physicalResourceId || context.logStreamName,\n              StackId: event.StackId,\n              RequestId: event.RequestId,\n              LogicalResourceId: event.LogicalResourceId,\n              NoEcho: noEcho || false,\n              Data: responseData\n            });\n\n            console.log(\"Response body:\\n\", responseBody);\n\n            var https = require(\"https\");\n            var url = require(\"url\");\n\n            var parsedUrl = url.parse(event.ResponseURL);\n            var options = {\n              hostname: parsedUrl.hostname,\n              port: 443,\n              path: parsedUrl.path,\n              method: \"PUT\",\n              headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n              }\n            };\n\n            var request = https.request(options, function(response) {\n              console.log(\"Status code: \" + response.statusCode);\n              console.log(\"Status message: \" + response.statusMessage);\n              context.done();\n            });\n\n            request.on(\"error\", function(error) {\n              console.log(\"send(..) failed executing https.request(..): \" + error);\n              context.done();\n            });\n\n            request.write(responseBody);\n            request.end();\n          }\n      Tags:\n        - Key: git_commit\n          Value: 42153ba22c28f5c0bff388b24a6344137a5dfe26\n        - Key: git_modifiers\n          Value: jonathan.jozwiak/nimrodkor\n        - Key: git_last_modified_at\n          Value: \"2021-08-23 13:51:41\"\n        - Key: git_last_modified_by\n          Value: nimrodkor@gmail.com\n        - Key: yor_trace\n          Value: 75847e0e-ba4e-46e5-8c36-cd934d666acd\n        - Key: git_org\n          Value: bridgecrewio\n        - Key: git_repo\n          Value: cfngoat\n        - Key: git_file\n          Value: cfngoat.yaml\n"}}}}]}, {"ruleId": "CKV_AWS_58", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/eks.yaml"}, "region": {"startLine": 265, "endLine": 279, "snippet": {"text": "  EKSCluster:\n    Type: AWS::EKS::Cluster\n    Properties:\n      Name: !Ref EKSClusterName\n      RoleArn:\n        \"Fn::GetAtt\": [\"EKSIAMRole\", \"Arn\"]\n      ResourcesVpcConfig:\n        SecurityGroupIds:\n        - !Ref ControlPlaneSecurityGroup\n        SubnetIds:\n        - !Ref PublicSubnet01\n        - !Ref PublicSubnet02\n        - !Ref PrivateSubnet01\n        - !Ref PrivateSubnet02\n    DependsOn: [EKSIAMRole, PublicSubnet01, PublicSubnet02, PrivateSubnet01, PrivateSubnet02, ControlPlaneSecurityGroup]\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 228, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: \"docker/default\"\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: \"kubernetes.io/hostname\""}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 229, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: \"docker/default\"\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: \"kubernetes.io/hostname\""}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 230, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: \"docker/default\"\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: \"kubernetes.io/hostname\""}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 231, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 232, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 233, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_12", "ruleIndex": 234, "level": "error", "attachments": [], "message": {"text": "Memory requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 235, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 236, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_13", "ruleIndex": 237, "level": "error", "attachments": [], "message": {"text": "Memory limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 228, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_10", "ruleIndex": 238, "level": "error", "attachments": [], "message": {"text": "CPU requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 239, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 240, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 241, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 229, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 242, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 230, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 243, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 244, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_11", "ruleIndex": 245, "level": "error", "attachments": [], "message": {"text": "CPU limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/deployment.yaml"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 231, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 232, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 233, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 235, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_27", "ruleIndex": 246, "level": "error", "attachments": [], "message": {"text": "Do not expose the docker daemon socket to containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 228, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_16", "ruleIndex": 247, "level": "error", "attachments": [], "message": {"text": "Container should not be privileged"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 239, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 240, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 241, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 229, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 248, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 230, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 249, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 243, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 244, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: health-check-deployment\nspec:\n  selector:\n    matchLabels:\n      app: health-check\n  template:\n    metadata:\n      labels:\n        app: health-check\n    spec:\n      containers:\n      - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n          limits:\n            memory: \"100Mi\"\n            cpu: \"30m\"\n        ports:\n        - containerPort: 80\n      # Custom Stuff\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - mountPath: /custom/docker/docker.sock\n            name: docker-sock-volume\n      volumes:\n        - name: docker-sock-volume\n          hostPath:\n            path: /var/run/docker.sock\n---\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 249, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/deployment-kind.yaml"}, "region": {"startLine": 34, "endLine": 44, "snippet": {"text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: health-check-service\nspec:\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  selector:\n    app: health-check\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 250, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/resources/Dockerfile"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": "FROM python:3.7-slim\n"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 251, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/resources/Dockerfile"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": "FROM python:3.7-slim\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 250, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/supplygoat/Dockerfile"}, "region": {"startLine": 1, "endLine": 18, "snippet": {"text": "FROM node:12-alpine\nENV WORKDIR /usr/src/app/\nWORKDIR $WORKDIR\nCOPY package*.json $WORKDIR\nRUN npm install --production --no-cache\n\nFROM node:12-alpine\nENV USER node\nENV WORKDIR /home/$USER/app\nWORKDIR $WORKDIR\nCOPY --from=0 /usr/src/app/node_modules node_modules\nRUN chown $USER:$USER $WORKDIR\nCOPY --chown=node . $WORKDIR\n# In production environment uncomment the next line\n#RUN chown -R $USER:$USER /home/$USER && chmod -R g-s,o-rx /home/$USER && chmod -R o-wrx $WORKDIR\n# Then all further actions including running the containers should be done under non-root user.\nUSER $USER\nEXPOSE 4000\n"}}}}]}, {"ruleId": "CKV_DOCKER_6", "ruleIndex": 252, "level": "error", "attachments": [], "message": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "docker/bad-dockerfile/Dockerfile"}, "region": {"startLine": 2, "endLine": 2, "snippet": {"text": "MAINTAINER adrianp@stindustries.net\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 250, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "docker/bad-dockerfile/Dockerfile"}, "region": {"startLine": 1, "endLine": 202, "snippet": {"text": "FROM centos:centos7.2.1511\nMAINTAINER adrianp@stindustries.net\n\n# If you need to use a proxy to get to the internet, build with:\n#   docker build --build-arg CURL_OPTIONS=\"...\"\n#\n# The default is empty (no special options).\n#\nARG CURL_OPTIONS=\"\"\n\n# Prep environment\n#\nRUN yum -y install deltarpm && yum -y update\n\n# Install build utils\n#\nRUN touch /var/lib/rpm/* && \\\n    yum -y install bison gnutls-devel gcc libidn-devel gcc-c++ bzip2 && \\\n    yum clean all\n\n# wget - command line utility (installed via. RPM)\n#\n# https://www.cvedetails.com/cve/CVE-2014-4877/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/wget-1.14-10.el7.x86_64.rpm && \\\n    yum -y install wget-1.14-10.el7.x86_64.rpm && \\\n    rm *.rpm\n\n# wget - command line utility (manual install)\n#\n# https://www.cvedetails.com/cve/CVE-2014-4877/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://www.mirrorservice.org/sites/ftp.gnu.org/gnu/wget/wget-1.15.tar.gz && \\\n    tar zxf wget-1.15.tar.gz && \\\n    cd wget-1.15 && \\\n    ./configure --prefix=/opt/wget && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf wget-1.15 && \\\n    rm *.tar.gz\n\n# p7zip - command line utility (manual install)\n#\n# https://www.cvedetails.com/cve/CVE-2015-1038/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://sourceforge.net/projects/p7zip/files/p7zip/9.20.1/p7zip_9.20.1_src_all.tar.bz2 && \\\n    bzcat p7zip_9.20.1_src_all.tar.bz2 | tar x && \\\n    cd p7zip_9.20.1 && \\\n    cp install.sh install.sh.orig && \\\n    cat install.sh.orig | sed -e 's|DEST_HOME=/usr/local|DEST_HOME=/opt/p7zip|g' > install.sh && \\\n    make && \\\n    ./install.sh && \\\n    cd - && \\\n    rm -rf p7zip_9.20.1 && \\\n    rm *.tar.bz2\n\n# drupal - PHP application (manual install)\n#\n# http://www.cvedetails.com/vulnerability-list/vendor_id-1367/product_id-2387/version_id-192973/Drupal-Drupal-7.42.html\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://ftp.drupal.org/files/projects/drupal-7.42.tar.gz && \\\n    tar zxf drupal-7.42.tar.gz && \\\n    mkdir /opt/drupal && \\\n    cd drupal-7.42 && \\\n    cp -R . /opt/drupal && \\\n    cd - && \\\n    rm -rf drupal-7.42 && \\\n    rm -f *.tar.gz\n\n# tomcat - Java application (manual install)\n#\n# https://www.cvedetails.com/cve/CVE-2016-3092/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.69/bin/apache-tomcat-7.0.69.tar.gz && \\\n    tar zxf apache-tomcat-7.0.69.tar.gz && \\\n    mkdir /opt/tomcat && \\\n    cd apache-tomcat-7.0.69 && \\\n    cp -R . /opt/tomcat && \\\n    cd - && \\\n    rm -rf apache-tomcat-7.0.69 && \\\n    rm -f *.tar.gz\n\n# OpenJDK - Java (RPM install)\n#\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://www.nic.funet.fi/pub/Linux/INSTALL/scientific/7.0/x86_64/updates/security/java-1.8.0-openjdk-1.8.0.91-0.b14.el7_2.x86_64.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://www.nic.funet.fi/pub/Linux/INSTALL/scientific/7.0/x86_64/updates/security/java-1.8.0-openjdk-headless-1.8.0.91-0.b14.el7_2.x86_64.rpm && \\\n    touch /var/lib/rpm/* && \\\n    yum -y install java-1.8.0-openjdk-1.8.0.91-0.b14.el7_2.x86_64.rpm java-1.8.0-openjdk-headless-1.8.0.91-0.b14.el7_2.x86_64.rpm && \\\n    rm -f *.rpm && \\\n    echo \"exclude=java-1.8.0-openjdk java-1.8.0-openjdk-headless\"  >> /etc/yum.conf\n\n# tomcat - Java application (RPM install)\n#\n# CVE-2013-4590, CVE-2014-0119, CVE-2014-0099, CVE-2014-0096, CVE-2014-0075\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-el-2.2-api-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-jsp-2.2-api-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-lib-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-servlet-3.0-api-7.0.42-4.el7.noarch.rpm && \\\n    touch /var/lib/rpm/* && \\\n    yum -y install yum install tomcat-7.0.42-4.el7.noarch.rpm tomcat-lib-7.0.42-4.el7.noarch.rpm tomcat-servlet-3.0-api-7.0.42-4.el7.noarch.rpm tomcat-el-2.2-api-7.0.42-4.el7.noarch.rpm tomcat-jsp-2.2-api-7.0.42-4.el7.noarch.rpm && \\\n    rm -f *.rpm\n\n# hpack-2.1.1 - Python lib\n#\n# https://www.cvedetails.com/cve/CVE-2016-6581/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n          https://pypi.python.org/packages/8c/2b/e6e2f554368785c7eb68d618fd6457625be1535e807f6abf11c7db710f34/hpack-2.1.1.tar.gz && \\\n        tar xvf hpack-2.1.1.tar.gz && \\\n        mkdir /opt/hpack && \\\n        cd hpack-2.1.1 && \\\n        cp -R . /opt/hpack && \\\n        cd - && \\\n        rm -rf hpack-2.1.1 && \\\n        rm -f *.tar.gz\n\n# commons-beanutils-1.8 - Jar file  \n#\n# https://www.cvedetails.com/cve/CVE-2014-0114/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://repo1.maven.org/maven2/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0-sources.jar\n\n# activesupport 4.2.1 - GEM package (Ruby)\n#\n# CVE-2015-3227, CVE-2015-3226\t\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://rubygems.org/downloads/activesupport-4.2.1.gem\n\n# utils.js - Javascript file \n#\n# CVE-2015-3227,CVE-2015-3226\n#\nCOPY utils.js /tmp/utils.js\n# nodejs - Javascript (installed manually)\n#\n# https://www.cvedetails.com/vulnerability-list/vendor_id-12113/product_id-30764/version_id-192848/Nodejs-Node.js-0.10.41.html\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://nodejs.org/dist/v0.10.41/node-v0.10.41-linux-x64.tar.gz && \\\n    tar zxf node-v0.10.41-linux-x64.tar.gz && \\\n    mkdir /opt/nodejs && \\\n    cd node-v0.10.41-linux-x64 && \\\n    cp -R . /opt/nodejs && \\\n    cd - && \\\n    rm -rf node-v0.10.41-linux-x64 && \\\n    rm -rf *.tar.gz\n\n# bash - command line utility (installed manually)\n#\n# https://www.cvedetails.com/vulnerability-list/vendor_id-72/product_id-21050/version_id-172000/GNU-Bash-4.3.html\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://ftp.heanet.ie/mirrors/ftp.gnu.org/gnu/bash/bash-4.3.tar.gz && \\\n    tar zxf bash-4.3.tar.gz && \\\n    mkdir /opt/bash && cd bash-4.3 && \\\n    ./configure --prefix=/opt/bash && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf bash-4.3 && \\\n    rm -rf *.tar.gz\n\n# rpmsquirt\n#\nRUN touch /var/lib/rpm/* && \\\n    yum -y install rpm-build redhat-rpm-config rpmdevtools\nCOPY rpmsquirt.sh /rpmsquirt.sh\nCOPY rpmsquirt.dat /\nRUN /rpmsquirt.sh \n\n# Precautionary failure with messages\n#\nCMD echo 'Vulnerable image' && /bin/false\n\n# Basic labels.\n# http://label-schema.org/\n#\nLABEL \\\n    org.label-schema.name=\"bad-dockerfile\" \\\n    org.label-schema.description=\"Reference Dockerfile containing software with known vulnerabilities.\" \\\n    org.label-schema.url=\"http://www.stindustries.net/docker/bad-dockerfile/\" \\\n    org.label-schema.vcs-type=\"Git\" \\\n    org.label-schema.vcs-url=\"https://github.com/ianmiell/bad-dockerfile\" \\\n    org.label-schema.docker.dockerfile=\"/Dockerfile\"\n"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 251, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "docker/bad-dockerfile/Dockerfile"}, "region": {"startLine": 1, "endLine": 202, "snippet": {"text": "FROM centos:centos7.2.1511\nMAINTAINER adrianp@stindustries.net\n\n# If you need to use a proxy to get to the internet, build with:\n#   docker build --build-arg CURL_OPTIONS=\"...\"\n#\n# The default is empty (no special options).\n#\nARG CURL_OPTIONS=\"\"\n\n# Prep environment\n#\nRUN yum -y install deltarpm && yum -y update\n\n# Install build utils\n#\nRUN touch /var/lib/rpm/* && \\\n    yum -y install bison gnutls-devel gcc libidn-devel gcc-c++ bzip2 && \\\n    yum clean all\n\n# wget - command line utility (installed via. RPM)\n#\n# https://www.cvedetails.com/cve/CVE-2014-4877/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/wget-1.14-10.el7.x86_64.rpm && \\\n    yum -y install wget-1.14-10.el7.x86_64.rpm && \\\n    rm *.rpm\n\n# wget - command line utility (manual install)\n#\n# https://www.cvedetails.com/cve/CVE-2014-4877/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://www.mirrorservice.org/sites/ftp.gnu.org/gnu/wget/wget-1.15.tar.gz && \\\n    tar zxf wget-1.15.tar.gz && \\\n    cd wget-1.15 && \\\n    ./configure --prefix=/opt/wget && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf wget-1.15 && \\\n    rm *.tar.gz\n\n# p7zip - command line utility (manual install)\n#\n# https://www.cvedetails.com/cve/CVE-2015-1038/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://sourceforge.net/projects/p7zip/files/p7zip/9.20.1/p7zip_9.20.1_src_all.tar.bz2 && \\\n    bzcat p7zip_9.20.1_src_all.tar.bz2 | tar x && \\\n    cd p7zip_9.20.1 && \\\n    cp install.sh install.sh.orig && \\\n    cat install.sh.orig | sed -e 's|DEST_HOME=/usr/local|DEST_HOME=/opt/p7zip|g' > install.sh && \\\n    make && \\\n    ./install.sh && \\\n    cd - && \\\n    rm -rf p7zip_9.20.1 && \\\n    rm *.tar.bz2\n\n# drupal - PHP application (manual install)\n#\n# http://www.cvedetails.com/vulnerability-list/vendor_id-1367/product_id-2387/version_id-192973/Drupal-Drupal-7.42.html\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://ftp.drupal.org/files/projects/drupal-7.42.tar.gz && \\\n    tar zxf drupal-7.42.tar.gz && \\\n    mkdir /opt/drupal && \\\n    cd drupal-7.42 && \\\n    cp -R . /opt/drupal && \\\n    cd - && \\\n    rm -rf drupal-7.42 && \\\n    rm -f *.tar.gz\n\n# tomcat - Java application (manual install)\n#\n# https://www.cvedetails.com/cve/CVE-2016-3092/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.69/bin/apache-tomcat-7.0.69.tar.gz && \\\n    tar zxf apache-tomcat-7.0.69.tar.gz && \\\n    mkdir /opt/tomcat && \\\n    cd apache-tomcat-7.0.69 && \\\n    cp -R . /opt/tomcat && \\\n    cd - && \\\n    rm -rf apache-tomcat-7.0.69 && \\\n    rm -f *.tar.gz\n\n# OpenJDK - Java (RPM install)\n#\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://www.nic.funet.fi/pub/Linux/INSTALL/scientific/7.0/x86_64/updates/security/java-1.8.0-openjdk-1.8.0.91-0.b14.el7_2.x86_64.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://www.nic.funet.fi/pub/Linux/INSTALL/scientific/7.0/x86_64/updates/security/java-1.8.0-openjdk-headless-1.8.0.91-0.b14.el7_2.x86_64.rpm && \\\n    touch /var/lib/rpm/* && \\\n    yum -y install java-1.8.0-openjdk-1.8.0.91-0.b14.el7_2.x86_64.rpm java-1.8.0-openjdk-headless-1.8.0.91-0.b14.el7_2.x86_64.rpm && \\\n    rm -f *.rpm && \\\n    echo \"exclude=java-1.8.0-openjdk java-1.8.0-openjdk-headless\"  >> /etc/yum.conf\n\n# tomcat - Java application (RPM install)\n#\n# CVE-2013-4590, CVE-2014-0119, CVE-2014-0099, CVE-2014-0096, CVE-2014-0075\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-el-2.2-api-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-jsp-2.2-api-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-lib-7.0.42-4.el7.noarch.rpm && \\\n    curl -LO ${CURL_OPTIONS} \\\n      http://vault.centos.org/7.0.1406/os/x86_64/Packages/tomcat-servlet-3.0-api-7.0.42-4.el7.noarch.rpm && \\\n    touch /var/lib/rpm/* && \\\n    yum -y install yum install tomcat-7.0.42-4.el7.noarch.rpm tomcat-lib-7.0.42-4.el7.noarch.rpm tomcat-servlet-3.0-api-7.0.42-4.el7.noarch.rpm tomcat-el-2.2-api-7.0.42-4.el7.noarch.rpm tomcat-jsp-2.2-api-7.0.42-4.el7.noarch.rpm && \\\n    rm -f *.rpm\n\n# hpack-2.1.1 - Python lib\n#\n# https://www.cvedetails.com/cve/CVE-2016-6581/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n          https://pypi.python.org/packages/8c/2b/e6e2f554368785c7eb68d618fd6457625be1535e807f6abf11c7db710f34/hpack-2.1.1.tar.gz && \\\n        tar xvf hpack-2.1.1.tar.gz && \\\n        mkdir /opt/hpack && \\\n        cd hpack-2.1.1 && \\\n        cp -R . /opt/hpack && \\\n        cd - && \\\n        rm -rf hpack-2.1.1 && \\\n        rm -f *.tar.gz\n\n# commons-beanutils-1.8 - Jar file  \n#\n# https://www.cvedetails.com/cve/CVE-2014-0114/\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://repo1.maven.org/maven2/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0-sources.jar\n\n# activesupport 4.2.1 - GEM package (Ruby)\n#\n# CVE-2015-3227, CVE-2015-3226\t\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      http://rubygems.org/downloads/activesupport-4.2.1.gem\n\n# utils.js - Javascript file \n#\n# CVE-2015-3227,CVE-2015-3226\n#\nCOPY utils.js /tmp/utils.js\n# nodejs - Javascript (installed manually)\n#\n# https://www.cvedetails.com/vulnerability-list/vendor_id-12113/product_id-30764/version_id-192848/Nodejs-Node.js-0.10.41.html\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://nodejs.org/dist/v0.10.41/node-v0.10.41-linux-x64.tar.gz && \\\n    tar zxf node-v0.10.41-linux-x64.tar.gz && \\\n    mkdir /opt/nodejs && \\\n    cd node-v0.10.41-linux-x64 && \\\n    cp -R . /opt/nodejs && \\\n    cd - && \\\n    rm -rf node-v0.10.41-linux-x64 && \\\n    rm -rf *.tar.gz\n\n# bash - command line utility (installed manually)\n#\n# https://www.cvedetails.com/vulnerability-list/vendor_id-72/product_id-21050/version_id-172000/GNU-Bash-4.3.html\n#\nRUN curl -LO ${CURL_OPTIONS} \\\n      https://ftp.heanet.ie/mirrors/ftp.gnu.org/gnu/bash/bash-4.3.tar.gz && \\\n    tar zxf bash-4.3.tar.gz && \\\n    mkdir /opt/bash && cd bash-4.3 && \\\n    ./configure --prefix=/opt/bash && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf bash-4.3 && \\\n    rm -rf *.tar.gz\n\n# rpmsquirt\n#\nRUN touch /var/lib/rpm/* && \\\n    yum -y install rpm-build redhat-rpm-config rpmdevtools\nCOPY rpmsquirt.sh /rpmsquirt.sh\nCOPY rpmsquirt.dat /\nRUN /rpmsquirt.sh \n\n# Precautionary failure with messages\n#\nCMD echo 'Vulnerable image' && /bin/false\n\n# Basic labels.\n# http://label-schema.org/\n#\nLABEL \\\n    org.label-schema.name=\"bad-dockerfile\" \\\n    org.label-schema.description=\"Reference Dockerfile containing software with known vulnerabilities.\" \\\n    org.label-schema.url=\"http://www.stindustries.net/docker/bad-dockerfile/\" \\\n    org.label-schema.vcs-type=\"Git\" \\\n    org.label-schema.vcs-url=\"https://github.com/ianmiell/bad-dockerfile\" \\\n    org.label-schema.docker.dockerfile=\"/Dockerfile\"\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 250, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/Dockerfile"}, "region": {"startLine": 1, "endLine": 20, "snippet": {"text": "FROM nginx:alpine\nCOPY index.html /usr/share/nginx/html\nCOPY default.conf /etc/nginx/conf.d/default.conf\nRUN mkdir -p /var/cache/nginx\n\nRUN apk --no-cache add shadow && usermod -u 10014 nginx && \\\n    groupmod -g 10014 nginx\n\nRUN apk del shadow\n\nRUN chown -R nginx:nginx /usr/share/nginx/html && \\\n        chown -R nginx:nginx /var/cache/nginx && \\\n        chown -R nginx:nginx /var/log/nginx && \\\n        chown -R nginx:nginx /etc/nginx/conf.d\nRUN touch /var/run/nginx.pid && \\\n        chown -R nginx:nginx /var/run/nginx.pid\n\nUSER nginx\n\nWORKDIR /usr/share/nginx/html\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 69, "endLine": 70, "snippet": {"text": "          export AWS_ACCESS_KEY_ID=AKIAI***************\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 70, "endLine": 71, "snippet": {"text": "          export AWS_SECRET_ACCESS_KEY=wJalrX**********************************\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 890, "endLine": 891, "snippet": {"text": "          access_key: \"AKIAI***************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/cfngoat/cfngoat.yaml"}, "region": {"startLine": 891, "endLine": 892, "snippet": {"text": "          secret_key: \"wJalrX**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 202, "endLine": 203, "snippet": {"text": "  auth_token = \"eyJrI*****************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 212, "endLine": 213, "snippet": {"text": "  token = \"eyJrI****************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 253, "endLine": 254, "snippet": {"text": "  cloud_api_key       = \"eyJrIj*************************************************************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_13", "ruleIndex": 255, "level": "error", "attachments": [], "message": {"text": "Private Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 257, "endLine": 258, "snippet": {"text": "-----BEGIN ********************\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 313, "endLine": 314, "snippet": {"text": "  access_key = \"AKIAI***************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 314, "endLine": 315, "snippet": {"text": "  secret_key = \"UzIHRv**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 327, "endLine": 328, "snippet": {"text": "  access_token = \"AIzaSy*********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 539, "endLine": 540, "snippet": {"text": "  secret_key = \"UzIHRv**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 720, "endLine": 721, "snippet": {"text": "  token    = \"at-6***************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 738, "endLine": 739, "snippet": {"text": "    aws_secret_access_key = \"UzIHRv**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_13", "ruleIndex": 255, "level": "error", "attachments": [], "message": {"text": "Private Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 757, "endLine": 758, "snippet": {"text": "-----BEGIN ************************\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 847, "endLine": 848, "snippet": {"text": "  api_key = \"27b9dc**************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 852, "endLine": 853, "snippet": {"text": "  token             = \"dop_v1*****************************************************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 926, "endLine": 927, "snippet": {"text": "  token = \"ghp_YY**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/providers.tf"}, "region": {"startLine": 985, "endLine": 986, "snippet": {"text": "  token = \"glpat-********************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 15, "endLine": 16, "snippet": {"text": "export AWS_ACCESS_KEY_ID=AKIAI***************\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/ec2.tf"}, "region": {"startLine": 16, "endLine": 17, "snippet": {"text": "export AWS_SECRET_ACCESS_KEY=wJalrX**********************************\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 45, "endLine": 46, "snippet": {"text": "      access_key = \"AKIAI***************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/lambda.tf"}, "region": {"startLine": 46, "endLine": 47, "snippet": {"text": "      secret_key = \"wJalrX**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_2", "ruleIndex": 253, "level": "error", "attachments": [], "message": {"text": "AWS Access Key"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/providers.tf"}, "region": {"startLine": 10, "endLine": 11, "snippet": {"text": "  access_key = \"AKIAI***************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/aws/providers.tf"}, "region": {"startLine": 11, "endLine": 12, "snippet": {"text": "  secret_key = \"wJalrX**********************************\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 254, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/terragoat/terraform/azure/sql.tf"}, "region": {"startLine": 15, "endLine": 16, "snippet": {"text": "  administrator_login_password = \"Aa********\"\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 231, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 232, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 233, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_12", "ruleIndex": 234, "level": "error", "attachments": [], "message": {"text": "Memory requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 235, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 236, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_13", "ruleIndex": 237, "level": "error", "attachments": [], "message": {"text": "Memory limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 228, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_10", "ruleIndex": 238, "level": "error", "attachments": [], "message": {"text": "CPU requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 239, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 240, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 241, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 229, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 242, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 230, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 243, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 244, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_11", "ruleIndex": 245, "level": "error", "attachments": [], "message": {"text": "CPU limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/base/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 231, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 233, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_12", "ruleIndex": 234, "level": "error", "attachments": [], "message": {"text": "Memory requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 235, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 236, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_13", "ruleIndex": 237, "level": "error", "attachments": [], "message": {"text": "Memory limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 228, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_10", "ruleIndex": 238, "level": "error", "attachments": [], "message": {"text": "CPU requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 239, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 240, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 241, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 229, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 242, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 230, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 243, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 244, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_11", "ruleIndex": 245, "level": "error", "attachments": [], "message": {"text": "CPU limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/test/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 34, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: docker/default\n      labels:\n        app: kustomizegoat\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - kustomizegoat\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 231, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 232, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 233, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_12", "ruleIndex": 234, "level": "error", "attachments": [], "message": {"text": "Memory requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 235, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 236, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_13", "ruleIndex": 237, "level": "error", "attachments": [], "message": {"text": "Memory limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 228, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_10", "ruleIndex": 238, "level": "error", "attachments": [], "message": {"text": "CPU requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 239, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 240, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 241, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 229, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 242, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 230, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 243, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 244, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_K8S_11", "ruleIndex": 245, "level": "error", "attachments": [], "message": {"text": "CPU limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/kustomizegoat/kustomize/overlays/dev/kustomization.yaml"}, "region": {"startLine": 2, "endLine": 23, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kustomizegoat\n  name: kustomizegoat\n  namespace: kustomizegoat-dev\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kustomizegoat\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: kustomizegoat\n    spec:\n      containers:\n      - image: eurogig/kustomizegoat:0.1\n        name: kustomizegoat\n"}}}}]}, {"ruleId": "CKV_AZURE_2", "ruleIndex": 152, "level": "error", "attachments": [], "message": {"text": "Ensure Azure managed disk have encryption enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/storage.bicep"}, "region": {"startLine": 9, "endLine": 22, "snippet": {"text": "resource datadisk 'Microsoft.Compute/disks@2021-12-01' = {\n  name: '${name}-disk-${env}'\n  location: location\n  sku: {\n    name: 'Standard_LRS'\n  }\n\n  properties: {\n    diskSizeGB: 10\n    encryptionSettingsCollection: {\n      enabled: false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_36", "ruleIndex": 153, "level": "error", "attachments": [], "message": {"text": "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/storage.bicep"}, "region": {"startLine": 24, "endLine": 49, "snippet": {"text": "resource storageAccount 'Microsoft.Storage/storageAccounts@2021-01-01' = {\n  name: '${name}-sa-${env}'\n  location: location\n  kind: 'StorageV2'\n  sku: {\n    name: 'Standard_GRS'\n  }\n\n  properties: {\n    supportsHttpsTrafficOnly: false\n\n    networkAcls: {\n      bypass: 'None'\n      defaultAction: 'Deny'\n    }\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_3", "ruleIndex": 256, "level": "error", "attachments": [], "message": {"text": "Ensure that 'supportsHttpsTrafficOnly' is set to 'true'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/storage.bicep"}, "region": {"startLine": 24, "endLine": 49, "snippet": {"text": "resource storageAccount 'Microsoft.Storage/storageAccounts@2021-01-01' = {\n  name: '${name}-sa-${env}'\n  location: location\n  kind: 'StorageV2'\n  sku: {\n    name: 'Standard_GRS'\n  }\n\n  properties: {\n    supportsHttpsTrafficOnly: false\n\n    networkAcls: {\n      bypass: 'None'\n      defaultAction: 'Deny'\n    }\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_42", "ruleIndex": 110, "level": "error", "attachments": [], "message": {"text": "Ensure the key vault is recoverable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/key-vault.bicep"}, "region": {"startLine": 9, "endLine": 25, "snippet": {"text": "resource keyVault 'Microsoft.KeyVault/vaults@2021-04-01-preview' = {\n  name: '${name}-vault-${env}'\n  location: location\n\n  properties: {\n    tenantId: subscription().tenantId\n\n    sku: {\n      name: 'premium'\n      family: 'A'\n    }\n    networkAcls: {\n      defaultAction: 'Allow'\n      bypass: 'AzureServices'\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_41", "ruleIndex": 116, "level": "error", "attachments": [], "message": {"text": "Ensure that the expiration date is set on all secrets"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/key-vault.bicep"}, "region": {"startLine": 27, "endLine": 34, "snippet": {"text": "resource secret 'Microsoft.KeyVault/vaults/secrets@2021-04-01-preview' = {\n  parent: keyVault\n  name: '${name}-secret-${env}'\n\n  properties: {\n    value: 'some value'\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_1", "ruleIndex": 108, "level": "error", "attachments": [], "message": {"text": "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/instance.bicep"}, "region": {"startLine": 37, "endLine": 75, "snippet": {"text": "resource linuxVm 'Microsoft.Compute/virtualMachines@2020-06-01' = {\n  name: '${name}-linux-${env}'\n  location: location\n\n  properties: {\n    hardwareProfile: {\n      vmSize: 'Standard_F2'\n    }\n    storageProfile: {\n      osDisk: {\n        createOption: 'FromImage'\n        managedDisk: {\n          storageAccountType: 'Standard_LRS'\n        }\n      }\n      imageReference: {\n        publisher: 'Canonical'\n        offer: 'UbuntuServer'\n        sku: '16.04-LTS'\n        version: 'latest'\n      }\n    }\n    networkProfile: {\n      networkInterfaces: [\n        {\n          id: nic.id\n        }\n      ]\n    }\n    osProfile: {\n      computerName: '${name}-linux-${env}'\n      adminUsername: 'adminuser'\n      adminPassword: 'adminpass'\n      linuxConfiguration: {\n        disablePasswordAuthentication: false\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_38", "ruleIndex": 118, "level": "error", "attachments": [], "message": {"text": "Ensure audit profile captures all the activities"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/logging.bicep"}, "region": {"startLine": 9, "endLine": 25, "snippet": {"text": "resource profile 'Microsoft.Insights/logprofiles@2016-03-01' = {\n  name: '${name}-secret-${env}'\n  location: location\n\n  properties: {\n    categories: [\n      'Action'\n    ]\n    locations: [\n      'global'\n    ]\n    retentionPolicy: {\n      days: 30\n      enabled: true\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_37", "ruleIndex": 119, "level": "error", "attachments": [], "message": {"text": "Ensure that Activity Log Retention is set 365 days or greater"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/logging.bicep"}, "region": {"startLine": 9, "endLine": 25, "snippet": {"text": "resource profile 'Microsoft.Insights/logprofiles@2016-03-01' = {\n  name: '${name}-secret-${env}'\n  location: location\n\n  properties: {\n    categories: [\n      'Action'\n    ]\n    locations: [\n      'global'\n    ]\n    retentionPolicy: {\n      days: 30\n      enabled: true\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_8", "ruleIndex": 81, "level": "error", "attachments": [], "message": {"text": "Ensure Kubernetes Dashboard is disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/aks.bicep"}, "region": {"startLine": 9, "endLine": 34, "snippet": {"text": "resource aksCluster 'Microsoft.ContainerService/managedClusters@2021-02-01' = {\n  name: '${name}-aks-${env}'\n  location: location\n\n  identity: {\n    type: 'SystemAssigned'\n  }\n  properties: {\n    kubernetesVersion: '1.19.7'\n    dnsPrefix: '${name}-${env}'\n    enableRBAC: false\n\n    agentPoolProfiles: [\n      {\n        name: 'default'\n        count: 2\n        vmSize: 'Standard_D2_v2'\n      }\n    ]\n    addonProfiles: {\n      omsagent: {\n        enabled: false\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_7", "ruleIndex": 85, "level": "error", "attachments": [], "message": {"text": "Ensure AKS cluster has Network Policy configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/aks.bicep"}, "region": {"startLine": 9, "endLine": 34, "snippet": {"text": "resource aksCluster 'Microsoft.ContainerService/managedClusters@2021-02-01' = {\n  name: '${name}-aks-${env}'\n  location: location\n\n  identity: {\n    type: 'SystemAssigned'\n  }\n  properties: {\n    kubernetesVersion: '1.19.7'\n    dnsPrefix: '${name}-${env}'\n    enableRBAC: false\n\n    agentPoolProfiles: [\n      {\n        name: 'default'\n        count: 2\n        vmSize: 'Standard_D2_v2'\n      }\n    ]\n    addonProfiles: {\n      omsagent: {\n        enabled: false\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_6", "ruleIndex": 87, "level": "error", "attachments": [], "message": {"text": "Ensure AKS has an API Server Authorized IP Ranges enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/aks.bicep"}, "region": {"startLine": 9, "endLine": 34, "snippet": {"text": "resource aksCluster 'Microsoft.ContainerService/managedClusters@2021-02-01' = {\n  name: '${name}-aks-${env}'\n  location: location\n\n  identity: {\n    type: 'SystemAssigned'\n  }\n  properties: {\n    kubernetesVersion: '1.19.7'\n    dnsPrefix: '${name}-${env}'\n    enableRBAC: false\n\n    agentPoolProfiles: [\n      {\n        name: 'default'\n        count: 2\n        vmSize: 'Standard_D2_v2'\n      }\n    ]\n    addonProfiles: {\n      omsagent: {\n        enabled: false\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_4", "ruleIndex": 90, "level": "error", "attachments": [], "message": {"text": "Ensure AKS logging to Azure Monitoring is Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/aks.bicep"}, "region": {"startLine": 9, "endLine": 34, "snippet": {"text": "resource aksCluster 'Microsoft.ContainerService/managedClusters@2021-02-01' = {\n  name: '${name}-aks-${env}'\n  location: location\n\n  identity: {\n    type: 'SystemAssigned'\n  }\n  properties: {\n    kubernetesVersion: '1.19.7'\n    dnsPrefix: '${name}-${env}'\n    enableRBAC: false\n\n    agentPoolProfiles: [\n      {\n        name: 'default'\n        count: 2\n        vmSize: 'Standard_D2_v2'\n      }\n    ]\n    addonProfiles: {\n      omsagent: {\n        enabled: false\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_5", "ruleIndex": 91, "level": "error", "attachments": [], "message": {"text": "Ensure RBAC is enabled on AKS clusters"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/aks.bicep"}, "region": {"startLine": 9, "endLine": 34, "snippet": {"text": "resource aksCluster 'Microsoft.ContainerService/managedClusters@2021-02-01' = {\n  name: '${name}-aks-${env}'\n  location: location\n\n  identity: {\n    type: 'SystemAssigned'\n  }\n  properties: {\n    kubernetesVersion: '1.19.7'\n    dnsPrefix: '${name}-${env}'\n    enableRBAC: false\n\n    agentPoolProfiles: [\n      {\n        name: 'default'\n        count: 2\n        vmSize: 'Standard_D2_v2'\n      }\n    ]\n    addonProfiles: {\n      omsagent: {\n        enabled: false\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_15", "ruleIndex": 96, "level": "error", "attachments": [], "message": {"text": "Ensure web app is using the latest version of TLS encryption"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/app-service.bicep"}, "region": {"startLine": 18, "endLine": 42, "snippet": {"text": "resource app 'Microsoft.Web/sites@2020-06-01' = {\n  name: '${name}-app-service-${env}'\n  location: location\n  kind: 'app'\n  properties: {\n    httpsOnly: false\n    serverFarmId: appServicePlan.id\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n  resource configAuth 'config' = {\n    name: 'authsettings'\n\n    properties: {\n      enabled: false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_17", "ruleIndex": 97, "level": "error", "attachments": [], "message": {"text": "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/app-service.bicep"}, "region": {"startLine": 18, "endLine": 42, "snippet": {"text": "resource app 'Microsoft.Web/sites@2020-06-01' = {\n  name: '${name}-app-service-${env}'\n  location: location\n  kind: 'app'\n  properties: {\n    httpsOnly: false\n    serverFarmId: appServicePlan.id\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n  resource configAuth 'config' = {\n    name: 'authsettings'\n\n    properties: {\n      enabled: false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_14", "ruleIndex": 98, "level": "error", "attachments": [], "message": {"text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/app-service.bicep"}, "region": {"startLine": 18, "endLine": 42, "snippet": {"text": "resource app 'Microsoft.Web/sites@2020-06-01' = {\n  name: '${name}-app-service-${env}'\n  location: location\n  kind: 'app'\n  properties: {\n    httpsOnly: false\n    serverFarmId: appServicePlan.id\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n  resource configAuth 'config' = {\n    name: 'authsettings'\n\n    properties: {\n      enabled: false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_16", "ruleIndex": 100, "level": "error", "attachments": [], "message": {"text": "Ensure that Register with Azure Active Directory is enabled on App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/app-service.bicep"}, "region": {"startLine": 18, "endLine": 42, "snippet": {"text": "resource app 'Microsoft.Web/sites@2020-06-01' = {\n  name: '${name}-app-service-${env}'\n  location: location\n  kind: 'app'\n  properties: {\n    httpsOnly: false\n    serverFarmId: appServicePlan.id\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n  resource configAuth 'config' = {\n    name: 'authsettings'\n\n    properties: {\n      enabled: false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_18", "ruleIndex": 102, "level": "error", "attachments": [], "message": {"text": "Ensure that 'HTTP Version' is the latest if used to run the web app"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/app-service.bicep"}, "region": {"startLine": 18, "endLine": 42, "snippet": {"text": "resource app 'Microsoft.Web/sites@2020-06-01' = {\n  name: '${name}-app-service-${env}'\n  location: location\n  kind: 'app'\n  properties: {\n    httpsOnly: false\n    serverFarmId: appServicePlan.id\n  }\n\n  resource configWeb 'config' = {\n    name: 'web'\n\n    properties: {\n      minTlsVersion: '1.1'\n      remoteDebuggingEnabled: true\n    }\n  }\n  resource configAuth 'config' = {\n    name: 'authsettings'\n\n    properties: {\n      enabled: false\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_13", "ruleIndex": 104, "level": "error", "attachments": [], "message": {"text": "Ensure App Service Authentication is set on Azure App Service"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "iac/bicepgoat/bicep/app-service.bicep"}, "region": {"startLine": 35, "endLine": 41, "snippet": {"text": "  resource configAuth 'config' = {\n    name: 'authsettings'\n\n    properties: {\n      enabled: false\n    }\n  }\n"}}}}]}]}]}