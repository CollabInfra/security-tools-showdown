{"id": "0", "type": "path_scan", "iac_engine_version": "1.7.0", "entities_with_incidents": [{"filename": "iac/supplygoat/main.tf", "incidents": [{"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 94, "line_start": 74, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.logs", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 72, "line_start": 59, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.data_science", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 57, "line_start": 42, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.operations", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 40, "line_start": 27, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.financials", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 14, "line_start": 1, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.data", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 72, "line_start": 59, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.data_science", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 57, "line_start": 42, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.operations", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 40, "line_start": 27, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.financials", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 14, "line_start": 1, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.data", "severity": "HIGH"}, {"policy": "Granting public ACL rights on a bucket can lead to data leakage", "policy_id": "GG_IAC_0057", "line_end": 8, "line_start": 8, "description": "AWS S3 Access control lists (ACLs) enable you to manage access to buckets and objects.\nCanned ACL are predefined grants. For example, the `public-read` canned ACL will allow\nanyone to read the content of a bucket with such ACL associated.\n\nThe canned ACL defined on the bucket allow public access to the bucket and the objects\nit contains.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0057", "component": "aws_s3_bucket.data", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 94, "line_start": 74, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.logs", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 72, "line_start": 59, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.data_science", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 57, "line_start": 42, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.operations", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 40, "line_start": 27, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.financials", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 14, "line_start": 1, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.data", "severity": "HIGH"}], "total_incidents": 15}, {"filename": "iac/terragoat/terraform/aws/ec2.tf", "incidents": [{"policy": "EC2 instances use unencrypted block device", "policy_id": "GG_IAC_0033", "line_end": 32, "line_start": 1, "description": "Amazon EBS provides durable, block-level storage volumes that you can attach\nto a running instance. They will typically be used to host the filesystem\nfor an application (except for the boot volume). As such, they will often host\nconfiguration files, and sometimes the secrets needed by the application to\naccess external services.\n\nEncrypting your volumes ensures that your application runtime data will not be\ncompromised from raw access to the disks.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0033", "component": "aws_instance.web_host", "severity": "HIGH"}, {"policy": "EBS volume encryption should not be disabled", "policy_id": "GG_IAC_0038", "line_end": 51, "line_start": 34, "description": "EBS volumes are block level storage volumes for use with EC2 instances.\nThe data should always be encrypted at rest to protect the data if accesses\nare compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0038", "component": "aws_ebs_volume.web_host_storage", "severity": "HIGH"}, {"policy": "The Instance Metadata Service should not be available through IMDSv1", "policy_id": "GG_IAC_0035", "line_end": 32, "line_start": 1, "description": "Amazon EC2 Instance Metadata Service is an on-instance component that\nEC2 instances use to access instance metadata.\n\nThere are two versions of the protocol that allow to access IMDS:\nIMDSv1 and IMDSv2. IMDSv1 should be disabled, as it has not been\nhardened against accidental exposure on the public internet.\nIMDSv2 introduced session based authentication. An app can start a session\nby sending an HTTP PUT request to IMDSv2. This protects against exploitation using\nSSRF/XXE vulnerabilities present inside the EC2 instance.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0035", "component": "aws_instance.web_host", "severity": "HIGH"}, {"policy": "Unrestricted egress traffic might lead to remote code execution", "policy_id": "GG_IAC_0002", "line_end": 102, "line_start": 101, "description": "Open egress means that the asset can download data from the whole web.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0002", "component": "aws_security_group.web-node", "severity": "HIGH"}, {"policy": "Unrestricted ingress traffic leaves assets exposed to remote attacks", "policy_id": "GG_IAC_0003", "line_end": 95, "line_start": 94, "description": "A security group has open ingress from all IPs, and on all ports. This means that the\nassets in this security group are exposed to the whole web.\n\nFurthermore, no port range is specified. This\nmeans that some applications running on assets of this security group may be reached by\nexternal traffic, while they are not expected to do so.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0003", "component": "aws_security_group.web-node", "severity": "HIGH"}, {"policy": "Unrestricted ingress traffic leaves assets exposed to remote attacks", "policy_id": "GG_IAC_0003", "line_end": 88, "line_start": 87, "description": "A security group has open ingress from all IPs, and on all ports. This means that the\nassets in this security group are exposed to the whole web.\n\nFurthermore, no port range is specified. This\nmeans that some applications running on assets of this security group may be reached by\nexternal traffic, while they are not expected to do so.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0003", "component": "aws_security_group.web-node", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 288, "line_start": 271, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.flowbucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 288, "line_start": 271, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.flowbucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 288, "line_start": 271, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.flowbucket", "severity": "HIGH"}], "total_incidents": 9}, {"filename": "iac/terragoat/terraform/aws/db-app.tf", "incidents": [{"policy": "EC2 instances use unencrypted block device", "policy_id": "GG_IAC_0033", "line_end": 413, "line_start": 243, "description": "Amazon EBS provides durable, block-level storage volumes that you can attach\nto a running instance. They will typically be used to host the filesystem\nfor an application (except for the boot volume). As such, they will often host\nconfiguration files, and sometimes the secrets needed by the application to\naccess external services.\n\nEncrypting your volumes ensures that your application runtime data will not be\ncompromised from raw access to the disks.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0033", "component": "aws_instance.db_app", "severity": "HIGH"}, {"policy": "The Instance Metadata Service should not be available through IMDSv1", "policy_id": "GG_IAC_0035", "line_end": 413, "line_start": 243, "description": "Amazon EC2 Instance Metadata Service is an on-instance component that\nEC2 instances use to access instance metadata.\n\nThere are two versions of the protocol that allow to access IMDS:\nIMDSv1 and IMDSv2. IMDSv1 should be disabled, as it has not been\nhardened against accidental exposure on the public internet.\nIMDSv2 introduced session based authentication. An app can start a session\nby sending an HTTP PUT request to IMDSv2. This protects against exploitation using\nSSRF/XXE vulnerabilities present inside the EC2 instance.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0035", "component": "aws_instance.db_app", "severity": "HIGH"}, {"policy": "Unrestricted egress traffic might lead to remote code execution", "policy_id": "GG_IAC_0002", "line_end": 150, "line_start": 150, "description": "Open egress means that the asset can download data from the whole web.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0002", "component": "aws_security_group_rule.egress", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 221, "line_start": 221, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "aws_iam_role_policy.ec2policy", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 219, "line_start": 215, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "aws_iam_role_policy.ec2policy", "severity": "HIGH"}, {"policy": "AWS RDS DB instance should be encrypted", "policy_id": "GG_IAC_0060", "line_end": 19, "line_start": 19, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. DB instances are\nthe basic building block of Amazon RDS.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0060", "component": "aws_db_instance.default", "severity": "HIGH"}, {"policy": "Publicly accessible database are exposed to remote attacks", "policy_id": "GG_IAC_0004", "line_end": 22, "line_start": 22, "description": "Publicly accessible AWS RDS instances are exposed to the whole web, and\nthus subject to a range of remote attacks.\"", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0004", "component": "aws_db_instance.default", "severity": "HIGH"}], "total_incidents": 7}, {"filename": "iac/terragoat/terraform/aws/ecr.tf", "incidents": [{"policy": "ECR image scanning should be enabled", "policy_id": "GG_IAC_0039", "line_end": 18, "line_start": 1, "description": "Amazon ECR provides the repository that stores all the code that has been\npackaged as a Docker image in order to deploy application images and artifacts.\nImage scanning should be enabled with the `scan_on_push` parameter to\nautomatically identify vulnerabilities within the Common Vulnerabilities and Exposures\n(CVEs) database from the open-source Clair project. It can be checked\nwithin the container images each time a new version of an image is pushed.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0039", "component": "aws_ecr_repository.repository", "severity": "HIGH"}, {"policy": "ECR registry with mutable tags can lead to code injection", "policy_id": "GG_IAC_0040", "line_end": 3, "line_start": 3, "description": "Amazon Elastic Container Registry (Amazon ECR) is an AWS managed container image\nregistry service.\n\nImages in the registry can be referenced with tags. When a repository has mutable\ntags, an attacker with access to the registry could upload a compromised image,\nand assign to it the tag of an image used in production, so that the compromised image\nwould be used instead.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0040", "component": "aws_ecr_repository.repository", "severity": "HIGH"}], "total_incidents": 2}, {"filename": "iac/terragoat/terraform/aws/eks.tf", "incidents": [{"policy": "Encrypting EKS secrets with AWS KMS adds another layer of security", "policy_id": "GG_IAC_0044", "line_end": 141, "line_start": 118, "description": "AWS EKS is a managed service that you can use to run Kubernetes on AWS.\n\nIn order to support defense-in-depth of Kubernetes secrets, EKS includes\n[AWS Encryption Provider](https://github.com/kubernetes-sigs/aws-encryption-provider),\nwhich allows it to integrate with AWS KMS for encrypting secrets.\n\nEnabling encryption of Kubernetes secrets with AWS KMS adds another layer\nof protection for your secrets.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0044", "component": "aws_eks_cluster.eks_cluster", "severity": "HIGH"}, {"policy": "Leaving public access open exposes your service to the internet", "policy_id": "GG_IAC_0022", "line_end": 125, "line_start": 122, "description": "The access endpoint of an EKS cluster is used to communicate and interact with the\ncluster (such as when using kubectl).\n\nLeaving the endpoint exposed to the  internet can allow an attacker to perform\ndistributed denial of service (DDoS) attacks on the service. In case other\nvulnerabilities are also present in the service, this would facilitate their exploitation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0022", "component": "aws_eks_cluster.eks_cluster", "severity": "MEDIUM"}], "total_incidents": 2}, {"filename": "iac/terragoat/terraform/aws/es.tf", "incidents": [{"policy": "Elasticsearch data should be encrypted at rest", "policy_id": "GG_IAC_0047", "line_end": 28, "line_start": 1, "description": "Amazon Elasticsearch is a fully open-source search and analytics engine for use cases\nsuch as log analytics, real-time application monitoring, and clickstream analysis.\n\nThe data should be encrypted at rest to protect the data if accesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0047", "component": "aws_elasticsearch_domain.monitoring-framework", "severity": "HIGH"}, {"policy": "ElasticSearch should use node-to-node encryption", "policy_id": "GG_IAC_0045", "line_end": 28, "line_start": 1, "description": "Amazon Elasticsearch is a fully open-source search and analytics engine for use cases\nsuch as log analytics, real-time application monitoring, and clickstream analysis.\n\nNode-to-node encryption provides an additional layer of security on top of the default\nfeatures of Amazon Elasticsearch Service. It helps ensure that data remains encrypted\nas Elasticsearch distributes (and redistributes) it throughout the cluster.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0045", "component": "aws_elasticsearch_domain.monitoring-framework", "severity": "HIGH"}, {"policy": "Plain HTTP is used", "policy_id": "GG_IAC_0001", "line_end": 28, "line_start": 1, "description": "Plain HTTP should not be used, it is unencrypted. HTTPS should be used instead.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0001", "component": "aws_elasticsearch_domain.monitoring-framework", "severity": "HIGH"}, {"policy": "AWS Elasticsearch domain endpoints should not use a deprecated versionof SSL/TLS", "policy_id": "GG_IAC_0066", "line_end": 28, "line_start": 1, "description": "Amazon Elasticsearch is a fully open-source search and analytics engine for use cases\nsuch as log analytics, real-time application monitoring, and clickstream analysis.\n\nOutdated TLS policies (version 1.0 and 1.1) rely on insecure cipher suites\n(SHA-1 and MD5), and are subject to a range of well known attacks. Note that\nTLS 1.0 and 1.1 have been deprecated on March 25, 2021.\n\nAllowing such policies can allow attackers to break the encryption, decrypt the\ntraffic, and perform man-in-the-middle attacks.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0066", "component": "aws_elasticsearch_domain.monitoring-framework", "severity": "HIGH"}], "total_incidents": 4}, {"filename": "iac/terragoat/terraform/aws/elb.tf", "incidents": [{"policy": "ELB load balancers should be internal", "policy_id": "GG_IAC_0050", "line_end": 40, "line_start": 2, "description": "Elastic Load Balancing automatically distributes incoming traffic across multiple\ntargets, such as EC2 instances, containers, and IP addresses, in one or more\nAvailability Zones.\n\nWhen you create a load balancer in Virtual Private Cloud (VPC), you must choose whether to make it an internal\nload balancer or an internet-facing load balancer.\nIf you want clients to be able to connect to your load balancer who are not on the VPC,\nyou need to set it as internet-facing. However, this could lead to accidental exposure\nof internal resources.\nYou should ensure that the load balancer needs to be connected to the wider internet.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0050", "component": "aws_elb.weblb", "severity": "HIGH"}], "total_incidents": 1}, {"filename": "iac/terragoat/terraform/aws/iam.tf", "incidents": [{"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 41, "line_start": 41, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "aws_iam_user_policy.userpolicy", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 39, "line_start": 34, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "aws_iam_user_policy.userpolicy", "severity": "HIGH"}], "total_incidents": 2}, {"filename": "iac/terragoat/terraform/aws/neptune.tf", "incidents": [{"policy": "Neptune storage should be encrypted at rest", "policy_id": "GG_IAC_0063", "line_end": 9, "line_start": 9, "description": "Amazon Neptune is a fast, reliable, fully-managed graph database service that makes\nit easy to build and run applications that work with highly connected datasets.\n\nThe storage should always be encrypted at rest to protect the data if accesses\nare compromised. It is recommended to use the keys managed by AWS Key\nManagement Service (KMS) for encryption and decryption.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0063", "component": "aws_neptune_cluster.default", "severity": "HIGH"}, {"policy": "Neptune storage encryption should use KMS keys", "policy_id": "GG_IAC_0069", "line_end": 20, "line_start": 1, "description": "Amazon Neptune is a fast, reliable, fully-managed graph database service that makes\nit easy to build and run applications that work with highly connected datasets.\n\nIt is recommended to encrypt the storage with a key managed by AWS Key Management\nService (KMS) for an added layer of security, an increased control and to manage\nfactors like rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0069", "component": "aws_neptune_cluster.default", "severity": "LOW"}], "total_incidents": 2}, {"filename": "iac/terragoat/terraform/aws/rds.tf", "incidents": [{"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 111, "line_start": 97, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app7-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 95, "line_start": 81, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app6-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 79, "line_start": 65, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app5-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 63, "line_start": 49, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app4-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 47, "line_start": 33, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app3-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 31, "line_start": 17, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app2-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 144, "line_start": 130, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app9-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 128, "line_start": 113, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app8-rds-cluster", "severity": "HIGH"}, {"policy": "AWS RDS Aurora cluster should be encrypted", "policy_id": "GG_IAC_0059", "line_end": 15, "line_start": 1, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. An RDS Aurora\ncluster is a group of DB instances.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0059", "component": "aws_rds_cluster.app1-rds-cluster", "severity": "HIGH"}], "total_incidents": 9}, {"filename": "iac/terragoat/terraform/aws/s3.tf", "incidents": [{"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 111, "line_start": 89, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.data_science", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 87, "line_start": 65, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.operations", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 63, "line_start": 42, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.financials", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 141, "line_start": 113, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.logs", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 21, "line_start": 1, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "aws_s3_bucket.data", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 111, "line_start": 89, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.data_science", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 87, "line_start": 65, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.operations", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 63, "line_start": 42, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.financials", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 21, "line_start": 1, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "aws_s3_bucket.data", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 111, "line_start": 89, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.data_science", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 87, "line_start": 65, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.operations", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 63, "line_start": 42, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.financials", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 141, "line_start": 113, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.logs", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 21, "line_start": 1, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "aws_s3_bucket.data", "severity": "HIGH"}], "total_incidents": 14}, {"filename": "iac/terragoat/terraform/azure/aks.tf", "incidents": [{"policy": "Leaving public access open exposes your service to the internet", "policy_id": "GG_IAC_0024", "line_end": 35, "line_start": 1, "description": "The API server of an AKS cluster is used to communicate and interact with the cluster\n(such as when using kubectl).\n\nLeaving the API server exposed to the whole internet can allow an attacker to perform\ndistributed denial of service (DDoS) attacks on the service. In case other\nvulnerabilities are also present in the service, this would facilitate their exploitation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0024", "component": "azurerm_kubernetes_cluster.k8s_cluster", "severity": "HIGH"}], "total_incidents": 1}, {"filename": "iac/terragoat/terraform/azure/networking.tf", "incidents": [{"policy": "Leaving remote access accessible from the internet increases the attack surface", "policy_id": "GG_IAC_0009", "line_end": 92, "line_start": 92, "description": "SSH or RDP ports are open to the internet.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0009", "component": "azurerm_network_security_group.bad_sg", "severity": "CRITICAL"}, {"policy": "Unrestricted ingress traffic leave assets exposed to remote attacks", "policy_id": "GG_IAC_0021", "line_end": 92, "line_start": 92, "description": "Having open ingress means that your asset is exposed to some hosts on the public\ninternet.\n\n- If credentials are required to establish a connection, it still leaves open\n  the possibility to bruteforce the credentials, or perform Denial of\n  Service attacks.\n- If no credentials are required, or credentials have\n  been acquired by an attacker, then the asset is fully compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0021", "component": "azurerm_network_security_group.bad_sg", "severity": "HIGH"}, {"policy": "Unrestricted ingress traffic leave assets exposed to remote attacks", "policy_id": "GG_IAC_0021", "line_end": 80, "line_start": 80, "description": "Having open ingress means that your asset is exposed to some hosts on the public\ninternet.\n\n- If credentials are required to establish a connection, it still leaves open\n  the possibility to bruteforce the credentials, or perform Denial of\n  Service attacks.\n- If no credentials are required, or credentials have\n  been acquired by an attacker, then the asset is fully compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0021", "component": "azurerm_network_security_group.bad_sg", "severity": "HIGH"}, {"policy": "Leaving remote access accessible from the internet increases the attack surface", "policy_id": "GG_IAC_0009", "line_end": 80, "line_start": 80, "description": "SSH or RDP ports are open to the internet.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0009", "component": "azurerm_network_security_group.bad_sg", "severity": "CRITICAL"}], "total_incidents": 4}, {"filename": "iac/terragoat/terraform/azure/storage.tf", "incidents": [{"policy": "Using outdated TLS policies can allow an attacker to decrypt traffic or impersonate a server", "policy_id": "GG_IAC_0013", "line_end": 60, "line_start": 23, "description": "Outdated TLS policies (version 1.0 and 1.1) rely on insecure cipher suites\n(SHA-1 and MD5), and are subject to a range of well known attack. Note that\nTLS 1.0 and 1.1 have been deprecated on March 25, 2021.\n\nAllowing such policies can allow attacker to break the encryption, decrypt the\ntraffic, and perform man-in-the-middle attacks.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0013", "component": "azurerm_storage_account.example", "severity": "HIGH"}], "total_incidents": 1}, {"filename": "iac/terragoat/terraform/azure/mssql.tf", "incidents": [{"policy": "Using outdated TLS policies can allow an attacker to decrypt traffic or impersonate a server", "policy_id": "GG_IAC_0013", "line_end": 18, "line_start": 1, "description": "Outdated TLS policies (version 1.0 and 1.1) rely on insecure cipher suites\n(SHA-1 and MD5), and are subject to a range of well known attack. Note that\nTLS 1.0 and 1.1 have been deprecated on March 25, 2021.\n\nAllowing such policies can allow attacker to break the encryption, decrypt the\ntraffic, and perform man-in-the-middle attacks.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0013", "component": "azurerm_storage_account.security_storage_account", "severity": "HIGH"}], "total_incidents": 1}, {"filename": "iac/terragoat/terraform/gcp/big_data.tf", "incidents": [{"policy": "Defining a GCP BigQuery dataset as publicly accessible can lead to data exposure", "policy_id": "GG_IAC_0020", "line_end": 24, "line_start": 24, "description": "GCP BigQuery is a managed data warehousing solution. Most of the data stored in BigQuery\nare accessible in tables. When defining a dataset, access roles and\ngroups can be specified. If the \"allAuthenticatedUsers\" special group is used, all GCP\nusers can access the data stored in the concerned BigQuery dataset.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0020", "component": "google_bigquery_dataset.dataset", "severity": "CRITICAL"}], "total_incidents": 1}, {"filename": "iac/cfngoat/cfngoat.yaml", "incidents": [{"policy": "EBS volume encryption should not be disabled", "policy_id": "GG_IAC_0038", "line_end": 101, "line_start": 74, "description": "EBS volumes are block level storage volumes for use with EC2 instances.\nThe data should always be encrypted at rest to protect the data if accesses\nare compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0038", "component": "WebHostStorage", "severity": "HIGH"}, {"policy": "The Instance Metadata Service should not be available through IMDSv1", "policy_id": "GG_IAC_0035", "line_end": 63, "line_start": 31, "description": "Amazon EC2 Instance Metadata Service is an on-instance component that\nEC2 instances use to access instance metadata.\n\nThere are two versions of the protocol that allow to access IMDS:\nIMDSv1 and IMDSv2. IMDSv1 should be disabled, as it has not been\nhardened against accidental exposure on the public internet.\nIMDSv2 introduced session based authentication. An app can start a session\nby sending an HTTP PUT request to IMDSv2. This protects against exploitation using\nSSRF/XXE vulnerabilities present inside the EC2 instance.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0035", "component": "EC2Instance", "severity": "HIGH"}, {"policy": "The Instance Metadata Service should not be available through IMDSv1", "policy_id": "GG_IAC_0035", "line_end": 723, "line_start": 690, "description": "Amazon EC2 Instance Metadata Service is an on-instance component that\nEC2 instances use to access instance metadata.\n\nThere are two versions of the protocol that allow to access IMDS:\nIMDSv1 and IMDSv2. IMDSv1 should be disabled, as it has not been\nhardened against accidental exposure on the public internet.\nIMDSv2 introduced session based authentication. An app can start a session\nby sending an HTTP PUT request to IMDSv2. This protects against exploitation using\nSSRF/XXE vulnerabilities present inside the EC2 instance.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0035", "component": "DBAppInstance", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 1088, "line_start": 1088, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "CleanupRole", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 674, "line_start": 674, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "EC2Policy", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 407, "line_start": 407, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "UserPolicy", "severity": "HIGH"}, {"policy": "IAM policies should avoid using wildcards", "policy_id": "GG_IAC_0051", "line_end": 1081, "line_start": 1081, "description": "Identity and access management (IAM) ensures that the right people and job roles in the\norganization can access the tools they need for their tasks.\nIAM policies define the permissions to resources. A too permissive policy could grant\naccess to certain undesired resources or actions.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0051", "component": "CleanupRole", "severity": "HIGH"}, {"policy": "AWS RDS DB instance should be encrypted", "policy_id": "GG_IAC_0060", "line_end": 488, "line_start": 488, "description": "Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier\nto set up, operate, and scale a relational database in the AWS Cloud. DB instances are\nthe basic building block of Amazon RDS.\n\nThe data should always be encrypted at rest to protect the data if\naccesses are compromised.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0060", "component": "DefaultDB", "severity": "HIGH"}, {"policy": "Publicly accessible database are exposed to remote attacks", "policy_id": "GG_IAC_0004", "line_end": 490, "line_start": 490, "description": "Publicly accessible AWS RDS instances are exposed to the whole web, and\nthus subject to a range of remote attacks.\"", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0004", "component": "DefaultDB", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 372, "line_start": 349, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "FlowBucket", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 942, "line_start": 918, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "DataBucket", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 1062, "line_start": 1031, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "LogsBucket", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 970, "line_start": 946, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "FinancialsBucket", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 998, "line_start": 972, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "OperationsBucket", "severity": "HIGH"}, {"policy": "Allowing public exposure of a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0055", "line_end": 1029, "line_start": 1000, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the BlockPublicAcls, BlockPublicPolicy and IgnorePublicAcls rule on a bucket\nallows to make sure that no ACL (Access control list) or policy giving public access\ncan be associated with the bucket, and that existing ACL giving public access to\nthe bucket will not be taken into account.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0055", "component": "DataScienceBucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 970, "line_start": 946, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "FinancialsBucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 372, "line_start": 349, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "FlowBucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 1043, "line_start": 1041, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "LogsBucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 998, "line_start": 972, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "OperationsBucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 1029, "line_start": 1000, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "DataScienceBucket", "severity": "HIGH"}, {"policy": "Unencrypted S3 bucket can lead to data leak", "policy_id": "GG_IAC_0008", "line_end": 942, "line_start": 918, "description": "AWS S3 buckets should be encrypted to protect the data if accesses are compromised.\n\nThere are two types of server-side encryption for Amazon S3 buckets:\n- Server-Side Encryption with Amazon S3-managed keys (SSE-S3)\n- Server-Side Encryption with AWS Key Management Service keys (SSE-KMS)\n\nThere are no additional charges with SSE-S3. For SSE-KMS, AWS KMS charges apply.\nHowever, KMS are considered more secure since they provide more control to the customer\nand allow keys rotation.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0008", "component": "DataBucket", "severity": "HIGH"}, {"policy": "Granting public ACL rights on a bucket can lead to data leakage", "policy_id": "GG_IAC_0057", "line_end": 923, "line_start": 923, "description": "AWS S3 Access control lists (ACLs) enable you to manage access to buckets and objects.\nCanned ACL are predefined grants. For example, the `public-read` canned ACL will allow\nanyone to read the content of a bucket with such ACL associated.\n\nThe canned ACL defined on the bucket allow public access to the bucket and the objects\nit contains.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0057", "component": "DataBucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 1062, "line_start": 1031, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "LogsBucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 998, "line_start": 972, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "OperationsBucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 1029, "line_start": 1000, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "DataScienceBucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 942, "line_start": 918, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "DataBucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 970, "line_start": 946, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "FinancialsBucket", "severity": "HIGH"}, {"policy": "Not restricting public access on a S3 bucket can lead to data leakage", "policy_id": "GG_IAC_0056", "line_end": 372, "line_start": 349, "description": "AWS S3 Block Public Access is a feature that allows setting up centralized controls\nto manage public access to S3 resources.\n\nEnforcing the RestrictPublicBuckets rule on a bucket allows to make sure only AWS\nservice principals and authorized users within the bucket owner's account will be\nable to access the bucket.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0056", "component": "FlowBucket", "severity": "HIGH"}, {"policy": "Unrestricted ingress traffic leaves assets exposed to remote attacks", "policy_id": "GG_IAC_0003", "line_end": 126, "line_start": 126, "description": "A security group has open ingress from all IPs, and on all ports. This means that the\nassets in this security group are exposed to the whole web.\n\nFurthermore, no port range is specified. This\nmeans that some applications running on assets of this security group may be reached by\nexternal traffic, while they are not expected to do so.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0003", "component": "WebNodeSG", "severity": "HIGH"}, {"policy": "Unrestricted ingress traffic leaves assets exposed to remote attacks", "policy_id": "GG_IAC_0003", "line_end": 130, "line_start": 130, "description": "A security group has open ingress from all IPs, and on all ports. This means that the\nassets in this security group are exposed to the whole web.\n\nFurthermore, no port range is specified. This\nmeans that some applications running on assets of this security group may be reached by\nexternal traffic, while they are not expected to do so.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0003", "component": "WebNodeSG", "severity": "HIGH"}, {"policy": "Unrestricted ingress traffic leaves assets exposed to remote attacks", "policy_id": "GG_IAC_0003", "line_end": 122, "line_start": 122, "description": "A security group has open ingress from all IPs, and on all ports. This means that the\nassets in this security group are exposed to the whole web.\n\nFurthermore, no port range is specified. This\nmeans that some applications running on assets of this security group may be reached by\nexternal traffic, while they are not expected to do so.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0003", "component": "WebNodeSG", "severity": "HIGH"}], "total_incidents": 31}, {"filename": "iac/cfngoat/eks.yaml", "incidents": [{"policy": "Encrypting EKS secrets with AWS KMS adds another layer of security", "policy_id": "GG_IAC_0044", "line_end": 453, "line_start": 439, "description": "AWS EKS is a managed service that you can use to run Kubernetes on AWS.\n\nIn order to support defense-in-depth of Kubernetes secrets, EKS includes\n[AWS Encryption Provider](https://github.com/kubernetes-sigs/aws-encryption-provider),\nwhich allows it to integrate with AWS KMS for encrypting secrets.\n\nEnabling encryption of Kubernetes secrets with AWS KMS adds another layer\nof protection for your secrets.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0044", "component": "EKSCluster", "severity": "HIGH"}], "total_incidents": 1}, {"filename": "iac/supplygoat/eks.yaml", "incidents": [{"policy": "Encrypting EKS secrets with AWS KMS adds another layer of security", "policy_id": "GG_IAC_0044", "line_end": 279, "line_start": 265, "description": "AWS EKS is a managed service that you can use to run Kubernetes on AWS.\n\nIn order to support defense-in-depth of Kubernetes secrets, EKS includes\n[AWS Encryption Provider](https://github.com/kubernetes-sigs/aws-encryption-provider),\nwhich allows it to integrate with AWS KMS for encrypting secrets.\n\nEnabling encryption of Kubernetes secrets with AWS KMS adds another layer\nof protection for your secrets.", "documentation_url": "https://docs.gitguardian.com/iac-scanning/policies/GG_IAC_0044", "component": "EKSCluster", "severity": "HIGH"}], "total_incidents": 1}], "total_incidents": 108}
