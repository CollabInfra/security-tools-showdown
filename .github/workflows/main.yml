# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: run kics Scan
        uses: Checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          output_path: reports/
          ignore_on_exit: results
          output_formats: sarif
          enable_comments: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/results.sarif

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    permissions:
      deployments: write

    steps:
      - uses: actions/checkout@v1

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: production

      - name: Publish Checkov
        id: import-scan-checkov
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          file: reports/checkov.sarif
          scan_type: SARIF
          engagement: 1


      - name: Show response
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan-checkov.outputs.response }}'

      - name: Publish CycloneDX
        id: import-scan-grype
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          file: reports/grype-sbom.json
          scan_type: CycloneDX Scan
          engagement: 1

      - name: Show response
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan-grype.outputs.response }}'
